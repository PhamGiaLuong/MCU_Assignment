
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b4c  08003b4c  00004b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b78  08003b78  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003b78  08003b78  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b78  08003b78  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b78  08003b78  00004b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b7c  08003b7c  00004b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003b80  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000010  08003b90  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08003b90  00005084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072c1  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185e  00000000  00000000  0000c2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d5  00000000  00000000  0000e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001656c  00000000  00000000  0000e8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a727  00000000  00000000  00024e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821d7  00000000  00000000  0002f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b173f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ddc  00000000  00000000  000b1784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b3560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b34 	.word	0x08003b34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003b34 	.word	0x08003b34

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	@ 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	@ 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	@ (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 f879 	bl	8001290 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000002c 	.word	0x2000002c

080001ac <lcd_init>:
	data_t[2] = data_l|0x0D;  //en=1, rs=0
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void) {
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80001b0:	2033      	movs	r0, #51	@ 0x33
 80001b2:	f7ff ffcb 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80001b6:	2032      	movs	r0, #50	@ 0x32
 80001b8:	f7ff ffc8 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001bc:	2032      	movs	r0, #50	@ 0x32
 80001be:	f000 fb99 	bl	80008f4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80001c2:	2028      	movs	r0, #40	@ 0x28
 80001c4:	f7ff ffc2 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001c8:	2032      	movs	r0, #50	@ 0x32
 80001ca:	f000 fb93 	bl	80008f4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80001ce:	2001      	movs	r0, #1
 80001d0:	f7ff ffbc 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001d4:	2032      	movs	r0, #50	@ 0x32
 80001d6:	f000 fb8d 	bl	80008f4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80001da:	2006      	movs	r0, #6
 80001dc:	f7ff ffb6 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001e0:	2032      	movs	r0, #50	@ 0x32
 80001e2:	f000 fb87 	bl	80008f4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80001e6:	200c      	movs	r0, #12
 80001e8:	f7ff ffb0 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001ec:	2032      	movs	r0, #50	@ 0x32
 80001ee:	f000 fb81 	bl	80008f4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80001f2:	2002      	movs	r0, #2
 80001f4:	f7ff ffaa 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 80001f8:	2032      	movs	r0, #50	@ 0x32
 80001fa:	f000 fb7b 	bl	80008f4 <HAL_Delay>
	lcd_send_cmd (0x80);
 80001fe:	2080      	movs	r0, #128	@ 0x80
 8000200:	f7ff ffa4 	bl	800014c <lcd_send_cmd>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020e:	f000 fb0f 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000212:	f000 f810 	bl	8000236 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000216:	f000 f87d 	bl	8000314 <MX_GPIO_Init>
  MX_I2C1_Init();
 800021a:	f000 f84d 	bl	80002b8 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int a = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]
  lcd_init();
 8000222:	f7ff ffc3 	bl	80001ac <lcd_init>
//		turnLed(X, Yellow);
//		turnLed(Y, Red);
//		HAL_Delay(2000);
//		turnLed(X, Green);
//		turnLed(Y, Red);
	  	blinkLed(Green);
 8000226:	2001      	movs	r0, #1
 8000228:	f000 fa84 	bl	8000734 <blinkLed>
		HAL_Delay(250);
 800022c:	20fa      	movs	r0, #250	@ 0xfa
 800022e:	f000 fb61 	bl	80008f4 <HAL_Delay>
	  	blinkLed(Green);
 8000232:	bf00      	nop
 8000234:	e7f7      	b.n	8000226 <main+0x1e>

08000236 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	b090      	sub	sp, #64	@ 0x40
 800023a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	2228      	movs	r2, #40	@ 0x28
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f003 fc49 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000258:	2302      	movs	r3, #2
 800025a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	2310      	movs	r3, #16
 8000262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000264:	2302      	movs	r3, #2
 8000266:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000268:	2300      	movs	r3, #0
 800026a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800026c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	4618      	mov	r0, r3
 8000278:	f003 f834 	bl	80032e4 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000282:	f000 f8f9 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000296:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2102      	movs	r1, #2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f003 faa1 	bl	80037e8 <HAL_RCC_ClockConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ac:	f000 f8e4 	bl	8000478 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3740      	adds	r7, #64	@ 0x40
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002bc:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002be:	4a13      	ldr	r2, [pc, #76]	@ (800030c <MX_I2C1_Init+0x54>)
 80002c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002c2:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002c4:	4a12      	ldr	r2, [pc, #72]	@ (8000310 <MX_I2C1_Init+0x58>)
 80002c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 82;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002d0:	2252      	movs	r2, #82	@ 0x52
 80002d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002e2:	4b09      	ldr	r3, [pc, #36]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e8:	4b07      	ldr	r3, [pc, #28]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ee:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f4:	4804      	ldr	r0, [pc, #16]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002f6:	f000 fe73 	bl	8000fe0 <HAL_I2C_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000300:	f000 f8ba 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000002c 	.word	0x2000002c
 800030c:	40005400 	.word	0x40005400
 8000310:	000186a0 	.word	0x000186a0

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000328:	4b4e      	ldr	r3, [pc, #312]	@ (8000464 <MX_GPIO_Init+0x150>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a4d      	ldr	r2, [pc, #308]	@ (8000464 <MX_GPIO_Init+0x150>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b4b      	ldr	r3, [pc, #300]	@ (8000464 <MX_GPIO_Init+0x150>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0310 	and.w	r3, r3, #16
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000340:	4b48      	ldr	r3, [pc, #288]	@ (8000464 <MX_GPIO_Init+0x150>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a47      	ldr	r2, [pc, #284]	@ (8000464 <MX_GPIO_Init+0x150>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b45      	ldr	r3, [pc, #276]	@ (8000464 <MX_GPIO_Init+0x150>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b42      	ldr	r3, [pc, #264]	@ (8000464 <MX_GPIO_Init+0x150>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a41      	ldr	r2, [pc, #260]	@ (8000464 <MX_GPIO_Init+0x150>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b3f      	ldr	r3, [pc, #252]	@ (8000464 <MX_GPIO_Init+0x150>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b3c      	ldr	r3, [pc, #240]	@ (8000464 <MX_GPIO_Init+0x150>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a3b      	ldr	r2, [pc, #236]	@ (8000464 <MX_GPIO_Init+0x150>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b39      	ldr	r3, [pc, #228]	@ (8000464 <MX_GPIO_Init+0x150>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LaneY_B_Pin|LaneY_A_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800038e:	4836      	ldr	r0, [pc, #216]	@ (8000468 <MX_GPIO_Init+0x154>)
 8000390:	f000 fdec 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LaneX_B_GPIO_Port, LaneX_B_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2180      	movs	r1, #128	@ 0x80
 8000398:	4834      	ldr	r0, [pc, #208]	@ (800046c <MX_GPIO_Init+0x158>)
 800039a:	f000 fde7 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LaneX_A_GPIO_Port, LaneX_A_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2140      	movs	r1, #64	@ 0x40
 80003a2:	4833      	ldr	r0, [pc, #204]	@ (8000470 <MX_GPIO_Init+0x15c>)
 80003a4:	f000 fde2 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ae:	4b31      	ldr	r3, [pc, #196]	@ (8000474 <MX_GPIO_Init+0x160>)
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	482b      	ldr	r0, [pc, #172]	@ (800046c <MX_GPIO_Init+0x158>)
 80003be:	f000 fc51 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003c2:	230c      	movs	r3, #12
 80003c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c6:	2302      	movs	r3, #2
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4824      	ldr	r0, [pc, #144]	@ (8000468 <MX_GPIO_Init+0x154>)
 80003d6:	f000 fc45 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LaneY_B_Pin LaneY_A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LaneY_B_Pin|LaneY_A_Pin;
 80003da:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	481d      	ldr	r0, [pc, #116]	@ (8000468 <MX_GPIO_Init+0x154>)
 80003f4:	f000 fc36 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin;
 80003f8:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000402:	2301      	movs	r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	4619      	mov	r1, r3
 800040c:	4818      	ldr	r0, [pc, #96]	@ (8000470 <MX_GPIO_Init+0x15c>)
 800040e:	f000 fc29 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LaneX_B_Pin */
  GPIO_InitStruct.Pin = LaneX_B_Pin;
 8000412:	2380      	movs	r3, #128	@ 0x80
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LaneX_B_GPIO_Port, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	4810      	ldr	r0, [pc, #64]	@ (800046c <MX_GPIO_Init+0x158>)
 800042a:	f000 fc1b 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LaneX_A_Pin */
  GPIO_InitStruct.Pin = LaneX_A_Pin;
 800042e:	2340      	movs	r3, #64	@ 0x40
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2302      	movs	r3, #2
 800043c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LaneX_A_GPIO_Port, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	480a      	ldr	r0, [pc, #40]	@ (8000470 <MX_GPIO_Init+0x15c>)
 8000446:	f000 fc0d 	bl	8000c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2028      	movs	r0, #40	@ 0x28
 8000450:	f000 fb4b 	bl	8000aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000454:	2028      	movs	r0, #40	@ 0x28
 8000456:	f000 fb64 	bl	8000b22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40010800 	.word	0x40010800
 800046c:	40011000 	.word	0x40011000
 8000470:	40010c00 	.word	0x40010c00
 8000474:	10110000 	.word	0x10110000

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a14      	ldr	r2, [pc, #80]	@ (80004e0 <HAL_MspInit+0x5c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <HAL_MspInit+0x60>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <HAL_MspInit+0x60>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	@ 0x28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a25      	ldr	r2, [pc, #148]	@ (8000598 <HAL_I2C_MspInit+0xb0>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d142      	bne.n	800058e <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000508:	4b24      	ldr	r3, [pc, #144]	@ (800059c <HAL_I2C_MspInit+0xb4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a23      	ldr	r2, [pc, #140]	@ (800059c <HAL_I2C_MspInit+0xb4>)
 800050e:	f043 0308 	orr.w	r3, r3, #8
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b21      	ldr	r3, [pc, #132]	@ (800059c <HAL_I2C_MspInit+0xb4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0308 	and.w	r3, r3, #8
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000520:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000526:	2312      	movs	r3, #18
 8000528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052a:	2303      	movs	r3, #3
 800052c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	481a      	ldr	r0, [pc, #104]	@ (80005a0 <HAL_I2C_MspInit+0xb8>)
 8000536:	f000 fb95 	bl	8000c64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <HAL_I2C_MspInit+0xbc>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000542:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000546:	627b      	str	r3, [r7, #36]	@ 0x24
 8000548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800054a:	f043 0302 	orr.w	r3, r3, #2
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000550:	4a14      	ldr	r2, [pc, #80]	@ (80005a4 <HAL_I2C_MspInit+0xbc>)
 8000552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000554:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000556:	4b11      	ldr	r3, [pc, #68]	@ (800059c <HAL_I2C_MspInit+0xb4>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a10      	ldr	r2, [pc, #64]	@ (800059c <HAL_I2C_MspInit+0xb4>)
 800055c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <HAL_I2C_MspInit+0xb4>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	201f      	movs	r0, #31
 8000574:	f000 fab9 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000578:	201f      	movs	r0, #31
 800057a:	f000 fad2 	bl	8000b22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2020      	movs	r0, #32
 8000584:	f000 fab1 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000588:	2020      	movs	r0, #32
 800058a:	f000 faca 	bl	8000b22 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	@ 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40005400 	.word	0x40005400
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010c00 	.word	0x40010c00
 80005a4:	40010000 	.word	0x40010000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <NMI_Handler+0x4>

080005b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <HardFault_Handler+0x4>

080005b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <MemManage_Handler+0x4>

080005c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <UsageFault_Handler+0x4>

080005d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005f8:	f000 f960 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000604:	4802      	ldr	r0, [pc, #8]	@ (8000610 <I2C1_EV_IRQHandler+0x10>)
 8000606:	f000 ff41 	bl	800148c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000002c 	.word	0x2000002c

08000614 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000618:	4802      	ldr	r0, [pc, #8]	@ (8000624 <I2C1_ER_IRQHandler+0x10>)
 800061a:	f001 f88a 	bl	8001732 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000002c 	.word	0x2000002c

08000628 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800062c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000630:	f000 fcb4 	bl	8000f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <turnLed>:
#include "trafficLight.h"

// Turn led on lane
// color: Red, Green, Yellow
// lane: X, Y
void turnLed(uint8_t lane, uint8_t color){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	switch(lane){
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <turnLed+0x1c>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d02d      	beq.n	80006ba <turnLed+0x76>
		default:
			break;
		}
		break;
	default:
		break;
 800065e:	e05f      	b.n	8000720 <turnLed+0xdc>
		switch(color){
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d01c      	beq.n	80006a0 <turnLed+0x5c>
 8000666:	2b02      	cmp	r3, #2
 8000668:	dc25      	bgt.n	80006b6 <turnLed+0x72>
 800066a:	2b00      	cmp	r3, #0
 800066c:	d002      	beq.n	8000674 <turnLed+0x30>
 800066e:	2b01      	cmp	r3, #1
 8000670:	d00b      	beq.n	800068a <turnLed+0x46>
			break;
 8000672:	e020      	b.n	80006b6 <turnLed+0x72>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	2140      	movs	r1, #64	@ 0x40
 8000678:	482b      	ldr	r0, [pc, #172]	@ (8000728 <turnLed+0xe4>)
 800067a:	f000 fc77 	bl	8000f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	2180      	movs	r1, #128	@ 0x80
 8000682:	482a      	ldr	r0, [pc, #168]	@ (800072c <turnLed+0xe8>)
 8000684:	f000 fc72 	bl	8000f6c <HAL_GPIO_WritePin>
			break;
 8000688:	e016      	b.n	80006b8 <turnLed+0x74>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	@ 0x40
 800068e:	4826      	ldr	r0, [pc, #152]	@ (8000728 <turnLed+0xe4>)
 8000690:	f000 fc6c 	bl	8000f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	4824      	ldr	r0, [pc, #144]	@ (800072c <turnLed+0xe8>)
 800069a:	f000 fc67 	bl	8000f6c <HAL_GPIO_WritePin>
			break;
 800069e:	e00b      	b.n	80006b8 <turnLed+0x74>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2140      	movs	r1, #64	@ 0x40
 80006a4:	4820      	ldr	r0, [pc, #128]	@ (8000728 <turnLed+0xe4>)
 80006a6:	f000 fc61 	bl	8000f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481f      	ldr	r0, [pc, #124]	@ (800072c <turnLed+0xe8>)
 80006b0:	f000 fc5c 	bl	8000f6c <HAL_GPIO_WritePin>
			break;
 80006b4:	e000      	b.n	80006b8 <turnLed+0x74>
			break;
 80006b6:	bf00      	nop
		break;
 80006b8:	e032      	b.n	8000720 <turnLed+0xdc>
		switch(color){
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d020      	beq.n	8000702 <turnLed+0xbe>
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	dc2b      	bgt.n	800071c <turnLed+0xd8>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <turnLed+0x8a>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d00d      	beq.n	80006e8 <turnLed+0xa4>
			break;
 80006cc:	e026      	b.n	800071c <turnLed+0xd8>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d4:	4816      	ldr	r0, [pc, #88]	@ (8000730 <turnLed+0xec>)
 80006d6:	f000 fc49 	bl	8000f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e0:	4813      	ldr	r0, [pc, #76]	@ (8000730 <turnLed+0xec>)
 80006e2:	f000 fc43 	bl	8000f6c <HAL_GPIO_WritePin>
			break;
 80006e6:	e01a      	b.n	800071e <turnLed+0xda>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ee:	4810      	ldr	r0, [pc, #64]	@ (8000730 <turnLed+0xec>)
 80006f0:	f000 fc3c 	bl	8000f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <turnLed+0xec>)
 80006fc:	f000 fc36 	bl	8000f6c <HAL_GPIO_WritePin>
			break;
 8000700:	e00d      	b.n	800071e <turnLed+0xda>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000708:	4809      	ldr	r0, [pc, #36]	@ (8000730 <turnLed+0xec>)
 800070a:	f000 fc2f 	bl	8000f6c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000714:	4806      	ldr	r0, [pc, #24]	@ (8000730 <turnLed+0xec>)
 8000716:	f000 fc29 	bl	8000f6c <HAL_GPIO_WritePin>
			break;
 800071a:	e000      	b.n	800071e <turnLed+0xda>
			break;
 800071c:	bf00      	nop
		break;
 800071e:	bf00      	nop
	}
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40010c00 	.word	0x40010c00
 800072c:	40011000 	.word	0x40011000
 8000730:	40010800 	.word	0x40010800

08000734 <blinkLed>:

// Pre-process for blinking led[color]
// color: Red, Green, Yellow
// Note: call this function ahead of toggleTrafficLights function
// 		for only the first time of blinking mode for each led
void blinkLed(uint8_t color){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	if(toggle == 1){
 800073e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <blinkLed+0x78>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d129      	bne.n	800079a <blinkLed+0x66>
		switch(color){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d018      	beq.n	800077e <blinkLed+0x4a>
 800074c:	2b02      	cmp	r3, #2
 800074e:	dc1f      	bgt.n	8000790 <blinkLed+0x5c>
 8000750:	2b00      	cmp	r3, #0
 8000752:	d002      	beq.n	800075a <blinkLed+0x26>
 8000754:	2b01      	cmp	r3, #1
 8000756:	d009      	beq.n	800076c <blinkLed+0x38>
		case Yellow:
			turnLed(X, Yellow);
			turnLed(Y, Yellow);
			break;
		default:
			break;
 8000758:	e01a      	b.n	8000790 <blinkLed+0x5c>
			turnLed(X, Red);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff71 	bl	8000644 <turnLed>
			turnLed(Y, Red);
 8000762:	2100      	movs	r1, #0
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff ff6d 	bl	8000644 <turnLed>
			break;
 800076a:	e012      	b.n	8000792 <blinkLed+0x5e>
			turnLed(X, Green);
 800076c:	2101      	movs	r1, #1
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ff68 	bl	8000644 <turnLed>
			turnLed(Y, Green);
 8000774:	2101      	movs	r1, #1
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ff64 	bl	8000644 <turnLed>
			break;
 800077c:	e009      	b.n	8000792 <blinkLed+0x5e>
			turnLed(X, Yellow);
 800077e:	2102      	movs	r1, #2
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff ff5f 	bl	8000644 <turnLed>
			turnLed(Y, Yellow);
 8000786:	2102      	movs	r1, #2
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff ff5b 	bl	8000644 <turnLed>
			break;
 800078e:	e000      	b.n	8000792 <blinkLed+0x5e>
			break;
 8000790:	bf00      	nop
		}
		toggle = 0;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <blinkLed+0x78>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
	}else{
		clearAllLeds();
		toggle = 1;
	}
}
 8000798:	e004      	b.n	80007a4 <blinkLed+0x70>
		clearAllLeds();
 800079a:	f000 f809 	bl	80007b0 <clearAllLeds>
		toggle = 1;
 800079e:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <blinkLed+0x78>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000004 	.word	0x20000004

080007b0 <clearAllLeds>:
	HAL_GPIO_TogglePin(GPIOB, LaneX_A_Pin);
	HAL_GPIO_TogglePin(GPIOC, LaneX_B_Pin);
}

// Turn off all traffic leds
void clearAllLeds(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin | LaneY_B_Pin, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80007ba:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <clearAllLeds+0x28>)
 80007bc:	f000 fbd6 	bl	8000f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2140      	movs	r1, #64	@ 0x40
 80007c4:	4805      	ldr	r0, [pc, #20]	@ (80007dc <clearAllLeds+0x2c>)
 80007c6:	f000 fbd1 	bl	8000f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2180      	movs	r1, #128	@ 0x80
 80007ce:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <clearAllLeds+0x30>)
 80007d0:	f000 fbcc 	bl	8000f6c <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40010800 	.word	0x40010800
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	40011000 	.word	0x40011000

080007e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e4:	f7ff ff28 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480b      	ldr	r0, [pc, #44]	@ (8000818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ea:	490c      	ldr	r1, [pc, #48]	@ (800081c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000800:	4c09      	ldr	r4, [pc, #36]	@ (8000828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f003 f96d 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fcf9 	bl	8000208 <main>
  bx lr
 8000816:	4770      	bx	lr
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000820:	08003b80 	.word	0x08003b80
  ldr r2, =_sbss
 8000824:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000828:	20000084 	.word	0x20000084

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f947 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff fe1a 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f95f 	bl	8000b3e <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 f927 	bl	8000aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	2000000c 	.word	0x2000000c
 80008b8:	20000008 	.word	0x20000008

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a03      	ldr	r2, [pc, #12]	@ (80008dc <HAL_IncTick+0x20>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	2000000c 	.word	0x2000000c
 80008dc:	20000080 	.word	0x20000080

080008e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	@ (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000080 	.word	0x20000080

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff fff0 	bl	80008e0 <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800091a:	bf00      	nop
 800091c:	f7ff ffe0 	bl	80008e0 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000000c 	.word	0x2000000c

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4906      	ldr	r1, [pc, #24]	@ (80009d4 <__NVIC_EnableIRQ+0x34>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	@ (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	@ (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	@ 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	@ 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff90 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff2d 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff42 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff90 	bl	8000a2c <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff35 	bl	80009a0 <__NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ffa2 	bl	8000a90 <SysTick_Config>
 8000b4c:	4603      	mov	r3, r0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d005      	beq.n	8000b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2204      	movs	r2, #4
 8000b74:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e051      	b.n	8000c20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 020e 	bic.w	r2, r2, #14
 8000b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 0201 	bic.w	r2, r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a22      	ldr	r2, [pc, #136]	@ (8000c2c <HAL_DMA_Abort_IT+0xd4>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d029      	beq.n	8000bfa <HAL_DMA_Abort_IT+0xa2>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a21      	ldr	r2, [pc, #132]	@ (8000c30 <HAL_DMA_Abort_IT+0xd8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d022      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0x9e>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c34 <HAL_DMA_Abort_IT+0xdc>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d01a      	beq.n	8000bf0 <HAL_DMA_Abort_IT+0x98>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c38 <HAL_DMA_Abort_IT+0xe0>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d012      	beq.n	8000bea <HAL_DMA_Abort_IT+0x92>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <HAL_DMA_Abort_IT+0xe4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d00a      	beq.n	8000be4 <HAL_DMA_Abort_IT+0x8c>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <HAL_DMA_Abort_IT+0xe8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d102      	bne.n	8000bde <HAL_DMA_Abort_IT+0x86>
 8000bd8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000bdc:	e00e      	b.n	8000bfc <HAL_DMA_Abort_IT+0xa4>
 8000bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000be2:	e00b      	b.n	8000bfc <HAL_DMA_Abort_IT+0xa4>
 8000be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be8:	e008      	b.n	8000bfc <HAL_DMA_Abort_IT+0xa4>
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	e005      	b.n	8000bfc <HAL_DMA_Abort_IT+0xa4>
 8000bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf4:	e002      	b.n	8000bfc <HAL_DMA_Abort_IT+0xa4>
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	e000      	b.n	8000bfc <HAL_DMA_Abort_IT+0xa4>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4a11      	ldr	r2, [pc, #68]	@ (8000c44 <HAL_DMA_Abort_IT+0xec>)
 8000bfe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	4798      	blx	r3
    } 
  }
  return status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40020008 	.word	0x40020008
 8000c30:	4002001c 	.word	0x4002001c
 8000c34:	40020030 	.word	0x40020030
 8000c38:	40020044 	.word	0x40020044
 8000c3c:	40020058 	.word	0x40020058
 8000c40:	4002006c 	.word	0x4002006c
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c56:	b2db      	uxtb	r3, r3
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b08b      	sub	sp, #44	@ 0x2c
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c76:	e169      	b.n	8000f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 8158 	bne.w	8000f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4a9a      	ldr	r2, [pc, #616]	@ (8000f04 <HAL_GPIO_Init+0x2a0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d05e      	beq.n	8000d5e <HAL_GPIO_Init+0xfa>
 8000ca0:	4a98      	ldr	r2, [pc, #608]	@ (8000f04 <HAL_GPIO_Init+0x2a0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d875      	bhi.n	8000d92 <HAL_GPIO_Init+0x12e>
 8000ca6:	4a98      	ldr	r2, [pc, #608]	@ (8000f08 <HAL_GPIO_Init+0x2a4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d058      	beq.n	8000d5e <HAL_GPIO_Init+0xfa>
 8000cac:	4a96      	ldr	r2, [pc, #600]	@ (8000f08 <HAL_GPIO_Init+0x2a4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d86f      	bhi.n	8000d92 <HAL_GPIO_Init+0x12e>
 8000cb2:	4a96      	ldr	r2, [pc, #600]	@ (8000f0c <HAL_GPIO_Init+0x2a8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d052      	beq.n	8000d5e <HAL_GPIO_Init+0xfa>
 8000cb8:	4a94      	ldr	r2, [pc, #592]	@ (8000f0c <HAL_GPIO_Init+0x2a8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d869      	bhi.n	8000d92 <HAL_GPIO_Init+0x12e>
 8000cbe:	4a94      	ldr	r2, [pc, #592]	@ (8000f10 <HAL_GPIO_Init+0x2ac>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d04c      	beq.n	8000d5e <HAL_GPIO_Init+0xfa>
 8000cc4:	4a92      	ldr	r2, [pc, #584]	@ (8000f10 <HAL_GPIO_Init+0x2ac>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d863      	bhi.n	8000d92 <HAL_GPIO_Init+0x12e>
 8000cca:	4a92      	ldr	r2, [pc, #584]	@ (8000f14 <HAL_GPIO_Init+0x2b0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d046      	beq.n	8000d5e <HAL_GPIO_Init+0xfa>
 8000cd0:	4a90      	ldr	r2, [pc, #576]	@ (8000f14 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d85d      	bhi.n	8000d92 <HAL_GPIO_Init+0x12e>
 8000cd6:	2b12      	cmp	r3, #18
 8000cd8:	d82a      	bhi.n	8000d30 <HAL_GPIO_Init+0xcc>
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d859      	bhi.n	8000d92 <HAL_GPIO_Init+0x12e>
 8000cde:	a201      	add	r2, pc, #4	@ (adr r2, 8000ce4 <HAL_GPIO_Init+0x80>)
 8000ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce4:	08000d5f 	.word	0x08000d5f
 8000ce8:	08000d39 	.word	0x08000d39
 8000cec:	08000d4b 	.word	0x08000d4b
 8000cf0:	08000d8d 	.word	0x08000d8d
 8000cf4:	08000d93 	.word	0x08000d93
 8000cf8:	08000d93 	.word	0x08000d93
 8000cfc:	08000d93 	.word	0x08000d93
 8000d00:	08000d93 	.word	0x08000d93
 8000d04:	08000d93 	.word	0x08000d93
 8000d08:	08000d93 	.word	0x08000d93
 8000d0c:	08000d93 	.word	0x08000d93
 8000d10:	08000d93 	.word	0x08000d93
 8000d14:	08000d93 	.word	0x08000d93
 8000d18:	08000d93 	.word	0x08000d93
 8000d1c:	08000d93 	.word	0x08000d93
 8000d20:	08000d93 	.word	0x08000d93
 8000d24:	08000d93 	.word	0x08000d93
 8000d28:	08000d41 	.word	0x08000d41
 8000d2c:	08000d55 	.word	0x08000d55
 8000d30:	4a79      	ldr	r2, [pc, #484]	@ (8000f18 <HAL_GPIO_Init+0x2b4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d013      	beq.n	8000d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d36:	e02c      	b.n	8000d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	623b      	str	r3, [r7, #32]
          break;
 8000d3e:	e029      	b.n	8000d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	3304      	adds	r3, #4
 8000d46:	623b      	str	r3, [r7, #32]
          break;
 8000d48:	e024      	b.n	8000d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	3308      	adds	r3, #8
 8000d50:	623b      	str	r3, [r7, #32]
          break;
 8000d52:	e01f      	b.n	8000d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	330c      	adds	r3, #12
 8000d5a:	623b      	str	r3, [r7, #32]
          break;
 8000d5c:	e01a      	b.n	8000d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d102      	bne.n	8000d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d66:	2304      	movs	r3, #4
 8000d68:	623b      	str	r3, [r7, #32]
          break;
 8000d6a:	e013      	b.n	8000d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d105      	bne.n	8000d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d74:	2308      	movs	r3, #8
 8000d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	611a      	str	r2, [r3, #16]
          break;
 8000d7e:	e009      	b.n	8000d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d80:	2308      	movs	r3, #8
 8000d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	615a      	str	r2, [r3, #20]
          break;
 8000d8a:	e003      	b.n	8000d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
          break;
 8000d90:	e000      	b.n	8000d94 <HAL_GPIO_Init+0x130>
          break;
 8000d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	2bff      	cmp	r3, #255	@ 0xff
 8000d98:	d801      	bhi.n	8000d9e <HAL_GPIO_Init+0x13a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	e001      	b.n	8000da2 <HAL_GPIO_Init+0x13e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3304      	adds	r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	2bff      	cmp	r3, #255	@ 0xff
 8000da8:	d802      	bhi.n	8000db0 <HAL_GPIO_Init+0x14c>
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	e002      	b.n	8000db6 <HAL_GPIO_Init+0x152>
 8000db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db2:	3b08      	subs	r3, #8
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	6a39      	ldr	r1, [r7, #32]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f000 80b1 	beq.w	8000f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000de4:	4b4d      	ldr	r3, [pc, #308]	@ (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b4a      	ldr	r3, [pc, #296]	@ (8000f1c <HAL_GPIO_Init+0x2b8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dfc:	4a48      	ldr	r2, [pc, #288]	@ (8000f20 <HAL_GPIO_Init+0x2bc>)
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e00:	089b      	lsrs	r3, r3, #2
 8000e02:	3302      	adds	r3, #2
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a40      	ldr	r2, [pc, #256]	@ (8000f24 <HAL_GPIO_Init+0x2c0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d013      	beq.n	8000e50 <HAL_GPIO_Init+0x1ec>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f28 <HAL_GPIO_Init+0x2c4>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d00d      	beq.n	8000e4c <HAL_GPIO_Init+0x1e8>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a3e      	ldr	r2, [pc, #248]	@ (8000f2c <HAL_GPIO_Init+0x2c8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d007      	beq.n	8000e48 <HAL_GPIO_Init+0x1e4>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f30 <HAL_GPIO_Init+0x2cc>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d101      	bne.n	8000e44 <HAL_GPIO_Init+0x1e0>
 8000e40:	2303      	movs	r3, #3
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x1ee>
 8000e44:	2304      	movs	r3, #4
 8000e46:	e004      	b.n	8000e52 <HAL_GPIO_Init+0x1ee>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x1ee>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <HAL_GPIO_Init+0x1ee>
 8000e50:	2300      	movs	r3, #0
 8000e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e54:	f002 0203 	and.w	r2, r2, #3
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	4093      	lsls	r3, r2
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e62:	492f      	ldr	r1, [pc, #188]	@ (8000f20 <HAL_GPIO_Init+0x2bc>)
 8000e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	492c      	ldr	r1, [pc, #176]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4928      	ldr	r1, [pc, #160]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea4:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	4922      	ldr	r1, [pc, #136]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60cb      	str	r3, [r1, #12]
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb2:	4b20      	ldr	r3, [pc, #128]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	491e      	ldr	r1, [pc, #120]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ecc:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4918      	ldr	r1, [pc, #96]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4914      	ldr	r1, [pc, #80]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d021      	beq.n	8000f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	490e      	ldr	r1, [pc, #56]	@ (8000f34 <HAL_GPIO_Init+0x2d0>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	600b      	str	r3, [r1, #0]
 8000f00:	e021      	b.n	8000f46 <HAL_GPIO_Init+0x2e2>
 8000f02:	bf00      	nop
 8000f04:	10320000 	.word	0x10320000
 8000f08:	10310000 	.word	0x10310000
 8000f0c:	10220000 	.word	0x10220000
 8000f10:	10210000 	.word	0x10210000
 8000f14:	10120000 	.word	0x10120000
 8000f18:	10110000 	.word	0x10110000
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	40011400 	.word	0x40011400
 8000f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <HAL_GPIO_Init+0x304>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4909      	ldr	r1, [pc, #36]	@ (8000f68 <HAL_GPIO_Init+0x304>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f48:	3301      	adds	r3, #1
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	fa22 f303 	lsr.w	r3, r2, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f47f ae8e 	bne.w	8000c78 <HAL_GPIO_Init+0x14>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	372c      	adds	r7, #44	@ 0x2c
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f88:	e003      	b.n	8000f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	611a      	str	r2, [r3, #16]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f806 	bl	8000fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40010400 	.word	0x40010400

08000fcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e12b      	b.n	800124a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fa6e 	bl	80004e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2224      	movs	r2, #36	@ 0x24
 8001010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001044:	f002 fd18 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 8001048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a81      	ldr	r2, [pc, #516]	@ (8001254 <HAL_I2C_Init+0x274>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d807      	bhi.n	8001064 <HAL_I2C_Init+0x84>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a80      	ldr	r2, [pc, #512]	@ (8001258 <HAL_I2C_Init+0x278>)
 8001058:	4293      	cmp	r3, r2
 800105a:	bf94      	ite	ls
 800105c:	2301      	movls	r3, #1
 800105e:	2300      	movhi	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	e006      	b.n	8001072 <HAL_I2C_Init+0x92>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4a7d      	ldr	r2, [pc, #500]	@ (800125c <HAL_I2C_Init+0x27c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	bf94      	ite	ls
 800106c:	2301      	movls	r3, #1
 800106e:	2300      	movhi	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0e7      	b.n	800124a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4a78      	ldr	r2, [pc, #480]	@ (8001260 <HAL_I2C_Init+0x280>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	430a      	orrs	r2, r1
 8001098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001254 <HAL_I2C_Init+0x274>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d802      	bhi.n	80010b4 <HAL_I2C_Init+0xd4>
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3301      	adds	r3, #1
 80010b2:	e009      	b.n	80010c8 <HAL_I2C_Init+0xe8>
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010ba:	fb02 f303 	mul.w	r3, r2, r3
 80010be:	4a69      	ldr	r2, [pc, #420]	@ (8001264 <HAL_I2C_Init+0x284>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	099b      	lsrs	r3, r3, #6
 80010c6:	3301      	adds	r3, #1
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80010da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	495c      	ldr	r1, [pc, #368]	@ (8001254 <HAL_I2C_Init+0x274>)
 80010e4:	428b      	cmp	r3, r1
 80010e6:	d819      	bhi.n	800111c <HAL_I2C_Init+0x13c>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	1e59      	subs	r1, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f6:	1c59      	adds	r1, r3, #1
 80010f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80010fc:	400b      	ands	r3, r1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00a      	beq.n	8001118 <HAL_I2C_Init+0x138>
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1e59      	subs	r1, r3, #1
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001110:	3301      	adds	r3, #1
 8001112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001116:	e051      	b.n	80011bc <HAL_I2C_Init+0x1dc>
 8001118:	2304      	movs	r3, #4
 800111a:	e04f      	b.n	80011bc <HAL_I2C_Init+0x1dc>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d111      	bne.n	8001148 <HAL_I2C_Init+0x168>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	1e58      	subs	r0, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	440b      	add	r3, r1
 8001132:	fbb0 f3f3 	udiv	r3, r0, r3
 8001136:	3301      	adds	r3, #1
 8001138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf0c      	ite	eq
 8001140:	2301      	moveq	r3, #1
 8001142:	2300      	movne	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	e012      	b.n	800116e <HAL_I2C_Init+0x18e>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	1e58      	subs	r0, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6859      	ldr	r1, [r3, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	0099      	lsls	r1, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	fbb0 f3f3 	udiv	r3, r0, r3
 800115e:	3301      	adds	r3, #1
 8001160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_I2C_Init+0x196>
 8001172:	2301      	movs	r3, #1
 8001174:	e022      	b.n	80011bc <HAL_I2C_Init+0x1dc>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10e      	bne.n	800119c <HAL_I2C_Init+0x1bc>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1e58      	subs	r0, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6859      	ldr	r1, [r3, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	440b      	add	r3, r1
 800118c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001190:	3301      	adds	r3, #1
 8001192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800119a:	e00f      	b.n	80011bc <HAL_I2C_Init+0x1dc>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1e58      	subs	r0, r3, #1
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6859      	ldr	r1, [r3, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	0099      	lsls	r1, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b2:	3301      	adds	r3, #1
 80011b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	6809      	ldr	r1, [r1, #0]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69da      	ldr	r2, [r3, #28]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80011ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6911      	ldr	r1, [r2, #16]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68d2      	ldr	r2, [r2, #12]
 80011f6:	4311      	orrs	r1, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	430b      	orrs	r3, r1
 80011fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2220      	movs	r2, #32
 8001236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	000186a0 	.word	0x000186a0
 8001258:	001e847f 	.word	0x001e847f
 800125c:	003d08ff 	.word	0x003d08ff
 8001260:	431bde83 	.word	0x431bde83
 8001264:	10624dd3 	.word	0x10624dd3

08001268 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800127a:	2b80      	cmp	r3, #128	@ 0x80
 800127c:	d103      	bne.n	8001286 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	461a      	mov	r2, r3
 800129c:	460b      	mov	r3, r1
 800129e:	817b      	strh	r3, [r7, #10]
 80012a0:	4613      	mov	r3, r2
 80012a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff fb1c 	bl	80008e0 <HAL_GetTick>
 80012a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b20      	cmp	r3, #32
 80012b4:	f040 80e0 	bne.w	8001478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2319      	movs	r3, #25
 80012be:	2201      	movs	r2, #1
 80012c0:	4970      	ldr	r1, [pc, #448]	@ (8001484 <HAL_I2C_Master_Transmit+0x1f4>)
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f001 fdea 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80012ce:	2302      	movs	r3, #2
 80012d0:	e0d3      	b.n	800147a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_I2C_Master_Transmit+0x50>
 80012dc:	2302      	movs	r3, #2
 80012de:	e0cc      	b.n	800147a <HAL_I2C_Master_Transmit+0x1ea>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d007      	beq.n	8001306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 0201 	orr.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2221      	movs	r2, #33	@ 0x21
 800131a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2210      	movs	r2, #16
 8001322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	893a      	ldrh	r2, [r7, #8]
 8001336:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_I2C_Master_Transmit+0x1f8>)
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001348:	8979      	ldrh	r1, [r7, #10]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	6a3a      	ldr	r2, [r7, #32]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f001 fc7a 	bl	8002c48 <I2C_MasterRequestWrite>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e08d      	b.n	800147a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001374:	e066      	b.n	8001444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	6a39      	ldr	r1, [r7, #32]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f001 fea8 	bl	80030d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00d      	beq.n	80013a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	2b04      	cmp	r3, #4
 800138c:	d107      	bne.n	800139e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800139c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e06b      	b.n	800147a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3b01      	subs	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d11b      	bne.n	8001418 <HAL_I2C_Master_Transmit+0x188>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d017      	beq.n	8001418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001402:	b29b      	uxth	r3, r3
 8001404:	3b01      	subs	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	6a39      	ldr	r1, [r7, #32]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f001 fe9f 	bl	8003160 <I2C_WaitOnBTFFlagUntilTimeout>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00d      	beq.n	8001444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	2b04      	cmp	r3, #4
 800142e:	d107      	bne.n	8001440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800143e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e01a      	b.n	800147a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001448:	2b00      	cmp	r3, #0
 800144a:	d194      	bne.n	8001376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800145a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2220      	movs	r2, #32
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	e000      	b.n	800147a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001478:	2302      	movs	r3, #2
  }
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	00100002 	.word	0x00100002
 8001488:	ffff0000 	.word	0xffff0000

0800148c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80014ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b10      	cmp	r3, #16
 80014ba:	d003      	beq.n	80014c4 <HAL_I2C_EV_IRQHandler+0x38>
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b40      	cmp	r3, #64	@ 0x40
 80014c0:	f040 80b1 	bne.w	8001626 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <HAL_I2C_EV_IRQHandler+0x6e>
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80014e4:	d003      	beq.n	80014ee <HAL_I2C_EV_IRQHandler+0x62>
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80014ec:	d101      	bne.n	80014f2 <HAL_I2C_EV_IRQHandler+0x66>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_I2C_EV_IRQHandler+0x68>
 80014f2:	2300      	movs	r3, #0
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	f000 8114 	beq.w	8001722 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00b      	beq.n	800151c <HAL_I2C_EV_IRQHandler+0x90>
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f001 fece 	bl	80032b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fd74 	bl	8002002 <I2C_Master_SB>
 800151a:	e083      	b.n	8001624 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <HAL_I2C_EV_IRQHandler+0xac>
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 fdeb 	bl	800210c <I2C_Master_ADD10>
 8001536:	e075      	b.n	8001624 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <HAL_I2C_EV_IRQHandler+0xc8>
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fe06 	bl	800215e <I2C_Master_ADDR>
 8001552:	e067      	b.n	8001624 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	d036      	beq.n	80015cc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800156c:	f000 80db 	beq.w	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00d      	beq.n	8001596 <HAL_I2C_EV_IRQHandler+0x10a>
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_I2C_EV_IRQHandler+0x10a>
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f9d4 	bl	800193c <I2C_MasterTransmit_TXE>
 8001594:	e046      	b.n	8001624 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80c2 	beq.w	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80bc 	beq.w	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	2b21      	cmp	r3, #33	@ 0x21
 80015b2:	d103      	bne.n	80015bc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 fa5d 	bl	8001a74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015ba:	e0b4      	b.n	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b40      	cmp	r3, #64	@ 0x40
 80015c0:	f040 80b1 	bne.w	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 facb 	bl	8001b60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015ca:	e0ac      	b.n	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015da:	f000 80a4 	beq.w	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00d      	beq.n	8001604 <HAL_I2C_EV_IRQHandler+0x178>
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d008      	beq.n	8001604 <HAL_I2C_EV_IRQHandler+0x178>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fb47 	bl	8001c90 <I2C_MasterReceive_RXNE>
 8001602:	e00f      	b.n	8001624 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 808b 	beq.w	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 8085 	beq.w	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fbff 	bl	8001e20 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001622:	e080      	b.n	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
 8001624:	e07f      	b.n	8001726 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e007      	b.n	8001648 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d011      	beq.n	8001676 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00c      	beq.n	8001676 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800166c:	69b9      	ldr	r1, [r7, #24]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 ffcc 	bl	800260c <I2C_Slave_ADDR>
 8001674:	e05a      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_I2C_EV_IRQHandler+0x206>
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f001 f806 	bl	800269c <I2C_Slave_STOPF>
 8001690:	e04c      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	2b21      	cmp	r3, #33	@ 0x21
 8001696:	d002      	beq.n	800169e <HAL_I2C_EV_IRQHandler+0x212>
 8001698:	7bbb      	ldrb	r3, [r7, #14]
 800169a:	2b29      	cmp	r3, #41	@ 0x29
 800169c:	d120      	bne.n	80016e0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00d      	beq.n	80016c4 <HAL_I2C_EV_IRQHandler+0x238>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <HAL_I2C_EV_IRQHandler+0x238>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d103      	bne.n	80016c4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fee9 	bl	8002494 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016c2:	e032      	b.n	800172a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d02d      	beq.n	800172a <HAL_I2C_EV_IRQHandler+0x29e>
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d028      	beq.n	800172a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 ff18 	bl	800250e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016de:	e024      	b.n	800172a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00d      	beq.n	8001706 <HAL_I2C_EV_IRQHandler+0x27a>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_I2C_EV_IRQHandler+0x27a>
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 ff25 	bl	800254e <I2C_SlaveReceive_RXNE>
 8001704:	e012      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00d      	beq.n	800172c <HAL_I2C_EV_IRQHandler+0x2a0>
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001716:	2b00      	cmp	r3, #0
 8001718:	d008      	beq.n	800172c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 ff55 	bl	80025ca <I2C_SlaveReceive_BTF>
 8001720:	e004      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001722:	bf00      	nop
 8001724:	e002      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001726:	bf00      	nop
 8001728:	e000      	b.n	800172c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800172a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b08a      	sub	sp, #40	@ 0x28
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001754:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d015      	beq.n	800178c <HAL_I2C_ER_IRQHandler+0x5a>
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800177a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00d      	beq.n	80017b2 <HAL_I2C_ER_IRQHandler+0x80>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80017b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d03e      	beq.n	800183a <HAL_I2C_ER_IRQHandler+0x108>
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d039      	beq.n	800183a <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80017c6:	7efb      	ldrb	r3, [r7, #27]
 80017c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80017e0:	7ebb      	ldrb	r3, [r7, #26]
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d112      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xda>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10f      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xda>
 80017ec:	7cfb      	ldrb	r3, [r7, #19]
 80017ee:	2b21      	cmp	r3, #33	@ 0x21
 80017f0:	d008      	beq.n	8001804 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80017f2:	7cfb      	ldrb	r3, [r7, #19]
 80017f4:	2b29      	cmp	r3, #41	@ 0x29
 80017f6:	d005      	beq.n	8001804 <HAL_I2C_ER_IRQHandler+0xd2>
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	2b28      	cmp	r3, #40	@ 0x28
 80017fc:	d106      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b21      	cmp	r3, #33	@ 0x21
 8001802:	d103      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 f879 	bl	80028fc <I2C_Slave_AF>
 800180a:	e016      	b.n	800183a <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001814:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800181e:	7efb      	ldrb	r3, [r7, #27]
 8001820:	2b10      	cmp	r3, #16
 8001822:	d002      	beq.n	800182a <HAL_I2C_ER_IRQHandler+0xf8>
 8001824:	7efb      	ldrb	r3, [r7, #27]
 8001826:	2b40      	cmp	r3, #64	@ 0x40
 8001828:	d107      	bne.n	800183a <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001838:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00d      	beq.n	8001860 <HAL_I2C_ER_IRQHandler+0x12e>
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800185e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f001 f8b6 	bl	80029e4 <I2C_ITError>
  }
}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	@ 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
 80018d4:	4613      	mov	r3, r2
 80018d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800194a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001952:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195e:	2b00      	cmp	r3, #0
 8001960:	d150      	bne.n	8001a04 <I2C_MasterTransmit_TXE+0xc8>
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b21      	cmp	r3, #33	@ 0x21
 8001966:	d14d      	bne.n	8001a04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b08      	cmp	r3, #8
 800196c:	d01d      	beq.n	80019aa <I2C_MasterTransmit_TXE+0x6e>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b20      	cmp	r3, #32
 8001972:	d01a      	beq.n	80019aa <I2C_MasterTransmit_TXE+0x6e>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800197a:	d016      	beq.n	80019aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800198a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2211      	movs	r2, #17
 8001990:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff6c 	bl	8001880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019a8:	e060      	b.n	8001a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b40      	cmp	r3, #64	@ 0x40
 80019e2:	d107      	bne.n	80019f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff81 	bl	80018f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019f2:	e03b      	b.n	8001a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff3f 	bl	8001880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a02:	e033      	b.n	8001a6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b21      	cmp	r3, #33	@ 0x21
 8001a08:	d005      	beq.n	8001a16 <I2C_MasterTransmit_TXE+0xda>
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	2b40      	cmp	r3, #64	@ 0x40
 8001a0e:	d12d      	bne.n	8001a6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b22      	cmp	r3, #34	@ 0x22
 8001a14:	d12a      	bne.n	8001a6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d108      	bne.n	8001a32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001a30:	e01c      	b.n	8001a6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b40      	cmp	r3, #64	@ 0x40
 8001a3c:	d103      	bne.n	8001a46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f88e 	bl	8001b60 <I2C_MemoryTransmit_TXE_BTF>
}
 8001a44:	e012      	b.n	8001a6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001a6a:	e7ff      	b.n	8001a6c <I2C_MasterTransmit_TXE+0x130>
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b21      	cmp	r3, #33	@ 0x21
 8001a8c:	d164      	bne.n	8001b58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d012      	beq.n	8001abe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001abc:	e04c      	b.n	8001b58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d01d      	beq.n	8001b00 <I2C_MasterTransmit_BTF+0x8c>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d01a      	beq.n	8001b00 <I2C_MasterTransmit_BTF+0x8c>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ad0:	d016      	beq.n	8001b00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ae0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2211      	movs	r2, #17
 8001ae6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2220      	movs	r2, #32
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fec1 	bl	8001880 <HAL_I2C_MasterTxCpltCallback>
}
 8001afe:	e02b      	b.n	8001b58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b40      	cmp	r3, #64	@ 0x40
 8001b38:	d107      	bne.n	8001b4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fed6 	bl	80018f4 <HAL_I2C_MemTxCpltCallback>
}
 8001b48:	e006      	b.n	8001b58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fe94 	bl	8001880 <HAL_I2C_MasterTxCpltCallback>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d11d      	bne.n	8001bb4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d10b      	bne.n	8001b98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b90:	1c9a      	adds	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001b96:	e077      	b.n	8001c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	121b      	asrs	r3, r3, #8
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bb2:	e069      	b.n	8001c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d10b      	bne.n	8001bd4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bd2:	e059      	b.n	8001c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d152      	bne.n	8001c82 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b22      	cmp	r3, #34	@ 0x22
 8001be0:	d10d      	bne.n	8001bfe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bf0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bfc:	e044      	b.n	8001c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d015      	beq.n	8001c34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b21      	cmp	r3, #33	@ 0x21
 8001c0c:	d112      	bne.n	8001c34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001c32:	e029      	b.n	8001c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d124      	bne.n	8001c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b21      	cmp	r3, #33	@ 0x21
 8001c42:	d121      	bne.n	8001c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c52:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fe3a 	bl	80018f4 <HAL_I2C_MemTxCpltCallback>
}
 8001c80:	e002      	b.n	8001c88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff faf0 	bl	8001268 <I2C_Flush_DR>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b22      	cmp	r3, #34	@ 0x22
 8001ca2:	f040 80b9 	bne.w	8001e18 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d921      	bls.n	8001cfe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	f040 8096 	bne.w	8001e18 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cfa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001cfc:	e08c      	b.n	8001e18 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d07f      	beq.n	8001e06 <I2C_MasterReceive_RXNE+0x176>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d002      	beq.n	8001d12 <I2C_MasterReceive_RXNE+0x82>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d179      	bne.n	8001e06 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f001 fa6c 	bl	80031f0 <I2C_WaitOnSTOPRequestThroughIT>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d14c      	bne.n	8001db8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d2c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b40      	cmp	r3, #64	@ 0x40
 8001d76:	d10a      	bne.n	8001d8e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fdbd 	bl	8001906 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d8c:	e044      	b.n	8001e18 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d002      	beq.n	8001da2 <I2C_MasterReceive_RXNE+0x112>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d103      	bne.n	8001daa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001da8:	e002      	b.n	8001db0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2212      	movs	r2, #18
 8001dae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fd6e 	bl	8001892 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001db6:	e02f      	b.n	8001e18 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001dc6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fd8a 	bl	8001918 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e04:	e008      	b.n	8001e18 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e14:	605a      	str	r2, [r3, #4]
}
 8001e16:	e7ff      	b.n	8001e18 <I2C_MasterReceive_RXNE+0x188>
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d11b      	bne.n	8001e70 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e46:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001e6e:	e0c4      	b.n	8001ffa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d129      	bne.n	8001ece <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d00a      	beq.n	8001ea6 <I2C_MasterReceive_BTF+0x86>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d007      	beq.n	8001ea6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ea4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ecc:	e095      	b.n	8001ffa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d17d      	bne.n	8001fd4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d002      	beq.n	8001ee4 <I2C_MasterReceive_BTF+0xc4>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d108      	bne.n	8001ef6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e016      	b.n	8001f24 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d002      	beq.n	8001f02 <I2C_MasterReceive_BTF+0xe2>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d108      	bne.n	8001f14 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e007      	b.n	8001f24 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001f7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b40      	cmp	r3, #64	@ 0x40
 8001f92:	d10a      	bne.n	8001faa <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fcaf 	bl	8001906 <HAL_I2C_MemRxCpltCallback>
}
 8001fa8:	e027      	b.n	8001ffa <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d002      	beq.n	8001fbe <I2C_MasterReceive_BTF+0x19e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d103      	bne.n	8001fc6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fc4:	e002      	b.n	8001fcc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2212      	movs	r2, #18
 8001fca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fc60 	bl	8001892 <HAL_I2C_MasterRxCpltCallback>
}
 8001fd2:	e012      	b.n	8001ffa <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b40      	cmp	r3, #64	@ 0x40
 8002014:	d117      	bne.n	8002046 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800202e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002030:	e067      	b.n	8002102 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	611a      	str	r2, [r3, #16]
}
 8002044:	e05d      	b.n	8002102 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800204e:	d133      	bne.n	80020b8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b21      	cmp	r3, #33	@ 0x21
 800205a:	d109      	bne.n	8002070 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800206c:	611a      	str	r2, [r3, #16]
 800206e:	e008      	b.n	8002082 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	b2da      	uxtb	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <I2C_Master_SB+0x92>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d108      	bne.n	80020a6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002098:	2b00      	cmp	r3, #0
 800209a:	d032      	beq.n	8002102 <I2C_Master_SB+0x100>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d02d      	beq.n	8002102 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020b4:	605a      	str	r2, [r3, #4]
}
 80020b6:	e024      	b.n	8002102 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10e      	bne.n	80020de <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	11db      	asrs	r3, r3, #7
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 0306 	and.w	r3, r3, #6
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f063 030f 	orn	r3, r3, #15
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	611a      	str	r2, [r3, #16]
}
 80020dc:	e011      	b.n	8002102 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10d      	bne.n	8002102 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	11db      	asrs	r3, r3, #7
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f003 0306 	and.w	r3, r3, #6
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f063 030e 	orn	r3, r3, #14
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002118:	b2da      	uxtb	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <I2C_Master_ADD10+0x26>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00c      	beq.n	8002154 <I2C_Master_ADD10+0x48>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002152:	605a      	str	r2, [r3, #4]
  }
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800215e:	b480      	push	{r7}
 8002160:	b091      	sub	sp, #68	@ 0x44
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800216c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b22      	cmp	r3, #34	@ 0x22
 8002186:	f040 8174 	bne.w	8002472 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <I2C_Master_ADDR+0x54>
 8002192:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002196:	2b40      	cmp	r3, #64	@ 0x40
 8002198:	d10b      	bne.n	80021b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219a:	2300      	movs	r3, #0
 800219c:	633b      	str	r3, [r7, #48]	@ 0x30
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80021ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b0:	e16b      	b.n	800248a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d11d      	bne.n	80021f6 <I2C_Master_ADDR+0x98>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80021c2:	d118      	bne.n	80021f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80021f4:	e149      	b.n	800248a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d113      	bne.n	8002228 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e120      	b.n	800246a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 808a 	bne.w	8002348 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002236:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800223a:	d137      	bne.n	80022ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800224a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002256:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800225a:	d113      	bne.n	8002284 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800226a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	e0f2      	b.n	800246a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	623b      	str	r3, [r7, #32]
 8002298:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e0de      	b.n	800246a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80022ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d02e      	beq.n	8002310 <I2C_Master_ADDR+0x1b2>
 80022b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d02b      	beq.n	8002310 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80022b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ba:	2b12      	cmp	r3, #18
 80022bc:	d102      	bne.n	80022c4 <I2C_Master_ADDR+0x166>
 80022be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d125      	bne.n	8002310 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d00e      	beq.n	80022e8 <I2C_Master_ADDR+0x18a>
 80022ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d00b      	beq.n	80022e8 <I2C_Master_ADDR+0x18a>
 80022d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d008      	beq.n	80022e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e007      	b.n	80022f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	e0ac      	b.n	800246a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800231e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	e090      	b.n	800246a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d158      	bne.n	8002404 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002354:	2b04      	cmp	r3, #4
 8002356:	d021      	beq.n	800239c <I2C_Master_ADDR+0x23e>
 8002358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800235a:	2b02      	cmp	r3, #2
 800235c:	d01e      	beq.n	800239c <I2C_Master_ADDR+0x23e>
 800235e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002360:	2b10      	cmp	r3, #16
 8002362:	d01b      	beq.n	800239c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002372:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e012      	b.n	80023c2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023d0:	d14b      	bne.n	800246a <I2C_Master_ADDR+0x30c>
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023d8:	d00b      	beq.n	80023f2 <I2C_Master_ADDR+0x294>
 80023da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d008      	beq.n	80023f2 <I2C_Master_ADDR+0x294>
 80023e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d005      	beq.n	80023f2 <I2C_Master_ADDR+0x294>
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d002      	beq.n	80023f2 <I2C_Master_ADDR+0x294>
 80023ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d13b      	bne.n	800246a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e032      	b.n	800246a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002412:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800241e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002422:	d117      	bne.n	8002454 <I2C_Master_ADDR+0x2f6>
 8002424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002426:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800242a:	d00b      	beq.n	8002444 <I2C_Master_ADDR+0x2e6>
 800242c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242e:	2b01      	cmp	r3, #1
 8002430:	d008      	beq.n	8002444 <I2C_Master_ADDR+0x2e6>
 8002432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002434:	2b08      	cmp	r3, #8
 8002436:	d005      	beq.n	8002444 <I2C_Master_ADDR+0x2e6>
 8002438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243a:	2b10      	cmp	r3, #16
 800243c:	d002      	beq.n	8002444 <I2C_Master_ADDR+0x2e6>
 800243e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002440:	2b20      	cmp	r3, #32
 8002442:	d107      	bne.n	8002454 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002452:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002470:	e00b      	b.n	800248a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
}
 8002488:	e7ff      	b.n	800248a <I2C_Master_ADDR+0x32c>
 800248a:	bf00      	nop
 800248c:	3744      	adds	r7, #68	@ 0x44
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d02b      	beq.n	8002506 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d114      	bne.n	8002506 <I2C_SlaveTransmit_TXE+0x72>
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b29      	cmp	r3, #41	@ 0x29
 80024e0:	d111      	bne.n	8002506 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2221      	movs	r2, #33	@ 0x21
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2228      	movs	r2, #40	@ 0x28
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff f9cf 	bl	80018a4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d011      	beq.n	8002544 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800255c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02c      	beq.n	80025c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d114      	bne.n	80025c2 <I2C_SlaveReceive_RXNE+0x74>
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b2a      	cmp	r3, #42	@ 0x2a
 800259c:	d111      	bne.n	80025c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2222      	movs	r2, #34	@ 0x22
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2228      	movs	r2, #40	@ 0x28
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff f97a 	bl	80018b6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002626:	2b28      	cmp	r3, #40	@ 0x28
 8002628:	d125      	bne.n	8002676 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002638:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264e:	2b00      	cmp	r3, #0
 8002650:	d103      	bne.n	800265a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	81bb      	strh	r3, [r7, #12]
 8002658:	e002      	b.n	8002660 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002668:	89ba      	ldrh	r2, [r7, #12]
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff f92a 	bl	80018c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002674:	e00e      	b.n	8002694 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026f8:	d172      	bne.n	80027e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b22      	cmp	r3, #34	@ 0x22
 80026fe:	d002      	beq.n	8002706 <I2C_Slave_STOPF+0x6a>
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b2a      	cmp	r3, #42	@ 0x2a
 8002704:	d135      	bne.n	8002772 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f043 0204 	orr.w	r2, r3, #4
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002738:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fa82 	bl	8000c48 <HAL_DMA_GetState>
 8002744:	4603      	mov	r3, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	d049      	beq.n	80027de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274e:	4a69      	ldr	r2, [pc, #420]	@ (80028f4 <I2C_Slave_STOPF+0x258>)
 8002750:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe f9fe 	bl	8000b58 <HAL_DMA_Abort_IT>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03d      	beq.n	80027de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800276c:	4610      	mov	r0, r2
 800276e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002770:	e035      	b.n	80027de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b29a      	uxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fa4c 	bl	8000c48 <HAL_DMA_GetState>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d014      	beq.n	80027e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ba:	4a4e      	ldr	r2, [pc, #312]	@ (80028f4 <I2C_Slave_STOPF+0x258>)
 80027bc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe f9c8 	bl	8000b58 <HAL_DMA_Abort_IT>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027d8:	4610      	mov	r0, r2
 80027da:	4798      	blx	r3
 80027dc:	e000      	b.n	80027e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03e      	beq.n	8002868 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d112      	bne.n	800281e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002828:	2b40      	cmp	r3, #64	@ 0x40
 800282a:	d112      	bne.n	8002852 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f043 0204 	orr.w	r2, r3, #4
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f8b7 	bl	80029e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002876:	e039      	b.n	80028ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b2a      	cmp	r3, #42	@ 0x2a
 800287c:	d109      	bne.n	8002892 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2228      	movs	r2, #40	@ 0x28
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff f812 	bl	80018b6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b28      	cmp	r3, #40	@ 0x28
 800289c:	d111      	bne.n	80028c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a15      	ldr	r2, [pc, #84]	@ (80028f8 <I2C_Slave_STOPF+0x25c>)
 80028a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff f811 	bl	80018e2 <HAL_I2C_ListenCpltCallback>
}
 80028c0:	e014      	b.n	80028ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	2b22      	cmp	r3, #34	@ 0x22
 80028c8:	d002      	beq.n	80028d0 <I2C_Slave_STOPF+0x234>
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b22      	cmp	r3, #34	@ 0x22
 80028ce:	d10d      	bne.n	80028ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe ffe5 	bl	80018b6 <HAL_I2C_SlaveRxCpltCallback>
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08002d4d 	.word	0x08002d4d
 80028f8:	ffff0000 	.word	0xffff0000

080028fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d002      	beq.n	800291e <I2C_Slave_AF+0x22>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b20      	cmp	r3, #32
 800291c:	d129      	bne.n	8002972 <I2C_Slave_AF+0x76>
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b28      	cmp	r3, #40	@ 0x28
 8002922:	d126      	bne.n	8002972 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a2e      	ldr	r2, [pc, #184]	@ (80029e0 <I2C_Slave_AF+0xe4>)
 8002928:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002938:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002942:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002952:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe ffb9 	bl	80018e2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002970:	e031      	b.n	80029d6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b21      	cmp	r3, #33	@ 0x21
 8002976:	d129      	bne.n	80029cc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a19      	ldr	r2, [pc, #100]	@ (80029e0 <I2C_Slave_AF+0xe4>)
 800297c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2221      	movs	r2, #33	@ 0x21
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029bc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe fc52 	bl	8001268 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fe ff6d 	bl	80018a4 <HAL_I2C_SlaveTxCpltCallback>
}
 80029ca:	e004      	b.n	80029d6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029d4:	615a      	str	r2, [r3, #20]
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	ffff0000 	.word	0xffff0000

080029e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029fc:	7bbb      	ldrb	r3, [r7, #14]
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d002      	beq.n	8002a08 <I2C_ITError+0x24>
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	2b40      	cmp	r3, #64	@ 0x40
 8002a06:	d10a      	bne.n	8002a1e <I2C_ITError+0x3a>
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b22      	cmp	r3, #34	@ 0x22
 8002a0c:	d107      	bne.n	8002a1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a24:	2b28      	cmp	r3, #40	@ 0x28
 8002a26:	d107      	bne.n	8002a38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2228      	movs	r2, #40	@ 0x28
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002a36:	e015      	b.n	8002a64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a46:	d00a      	beq.n	8002a5e <I2C_ITError+0x7a>
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b60      	cmp	r3, #96	@ 0x60
 8002a4c:	d007      	beq.n	8002a5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a72:	d162      	bne.n	8002b3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d020      	beq.n	8002ad4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a96:	4a6a      	ldr	r2, [pc, #424]	@ (8002c40 <I2C_ITError+0x25c>)
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe f85a 	bl	8000b58 <HAL_DMA_Abort_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8089 	beq.w	8002bbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4798      	blx	r3
 8002ad2:	e074      	b.n	8002bbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	4a59      	ldr	r2, [pc, #356]	@ (8002c40 <I2C_ITError+0x25c>)
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe f839 	bl	8000b58 <HAL_DMA_Abort_IT>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d068      	beq.n	8002bbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af6:	2b40      	cmp	r3, #64	@ 0x40
 8002af8:	d10b      	bne.n	8002b12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0201 	bic.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
 8002b38:	e041      	b.n	8002bbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b60      	cmp	r3, #96	@ 0x60
 8002b44:	d125      	bne.n	8002b92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5e:	2b40      	cmp	r3, #64	@ 0x40
 8002b60:	d10b      	bne.n	8002b7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fecd 	bl	800192a <HAL_I2C_AbortCpltCallback>
 8002b90:	e015      	b.n	8002bbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b40      	cmp	r3, #64	@ 0x40
 8002b9e:	d10b      	bne.n	8002bb8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7fe fead 	bl	8001918 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10e      	bne.n	8002bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d104      	bne.n	8002bec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002bfa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d113      	bne.n	8002c38 <I2C_ITError+0x254>
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b28      	cmp	r3, #40	@ 0x28
 8002c14:	d110      	bne.n	8002c38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <I2C_ITError+0x260>)
 8002c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe fe55 	bl	80018e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08002d4d 	.word	0x08002d4d
 8002c44:	ffff0000 	.word	0xffff0000

08002c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	460b      	mov	r3, r1
 8002c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d006      	beq.n	8002c72 <I2C_MasterRequestWrite+0x2a>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d003      	beq.n	8002c72 <I2C_MasterRequestWrite+0x2a>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c70:	d108      	bne.n	8002c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e00b      	b.n	8002c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	2b12      	cmp	r3, #18
 8002c8a:	d107      	bne.n	8002c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f8f7 	bl	8002e9c <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc2:	d103      	bne.n	8002ccc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e035      	b.n	8002d3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cd8:	d108      	bne.n	8002cec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cda:	897b      	ldrh	r3, [r7, #10]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ce8:	611a      	str	r2, [r3, #16]
 8002cea:	e01b      	b.n	8002d24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cec:	897b      	ldrh	r3, [r7, #10]
 8002cee:	11db      	asrs	r3, r3, #7
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0306 	and.w	r3, r3, #6
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f063 030f 	orn	r3, r3, #15
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	490e      	ldr	r1, [pc, #56]	@ (8002d44 <I2C_MasterRequestWrite+0xfc>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f940 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e010      	b.n	8002d3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4907      	ldr	r1, [pc, #28]	@ (8002d48 <I2C_MasterRequestWrite+0x100>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f930 	bl	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	00010008 	.word	0x00010008
 8002d48:	00010002 	.word	0x00010002

08002d4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d66:	4b4b      	ldr	r3, [pc, #300]	@ (8002e94 <I2C_DMAAbort+0x148>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	08db      	lsrs	r3, r3, #3
 8002d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e98 <I2C_DMAAbort+0x14c>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0a1a      	lsrs	r2, r3, #8
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00da      	lsls	r2, r3, #3
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002d92:	e00a      	b.n	8002daa <I2C_DMAAbort+0x5e>
    }
    count--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da8:	d0ea      	beq.n	8002d80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db6:	2200      	movs	r2, #0
 8002db8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dec:	2200      	movs	r2, #0
 8002dee:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b60      	cmp	r3, #96	@ 0x60
 8002e1a:	d10e      	bne.n	8002e3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7fe fd79 	bl	800192a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e38:	e027      	b.n	8002e8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e40:	2b28      	cmp	r3, #40	@ 0x28
 8002e42:	d117      	bne.n	8002e74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2228      	movs	r2, #40	@ 0x28
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e72:	e007      	b.n	8002e84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002e84:	6978      	ldr	r0, [r7, #20]
 8002e86:	f7fe fd47 	bl	8001918 <HAL_I2C_ErrorCallback>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000000 	.word	0x20000000
 8002e98:	14f8b589 	.word	0x14f8b589

08002e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eac:	e048      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d044      	beq.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb6:	f7fd fd13 	bl	80008e0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d139      	bne.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10d      	bne.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	43da      	mvns	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	e00c      	b.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d116      	bne.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e023      	b.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	0c1b      	lsrs	r3, r3, #16
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10d      	bne.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	43da      	mvns	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4013      	ands	r3, r2
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	e00c      	b.n	8002f80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d093      	beq.n	8002eae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f9e:	e071      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fae:	d123      	bne.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e067      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d041      	beq.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003000:	f7fd fc6e 	bl	80008e0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	d302      	bcc.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d136      	bne.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10c      	bne.n	800303a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf14      	ite	ne
 8003032:	2301      	movne	r3, #1
 8003034:	2300      	moveq	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	e00b      	b.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	43da      	mvns	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e021      	b.n	80030c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10c      	bne.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	43da      	mvns	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4013      	ands	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e00b      	b.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4013      	ands	r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f47f af6d 	bne.w	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030dc:	e034      	b.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f8b8 	bl	8003254 <I2C_IsAcknowledgeFailed>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e034      	b.n	8003158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d028      	beq.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fd fbf3 	bl	80008e0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11d      	bne.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003116:	2b80      	cmp	r3, #128	@ 0x80
 8003118:	d016      	beq.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b80      	cmp	r3, #128	@ 0x80
 8003154:	d1c3      	bne.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800316c:	e034      	b.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f870 	bl	8003254 <I2C_IsAcknowledgeFailed>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e034      	b.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d028      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fd fbab 	bl	80008e0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11d      	bne.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d016      	beq.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f043 0220 	orr.w	r2, r3, #32
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e007      	b.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d1c3      	bne.n	800316e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80031fc:	4b13      	ldr	r3, [pc, #76]	@ (800324c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	08db      	lsrs	r3, r3, #3
 8003202:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	0a1a      	lsrs	r2, r3, #8
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b01      	subs	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d107      	bne.n	800322e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f043 0220 	orr.w	r2, r3, #32
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e008      	b.n	8003240 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800323c:	d0e9      	beq.n	8003212 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000
 8003250:	14f8b589 	.word	0x14f8b589

08003254 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326a:	d11b      	bne.n	80032a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003274:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	f043 0204 	orr.w	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80032c0:	d103      	bne.n	80032ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80032c8:	e007      	b.n	80032da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80032d2:	d102      	bne.n	80032da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2208      	movs	r2, #8
 80032d8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e272      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8087 	beq.w	8003412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003304:	4b92      	ldr	r3, [pc, #584]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b04      	cmp	r3, #4
 800330e:	d00c      	beq.n	800332a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003310:	4b8f      	ldr	r3, [pc, #572]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d112      	bne.n	8003342 <HAL_RCC_OscConfig+0x5e>
 800331c:	4b8c      	ldr	r3, [pc, #560]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003328:	d10b      	bne.n	8003342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332a:	4b89      	ldr	r3, [pc, #548]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d06c      	beq.n	8003410 <HAL_RCC_OscConfig+0x12c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d168      	bne.n	8003410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e24c      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x76>
 800334c:	4b80      	ldr	r3, [pc, #512]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a7f      	ldr	r2, [pc, #508]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e02e      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b7b      	ldr	r3, [pc, #492]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7a      	ldr	r2, [pc, #488]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b78      	ldr	r3, [pc, #480]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a77      	ldr	r2, [pc, #476]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003374:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0xbc>
 8003386:	4b72      	ldr	r3, [pc, #456]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a71      	ldr	r2, [pc, #452]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6f      	ldr	r3, [pc, #444]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6e      	ldr	r2, [pc, #440]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xd4>
 80033a0:	4b6b      	ldr	r3, [pc, #428]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b68      	ldr	r3, [pc, #416]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a67      	ldr	r2, [pc, #412]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd fa8e 	bl	80008e0 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd fa8a 	bl	80008e0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	@ 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e200      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5d      	ldr	r3, [pc, #372]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xe4>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd fa7a 	bl	80008e0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fd fa76 	bl	80008e0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	@ 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1ec      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b53      	ldr	r3, [pc, #332]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x10c>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800341e:	4b4c      	ldr	r3, [pc, #304]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800342a:	4b49      	ldr	r3, [pc, #292]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x18c>
 8003436:	4b46      	ldr	r3, [pc, #280]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b43      	ldr	r3, [pc, #268]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x176>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c0      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3d      	ldr	r3, [pc, #244]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4939      	ldr	r1, [pc, #228]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <HAL_RCC_OscConfig+0x270>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347e:	f7fd fa2f 	bl	80008e0 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003486:	f7fd fa2b 	bl	80008e0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a1      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4927      	ldr	r1, [pc, #156]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b26      	ldr	r3, [pc, #152]	@ (8003554 <HAL_RCC_OscConfig+0x270>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fd fa0e 	bl	80008e0 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fd fa0a 	bl	80008e0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e180      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d03a      	beq.n	8003568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d019      	beq.n	800352e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b17      	ldr	r3, [pc, #92]	@ (8003558 <HAL_RCC_OscConfig+0x274>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fd f9ee 	bl	80008e0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd f9ea 	bl	80008e0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e160      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <HAL_RCC_OscConfig+0x26c>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003526:	2001      	movs	r0, #1
 8003528:	f000 faba 	bl	8003aa0 <RCC_Delay>
 800352c:	e01c      	b.n	8003568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352e:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <HAL_RCC_OscConfig+0x274>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003534:	f7fd f9d4 	bl	80008e0 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353a:	e00f      	b.n	800355c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353c:	f7fd f9d0 	bl	80008e0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d908      	bls.n	800355c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e146      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	42420000 	.word	0x42420000
 8003558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355c:	4b92      	ldr	r3, [pc, #584]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e9      	bne.n	800353c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a6 	beq.w	80036c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b8b      	ldr	r3, [pc, #556]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b88      	ldr	r3, [pc, #544]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	4a87      	ldr	r2, [pc, #540]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003590:	61d3      	str	r3, [r2, #28]
 8003592:	4b85      	ldr	r3, [pc, #532]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b82      	ldr	r3, [pc, #520]	@ (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b7f      	ldr	r3, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	@ (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd f991 	bl	80008e0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd f98d 	bl	80008e0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	@ 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e103      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b75      	ldr	r3, [pc, #468]	@ (80037ac <HAL_RCC_OscConfig+0x4c8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x312>
 80035e8:	4b6f      	ldr	r3, [pc, #444]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a6e      	ldr	r2, [pc, #440]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	e02d      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x334>
 80035fe:	4b6a      	ldr	r3, [pc, #424]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a69      	ldr	r2, [pc, #420]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	4b67      	ldr	r3, [pc, #412]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a66      	ldr	r2, [pc, #408]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	e01c      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0x356>
 8003620:	4b61      	ldr	r3, [pc, #388]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a60      	ldr	r2, [pc, #384]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f043 0304 	orr.w	r3, r3, #4
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	4b5e      	ldr	r3, [pc, #376]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a5d      	ldr	r2, [pc, #372]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6213      	str	r3, [r2, #32]
 8003638:	e00b      	b.n	8003652 <HAL_RCC_OscConfig+0x36e>
 800363a:	4b5b      	ldr	r3, [pc, #364]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a5a      	ldr	r2, [pc, #360]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6213      	str	r3, [r2, #32]
 8003646:	4b58      	ldr	r3, [pc, #352]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a57      	ldr	r2, [pc, #348]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d015      	beq.n	8003686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fd f941 	bl	80008e0 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fd f93d 	bl	80008e0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0b1      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ee      	beq.n	8003662 <HAL_RCC_OscConfig+0x37e>
 8003684:	e014      	b.n	80036b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003686:	f7fd f92b 	bl	80008e0 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fd f927 	bl	80008e0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e09b      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	4b40      	ldr	r3, [pc, #256]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b6:	4b3c      	ldr	r3, [pc, #240]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4a3b      	ldr	r2, [pc, #236]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8087 	beq.w	80037da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036cc:	4b36      	ldr	r3, [pc, #216]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d061      	beq.n	800379c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d146      	bne.n	800376e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e0:	4b33      	ldr	r3, [pc, #204]	@ (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd f8fb 	bl	80008e0 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd f8f7 	bl	80008e0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e06d      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003700:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003714:	d108      	bne.n	8003728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4921      	ldr	r1, [pc, #132]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003728:	4b1f      	ldr	r3, [pc, #124]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a19      	ldr	r1, [r3, #32]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	430b      	orrs	r3, r1
 800373a:	491b      	ldr	r1, [pc, #108]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd f8cb 	bl	80008e0 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd f8c7 	bl	80008e0 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e03d      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x46a>
 800376c:	e035      	b.n	80037da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <HAL_RCC_OscConfig+0x4cc>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd f8b4 	bl	80008e0 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd f8b0 	bl	80008e0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e026      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378e:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x498>
 800379a:	e01e      	b.n	80037da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e019      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <HAL_RCC_OscConfig+0x500>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000

080037e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0d0      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b6a      	ldr	r3, [pc, #424]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d910      	bls.n	800382c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b67      	ldr	r3, [pc, #412]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	4965      	ldr	r1, [pc, #404]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b63      	ldr	r3, [pc, #396]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b8      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d020      	beq.n	800387a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003844:	4b59      	ldr	r3, [pc, #356]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a58      	ldr	r2, [pc, #352]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800384e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800385c:	4b53      	ldr	r3, [pc, #332]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a52      	ldr	r2, [pc, #328]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003868:	4b50      	ldr	r3, [pc, #320]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	494d      	ldr	r1, [pc, #308]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d040      	beq.n	8003908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d115      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e07f      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a6:	4b41      	ldr	r3, [pc, #260]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e073      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b3d      	ldr	r3, [pc, #244]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06b      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b39      	ldr	r3, [pc, #228]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4936      	ldr	r1, [pc, #216]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fd f802 	bl	80008e0 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fc fffe 	bl	80008e0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e053      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b27      	ldr	r3, [pc, #156]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d210      	bcs.n	8003938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	4922      	ldr	r1, [pc, #136]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d001      	beq.n	8003938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e032      	b.n	800399e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003944:	4b19      	ldr	r3, [pc, #100]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4916      	ldr	r1, [pc, #88]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003962:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	490e      	ldr	r1, [pc, #56]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003976:	f000 f821 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490a      	ldr	r1, [pc, #40]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	fa22 f303 	lsr.w	r3, r2, r3
 800398e:	4a09      	ldr	r2, [pc, #36]	@ (80039b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fc ff60 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40022000 	.word	0x40022000
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08003b4c 	.word	0x08003b4c
 80039b4:	20000000 	.word	0x20000000
 80039b8:	20000008 	.word	0x20000008

080039bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x94>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d002      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x30>
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x36>
 80039ea:	e027      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ec:	4b19      	ldr	r3, [pc, #100]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ee:	613b      	str	r3, [r7, #16]
      break;
 80039f0:	e027      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	0c9b      	lsrs	r3, r3, #18
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	4a17      	ldr	r2, [pc, #92]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039fc:	5cd3      	ldrb	r3, [r2, r3]
 80039fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a0a:	4b11      	ldr	r3, [pc, #68]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0c5b      	lsrs	r3, r3, #17
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	4a11      	ldr	r2, [pc, #68]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a16:	5cd3      	ldrb	r3, [r2, r3]
 8003a18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a1e:	fb03 f202 	mul.w	r2, r3, r2
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e004      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	613b      	str	r3, [r7, #16]
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a3e:	613b      	str	r3, [r7, #16]
      break;
 8003a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a42:	693b      	ldr	r3, [r7, #16]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	08003b64 	.word	0x08003b64
 8003a5c:	08003b74 	.word	0x08003b74
 8003a60:	003d0900 	.word	0x003d0900

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b02      	ldr	r3, [pc, #8]	@ (8003a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	20000000 	.word	0x20000000

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	f7ff fff2 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4903      	ldr	r1, [pc, #12]	@ (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08003b5c 	.word	0x08003b5c

08003aa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <RCC_Delay+0x34>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad8 <RCC_Delay+0x38>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0a5b      	lsrs	r3, r3, #9
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003abc:	bf00      	nop
  }
  while (Delay --);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1e5a      	subs	r2, r3, #1
 8003ac2:	60fa      	str	r2, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f9      	bne.n	8003abc <RCC_Delay+0x1c>
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	10624dd3 	.word	0x10624dd3

08003adc <memset>:
 8003adc:	4603      	mov	r3, r0
 8003ade:	4402      	add	r2, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	2600      	movs	r6, #0
 8003af0:	4d0c      	ldr	r5, [pc, #48]	@ (8003b24 <__libc_init_array+0x38>)
 8003af2:	4c0d      	ldr	r4, [pc, #52]	@ (8003b28 <__libc_init_array+0x3c>)
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	42a6      	cmp	r6, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	f000 f81a 	bl	8003b34 <_init>
 8003b00:	2600      	movs	r6, #0
 8003b02:	4d0a      	ldr	r5, [pc, #40]	@ (8003b2c <__libc_init_array+0x40>)
 8003b04:	4c0a      	ldr	r4, [pc, #40]	@ (8003b30 <__libc_init_array+0x44>)
 8003b06:	1b64      	subs	r4, r4, r5
 8003b08:	10a4      	asrs	r4, r4, #2
 8003b0a:	42a6      	cmp	r6, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b14:	4798      	blx	r3
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1e:	4798      	blx	r3
 8003b20:	3601      	adds	r6, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	08003b78 	.word	0x08003b78
 8003b28:	08003b78 	.word	0x08003b78
 8003b2c:	08003b78 	.word	0x08003b78
 8003b30:	08003b7c 	.word	0x08003b7c

08003b34 <_init>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr

08003b40 <_fini>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr
