
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006014  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006120  08006120  00007120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006220  08006220  000080a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006220  08006220  000080a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006220  08006220  000080a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006220  08006220  00007220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006224  08006224  00007224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08006228  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200000a0  080062c8  000080a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080062c8  00008338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1af  00000000  00000000  000080c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002783  00000000  00000000  00015278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00017a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bac  00000000  00000000  00018928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a09  00000000  00000000  000194d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001434a  00000000  00000000  00032edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b22d  00000000  00000000  00047227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  000d2498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d66c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006108 	.word	0x08006108

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	08006108 	.word	0x08006108

0800014c <lcd_send_cmd>:

extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd){
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	@ 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	@ 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	@ (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f002 fadd 	bl	8002758 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000013c 	.word	0x2000013c

080001ac <lcd_send_data>:

void lcd_send_data (char data){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	@ 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	@ 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	@ (8000208 <lcd_send_data+0x5c>)
 80001fa:	f002 faad 	bl	8002758 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	2000013c 	.word	0x2000013c

0800020c <lcd_init>:

void lcd_init (void){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	@ 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	@ 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	@ 0x32
 800021e:	f001 fdb5 	bl	8001d8c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	@ 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	@ 0x32
 800022a:	f001 fdaf 	bl	8001d8c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	@ 0x32
 8000236:	f001 fda9 	bl	8001d8c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	@ 0x32
 8000242:	f001 fda3 	bl	8001d8c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	@ 0x32
 800024e:	f001 fd9d 	bl	8001d8c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	@ 0x32
 800025a:	f001 fd97 	bl	8001d8c <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	@ 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_clear_display>:

void lcd_clear_display (void){
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000296:	2001      	movs	r0, #1
 8000298:	f7ff ff58 	bl	800014c <lcd_send_cmd>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if (row == 0){
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <lcd_goto_XY+0x1a>
		pos_Addr = 0x80 + col;
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	3b80      	subs	r3, #128	@ 0x80
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	e006      	b.n	80002c8 <lcd_goto_XY+0x28>
	}else if (row == 1){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d108      	bne.n	80002d2 <lcd_goto_XY+0x32>
		pos_Addr = 0xC0 + col;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	3b40      	subs	r3, #64	@ 0x40
 80002c6:	73fb      	strb	r3, [r7, #15]
	}else{
		return;
	}
	lcd_send_cmd(pos_Addr);
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff3e 	bl	800014c <lcd_send_cmd>
 80002d0:	e000      	b.n	80002d4 <lcd_goto_XY+0x34>
		return;
 80002d2:	bf00      	nop
}
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <changeToManualMode>:
 *      Author: phamgialuong
 */

#include "autoModeFSM.h"

void changeToManualMode(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	deleteTaskSch(updateLCD_TrafficTime);
 80002e0:	4817      	ldr	r0, [pc, #92]	@ (8000340 <changeToManualMode+0x64>)
 80002e2:	f001 f9b1 	bl	8001648 <deleteTaskSch>
	// Print change state info on LCD
	lcd_clear_display();
 80002e6:	f7ff ffd4 	bl	8000292 <lcd_clear_display>
	addTaskSch(updateLCD_ChangeToManual, 100, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2164      	movs	r1, #100	@ 0x64
 80002ee:	4815      	ldr	r0, [pc, #84]	@ (8000344 <changeToManualMode+0x68>)
 80002f0:	f001 f8de 	bl	80014b0 <addTaskSch>
	// Prepare for next mode
	addTaskSch(lcd_clear_display, 2000, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80002fa:	4813      	ldr	r0, [pc, #76]	@ (8000348 <changeToManualMode+0x6c>)
 80002fc:	f001 f8d8 	bl	80014b0 <addTaskSch>
	addTaskSch(updateLCD_ManualMode, 2100, 300);
 8000300:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000304:	f640 0134 	movw	r1, #2100	@ 0x834
 8000308:	4810      	ldr	r0, [pc, #64]	@ (800034c <changeToManualMode+0x70>)
 800030a:	f001 f8d1 	bl	80014b0 <addTaskSch>
	addTaskSch(decreaseCounter, 2150, 1000);
 800030e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000312:	f640 0166 	movw	r1, #2150	@ 0x866
 8000316:	480e      	ldr	r0, [pc, #56]	@ (8000350 <changeToManualMode+0x74>)
 8000318:	f001 f8ca 	bl	80014b0 <addTaskSch>
	setManualCounter();
 800031c:	f000 fb92 	bl	8000a44 <setManualCounter>
	turnLed(X, Red);
 8000320:	2100      	movs	r1, #0
 8000322:	2000      	movs	r0, #0
 8000324:	f001 fbe0 	bl	8001ae8 <turnLed>
	turnLed(Y, Green);
 8000328:	2101      	movs	r1, #1
 800032a:	2001      	movs	r0, #1
 800032c:	f001 fbdc 	bl	8001ae8 <turnLed>

	manualState = Man_RedGreen;
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <changeToManualMode+0x78>)
 8000332:	2206      	movs	r2, #6
 8000334:	701a      	strb	r2, [r3, #0]
	autoState = Sleep;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <changeToManualMode+0x7c>)
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	0800087d 	.word	0x0800087d
 8000344:	080007ed 	.word	0x080007ed
 8000348:	08000293 	.word	0x08000293
 800034c:	08000831 	.word	0x08000831
 8000350:	08000a29 	.word	0x08000a29
 8000354:	2000003a 	.word	0x2000003a
 8000358:	20000139 	.word	0x20000139

0800035c <autoModeFSM>:

void autoModeFSM(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	switch(autoState){
 8000360:	4b56      	ldr	r3, [pc, #344]	@ (80004bc <autoModeFSM+0x160>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b05      	cmp	r3, #5
 8000366:	f200 809d 	bhi.w	80004a4 <autoModeFSM+0x148>
 800036a:	a201      	add	r2, pc, #4	@ (adr r2, 8000370 <autoModeFSM+0x14>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	08000389 	.word	0x08000389
 8000374:	080004a5 	.word	0x080004a5
 8000378:	080003b5 	.word	0x080003b5
 800037c:	080003e9 	.word	0x080003e9
 8000380:	0800042d 	.word	0x0800042d
 8000384:	08000461 	.word	0x08000461
	case InitAuto:
		checkSystemTime();
 8000388:	f000 fb8c 	bl	8000aa4 <checkSystemTime>
		turnLed(X, Red);
 800038c:	2100      	movs	r1, #0
 800038e:	2000      	movs	r0, #0
 8000390:	f001 fbaa 	bl	8001ae8 <turnLed>
		turnLed(Y, Green);
 8000394:	2101      	movs	r1, #1
 8000396:	2001      	movs	r0, #1
 8000398:	f001 fba6 	bl	8001ae8 <turnLed>
		resetTimeCounter(X, Red);
 800039c:	2100      	movs	r1, #0
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 faf8 	bl	8000994 <resetTimeCounter>
		resetTimeCounter(Y, Green);
 80003a4:	2101      	movs	r1, #1
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 faf4 	bl	8000994 <resetTimeCounter>
		autoState = Auto_RedGreen;
 80003ac:	4b43      	ldr	r3, [pc, #268]	@ (80004bc <autoModeFSM+0x160>)
 80003ae:	2202      	movs	r2, #2
 80003b0:	701a      	strb	r2, [r3, #0]
		break;
 80003b2:	e080      	b.n	80004b6 <autoModeFSM+0x15a>
	case Auto_RedGreen:
		// Change to next state
		if(getTimeCounter(Y) <= 0){
 80003b4:	2001      	movs	r0, #1
 80003b6:	f000 fb05 	bl	80009c4 <getTimeCounter>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d10a      	bne.n	80003d6 <autoModeFSM+0x7a>
			turnLed(Y, Yellow);
 80003c0:	2102      	movs	r1, #2
 80003c2:	2001      	movs	r0, #1
 80003c4:	f001 fb90 	bl	8001ae8 <turnLed>
			resetTimeCounter(Y, Yellow);
 80003c8:	2102      	movs	r1, #2
 80003ca:	2001      	movs	r0, #1
 80003cc:	f000 fae2 	bl	8000994 <resetTimeCounter>
			autoState = Auto_RedYellow;
 80003d0:	4b3a      	ldr	r3, [pc, #232]	@ (80004bc <autoModeFSM+0x160>)
 80003d2:	2203      	movs	r2, #3
 80003d4:	701a      	strb	r2, [r3, #0]
		}
		// Change to Manual mode
		if(hasJustLongPressedOnButton(0)){
 80003d6:	2000      	movs	r0, #0
 80003d8:	f000 f99a 	bl	8000710 <hasJustLongPressedOnButton>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d062      	beq.n	80004a8 <autoModeFSM+0x14c>
			changeToManualMode();
 80003e2:	f7ff ff7b 	bl	80002dc <changeToManualMode>
		}
		break;
 80003e6:	e05f      	b.n	80004a8 <autoModeFSM+0x14c>
	case Auto_RedYellow:
		// Change to next state
		if(getTimeCounter(X) <= 0){
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 faeb 	bl	80009c4 <getTimeCounter>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d112      	bne.n	800041a <autoModeFSM+0xbe>
			turnLed(X, Green);
 80003f4:	2101      	movs	r1, #1
 80003f6:	2000      	movs	r0, #0
 80003f8:	f001 fb76 	bl	8001ae8 <turnLed>
			turnLed(Y, Red);
 80003fc:	2100      	movs	r1, #0
 80003fe:	2001      	movs	r0, #1
 8000400:	f001 fb72 	bl	8001ae8 <turnLed>
			resetTimeCounter(X, Green);
 8000404:	2101      	movs	r1, #1
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fac4 	bl	8000994 <resetTimeCounter>
			resetTimeCounter(Y, Red);
 800040c:	2100      	movs	r1, #0
 800040e:	2001      	movs	r0, #1
 8000410:	f000 fac0 	bl	8000994 <resetTimeCounter>
			autoState = Auto_GreenRed;
 8000414:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <autoModeFSM+0x160>)
 8000416:	2204      	movs	r2, #4
 8000418:	701a      	strb	r2, [r3, #0]
		}
		// Change to Manual mode
		if(hasJustLongPressedOnButton(0)){
 800041a:	2000      	movs	r0, #0
 800041c:	f000 f978 	bl	8000710 <hasJustLongPressedOnButton>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d042      	beq.n	80004ac <autoModeFSM+0x150>
			changeToManualMode();
 8000426:	f7ff ff59 	bl	80002dc <changeToManualMode>
		}
		break;
 800042a:	e03f      	b.n	80004ac <autoModeFSM+0x150>
	case Auto_GreenRed:
		// Change to next state
		if(getTimeCounter(X) <= 0){
 800042c:	2000      	movs	r0, #0
 800042e:	f000 fac9 	bl	80009c4 <getTimeCounter>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d10a      	bne.n	800044e <autoModeFSM+0xf2>
			turnLed(X, Yellow);
 8000438:	2102      	movs	r1, #2
 800043a:	2000      	movs	r0, #0
 800043c:	f001 fb54 	bl	8001ae8 <turnLed>
			resetTimeCounter(X, Yellow);
 8000440:	2102      	movs	r1, #2
 8000442:	2000      	movs	r0, #0
 8000444:	f000 faa6 	bl	8000994 <resetTimeCounter>
			autoState = Auto_YellowRed;
 8000448:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <autoModeFSM+0x160>)
 800044a:	2205      	movs	r2, #5
 800044c:	701a      	strb	r2, [r3, #0]
		}
		// Change to Manual mode
		if(hasJustLongPressedOnButton(0)){
 800044e:	2000      	movs	r0, #0
 8000450:	f000 f95e 	bl	8000710 <hasJustLongPressedOnButton>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d02a      	beq.n	80004b0 <autoModeFSM+0x154>
			changeToManualMode();
 800045a:	f7ff ff3f 	bl	80002dc <changeToManualMode>
		}
		break;
 800045e:	e027      	b.n	80004b0 <autoModeFSM+0x154>
	case Auto_YellowRed:
		// Change to next state
		if(getTimeCounter(X) <= 0){
 8000460:	2000      	movs	r0, #0
 8000462:	f000 faaf 	bl	80009c4 <getTimeCounter>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d112      	bne.n	8000492 <autoModeFSM+0x136>
			turnLed(X, Red);
 800046c:	2100      	movs	r1, #0
 800046e:	2000      	movs	r0, #0
 8000470:	f001 fb3a 	bl	8001ae8 <turnLed>
			turnLed(Y, Green);
 8000474:	2101      	movs	r1, #1
 8000476:	2001      	movs	r0, #1
 8000478:	f001 fb36 	bl	8001ae8 <turnLed>
			resetTimeCounter(X, Red);
 800047c:	2100      	movs	r1, #0
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fa88 	bl	8000994 <resetTimeCounter>
			resetTimeCounter(Y, Green);
 8000484:	2101      	movs	r1, #1
 8000486:	2001      	movs	r0, #1
 8000488:	f000 fa84 	bl	8000994 <resetTimeCounter>
			autoState = Auto_RedGreen;
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <autoModeFSM+0x160>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
		}
		// Change to Manual mode
		if(hasJustLongPressedOnButton(0)){
 8000492:	2000      	movs	r0, #0
 8000494:	f000 f93c 	bl	8000710 <hasJustLongPressedOnButton>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00a      	beq.n	80004b4 <autoModeFSM+0x158>
			changeToManualMode();
 800049e:	f7ff ff1d 	bl	80002dc <changeToManualMode>
		}
		break;
 80004a2:	e007      	b.n	80004b4 <autoModeFSM+0x158>
	default:
		break;
 80004a4:	bf00      	nop
 80004a6:	e006      	b.n	80004b6 <autoModeFSM+0x15a>
		break;
 80004a8:	bf00      	nop
 80004aa:	e004      	b.n	80004b6 <autoModeFSM+0x15a>
		break;
 80004ac:	bf00      	nop
 80004ae:	e002      	b.n	80004b6 <autoModeFSM+0x15a>
		break;
 80004b0:	bf00      	nop
 80004b2:	e000      	b.n	80004b6 <autoModeFSM+0x15a>
		break;
 80004b4:	bf00      	nop
	}
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000139 	.word	0x20000139

080004c0 <initButton>:
uint16_t longPressDurationTime = 100; //time duration for long press: 100x10ms
static uint16_t counterForLongPressButton[maxButton];
static uint8_t flagForLongPressButton[maxButton];

// Initial the number of button and time duration for long press
void initButton(uint8_t numOfButton, uint16_t durationForLongPress, uint8_t Tick){
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	460b      	mov	r3, r1
 80004cc:	80bb      	strh	r3, [r7, #4]
 80004ce:	4613      	mov	r3, r2
 80004d0:	71bb      	strb	r3, [r7, #6]
	if(numOfButton <= maxButton) numberOfButton = numOfButton;
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b0a      	cmp	r3, #10
 80004d6:	d803      	bhi.n	80004e0 <initButton+0x20>
 80004d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000508 <initButton+0x48>)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	7013      	strb	r3, [r2, #0]
 80004de:	e002      	b.n	80004e6 <initButton+0x26>
	else numberOfButton = maxButton;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <initButton+0x48>)
 80004e2:	220a      	movs	r2, #10
 80004e4:	701a      	strb	r2, [r3, #0]
	buttonTick = Tick;
 80004e6:	4a09      	ldr	r2, [pc, #36]	@ (800050c <initButton+0x4c>)
 80004e8:	79bb      	ldrb	r3, [r7, #6]
 80004ea:	7013      	strb	r3, [r2, #0]
	longPressDurationTime = durationForLongPress/buttonTick;
 80004ec:	88bb      	ldrh	r3, [r7, #4]
 80004ee:	4a07      	ldr	r2, [pc, #28]	@ (800050c <initButton+0x4c>)
 80004f0:	7812      	ldrb	r2, [r2, #0]
 80004f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <initButton+0x50>)
 80004fa:	801a      	strh	r2, [r3, #0]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000
 800050c:	200000bc 	.word	0x200000bc
 8000510:	20000032 	.word	0x20000032

08000514 <readPin>:

// Read button's state
GPIO_PinState readPin(uint8_t button){
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState result = GPIO_PIN_SET;
 800051e:	2301      	movs	r3, #1
 8000520:	73fb      	strb	r3, [r7, #15]
	switch(button){
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <readPin+0x1a>
 8000528:	2b01      	cmp	r3, #1
 800052a:	d007      	beq.n	800053c <readPin+0x28>
		break;
	case 1:
		result = HAL_GPIO_ReadPin(GPIOB, Button1_Pin);
		break;
	default:
		break;
 800052c:	e00e      	b.n	800054c <readPin+0x38>
		result = HAL_GPIO_ReadPin(GPIOB, Button0_Pin);
 800052e:	2110      	movs	r1, #16
 8000530:	4809      	ldr	r0, [pc, #36]	@ (8000558 <readPin+0x44>)
 8000532:	f001 ff67 	bl	8002404 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	73fb      	strb	r3, [r7, #15]
		break;
 800053a:	e007      	b.n	800054c <readPin+0x38>
		result = HAL_GPIO_ReadPin(GPIOB, Button1_Pin);
 800053c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000540:	4805      	ldr	r0, [pc, #20]	@ (8000558 <readPin+0x44>)
 8000542:	f001 ff5f 	bl	8002404 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	73fb      	strb	r3, [r7, #15]
		break;
 800054a:	bf00      	nop
	}
	return result;
 800054c:	7bfb      	ldrb	r3, [r7, #15]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40010c00 	.word	0x40010c00

0800055c <buttonReading>:

// Handle buttons (three times reading)
void buttonReading(void){
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < numberOfButton; i++){
 8000562:	2300      	movs	r3, #0
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	e052      	b.n	800060e <buttonReading+0xb2>
		debounceBuffer3[i] = debounceBuffer2[i];
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	492d      	ldr	r1, [pc, #180]	@ (8000624 <buttonReading+0xc8>)
 800056e:	5c89      	ldrb	r1, [r1, r2]
 8000570:	4a2d      	ldr	r2, [pc, #180]	@ (8000628 <buttonReading+0xcc>)
 8000572:	54d1      	strb	r1, [r2, r3]
		debounceBuffer2[i] = debounceBuffer1[i];
 8000574:	79fa      	ldrb	r2, [r7, #7]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	492c      	ldr	r1, [pc, #176]	@ (800062c <buttonReading+0xd0>)
 800057a:	5c89      	ldrb	r1, [r1, r2]
 800057c:	4a29      	ldr	r2, [pc, #164]	@ (8000624 <buttonReading+0xc8>)
 800057e:	54d1      	strb	r1, [r2, r3]
		debounceBuffer1[i] = readPin(i);
 8000580:	79fc      	ldrb	r4, [r7, #7]
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffc5 	bl	8000514 <readPin>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b27      	ldr	r3, [pc, #156]	@ (800062c <buttonReading+0xd0>)
 8000590:	551a      	strb	r2, [r3, r4]
		if((debounceBuffer1[i] == debounceBuffer2[i]) && (debounceBuffer2[i] == debounceBuffer3[i])){
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a25      	ldr	r2, [pc, #148]	@ (800062c <buttonReading+0xd0>)
 8000596:	5cd2      	ldrb	r2, [r2, r3]
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4922      	ldr	r1, [pc, #136]	@ (8000624 <buttonReading+0xc8>)
 800059c:	5ccb      	ldrb	r3, [r1, r3]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d10d      	bne.n	80005be <buttonReading+0x62>
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000624 <buttonReading+0xc8>)
 80005a6:	5cd2      	ldrb	r2, [r2, r3]
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	491f      	ldr	r1, [pc, #124]	@ (8000628 <buttonReading+0xcc>)
 80005ac:	5ccb      	ldrb	r3, [r1, r3]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d105      	bne.n	80005be <buttonReading+0x62>
			buttonBuffer[i] = debounceBuffer1[i];
 80005b2:	79fa      	ldrb	r2, [r7, #7]
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	491d      	ldr	r1, [pc, #116]	@ (800062c <buttonReading+0xd0>)
 80005b8:	5c89      	ldrb	r1, [r1, r2]
 80005ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000630 <buttonReading+0xd4>)
 80005bc:	54d1      	strb	r1, [r2, r3]
		}
		if(buttonBuffer[i] == buttonIsPressed){
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000630 <buttonReading+0xd4>)
 80005c2:	5cd3      	ldrb	r3, [r2, r3]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d116      	bne.n	80005f6 <buttonReading+0x9a>
			if(counterForLongPressButton[i] < longPressDurationTime){
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000634 <buttonReading+0xd8>)
 80005cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005d0:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <buttonReading+0xdc>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d209      	bcs.n	80005ec <buttonReading+0x90>
				counterForLongPressButton[i]++;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4a16      	ldr	r2, [pc, #88]	@ (8000634 <buttonReading+0xd8>)
 80005dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005e0:	3201      	adds	r2, #1
 80005e2:	b291      	uxth	r1, r2
 80005e4:	4a13      	ldr	r2, [pc, #76]	@ (8000634 <buttonReading+0xd8>)
 80005e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80005ea:	e00d      	b.n	8000608 <buttonReading+0xac>
			}else{
				flagForLongPressButton[i] = 1;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4a13      	ldr	r2, [pc, #76]	@ (800063c <buttonReading+0xe0>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	54d1      	strb	r1, [r2, r3]
 80005f4:	e008      	b.n	8000608 <buttonReading+0xac>
			}
		}else{
			counterForLongPressButton[i] = 0;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <buttonReading+0xd8>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPressButton[i] = 0;
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <buttonReading+0xe0>)
 8000604:	2100      	movs	r1, #0
 8000606:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < numberOfButton; i++){
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3301      	adds	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <buttonReading+0xe4>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3a7      	bcc.n	8000568 <buttonReading+0xc>
		}
	}
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bd90      	pop	{r4, r7, pc}
 8000622:	bf00      	nop
 8000624:	2000001c 	.word	0x2000001c
 8000628:	20000028 	.word	0x20000028
 800062c:	20000010 	.word	0x20000010
 8000630:	20000004 	.word	0x20000004
 8000634:	200000c0 	.word	0x200000c0
 8000638:	20000032 	.word	0x20000032
 800063c:	200000d4 	.word	0x200000d4
 8000640:	20000000 	.word	0x20000000

08000644 <isPressedOnButton>:

// Check if the button is pressed
unsigned char isPressedOnButton(uint8_t index){
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	if(index >= numberOfButton) return 0;
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <isPressedOnButton+0x34>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d301      	bcc.n	800065c <isPressedOnButton+0x18>
 8000658:	2300      	movs	r3, #0
 800065a:	e007      	b.n	800066c <isPressedOnButton+0x28>
	return (buttonBuffer[index] == buttonIsPressed) ? 1 : 0;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4a07      	ldr	r2, [pc, #28]	@ (800067c <isPressedOnButton+0x38>)
 8000660:	5cd3      	ldrb	r3, [r2, r3]
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf0c      	ite	eq
 8000666:	2301      	moveq	r3, #1
 8000668:	2300      	movne	r3, #0
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000
 800067c:	20000004 	.word	0x20000004

08000680 <isLongPressedOnButton>:

// Check if the button is pressed longer
unsigned char isLongPressedOnButton(uint8_t index){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	if(index >= numberOfButton) return 0xff;
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <isLongPressedOnButton+0x34>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	429a      	cmp	r2, r3
 8000692:	d301      	bcc.n	8000698 <isLongPressedOnButton+0x18>
 8000694:	23ff      	movs	r3, #255	@ 0xff
 8000696:	e007      	b.n	80006a8 <isLongPressedOnButton+0x28>
	return (flagForLongPressButton[index] == 1) ? 1 : 0;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	4a07      	ldr	r2, [pc, #28]	@ (80006b8 <isLongPressedOnButton+0x38>)
 800069c:	5cd3      	ldrb	r3, [r2, r3]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	bf0c      	ite	eq
 80006a2:	2301      	moveq	r3, #1
 80006a4:	2300      	movne	r3, #0
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	200000d4 	.word	0x200000d4

080006bc <hasJustPressedOnButton>:

static uint8_t lastSignalLongPress[maxButton];
static uint8_t currentSignalLongPress[maxButton];

// Check for the rising signal on press flag
uint8_t hasJustPressedOnButton(uint8_t index){
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	lastSignalPress[index] = currentSignalPress[index];
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	490f      	ldr	r1, [pc, #60]	@ (8000708 <hasJustPressedOnButton+0x4c>)
 80006cc:	5c89      	ldrb	r1, [r1, r2]
 80006ce:	4a0f      	ldr	r2, [pc, #60]	@ (800070c <hasJustPressedOnButton+0x50>)
 80006d0:	54d1      	strb	r1, [r2, r3]
	currentSignalPress[index] = isPressedOnButton(index);
 80006d2:	79fc      	ldrb	r4, [r7, #7]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffb4 	bl	8000644 <isPressedOnButton>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <hasJustPressedOnButton+0x4c>)
 80006e2:	551a      	strb	r2, [r3, r4]
	if(lastSignalPress[index]==0 && currentSignalPress[index]==1)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	4a09      	ldr	r2, [pc, #36]	@ (800070c <hasJustPressedOnButton+0x50>)
 80006e8:	5cd3      	ldrb	r3, [r2, r3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d106      	bne.n	80006fc <hasJustPressedOnButton+0x40>
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <hasJustPressedOnButton+0x4c>)
 80006f2:	5cd3      	ldrb	r3, [r2, r3]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d101      	bne.n	80006fc <hasJustPressedOnButton+0x40>
		return 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e000      	b.n	80006fe <hasJustPressedOnButton+0x42>
	return 0;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	bf00      	nop
 8000708:	200000ec 	.word	0x200000ec
 800070c:	200000e0 	.word	0x200000e0

08000710 <hasJustLongPressedOnButton>:

// Check for the rising signal on long press flag
uint8_t hasJustLongPressedOnButton(uint8_t index){
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	lastSignalLongPress[index] = currentSignalLongPress[index];
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	490f      	ldr	r1, [pc, #60]	@ (800075c <hasJustLongPressedOnButton+0x4c>)
 8000720:	5c89      	ldrb	r1, [r1, r2]
 8000722:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <hasJustLongPressedOnButton+0x50>)
 8000724:	54d1      	strb	r1, [r2, r3]
	currentSignalLongPress[index] = isLongPressedOnButton(index);
 8000726:	79fc      	ldrb	r4, [r7, #7]
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffa8 	bl	8000680 <isLongPressedOnButton>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <hasJustLongPressedOnButton+0x4c>)
 8000736:	551a      	strb	r2, [r3, r4]
	if(lastSignalLongPress[index]==0 && currentSignalLongPress[index]==1)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4a09      	ldr	r2, [pc, #36]	@ (8000760 <hasJustLongPressedOnButton+0x50>)
 800073c:	5cd3      	ldrb	r3, [r2, r3]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d106      	bne.n	8000750 <hasJustLongPressedOnButton+0x40>
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4a05      	ldr	r2, [pc, #20]	@ (800075c <hasJustLongPressedOnButton+0x4c>)
 8000746:	5cd3      	ldrb	r3, [r2, r3]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d101      	bne.n	8000750 <hasJustLongPressedOnButton+0x40>
		return 1;
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <hasJustLongPressedOnButton+0x42>
	return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	bf00      	nop
 800075c:	20000104 	.word	0x20000104
 8000760:	200000f8 	.word	0x200000f8

08000764 <updateLCD_ChangeToAuto>:

char row1[20] = "";
char row2[20] = "";

// Display on LCD the next mode is Automatic
void updateLCD_ChangeToAuto(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	sprintf(row1, "Changing to...");
 8000768:	490b      	ldr	r1, [pc, #44]	@ (8000798 <updateLCD_ChangeToAuto+0x34>)
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <updateLCD_ChangeToAuto+0x38>)
 800076c:	f005 f8ca 	bl	8005904 <siprintf>
	lcd_goto_XY(0, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fd94 	bl	80002a0 <lcd_goto_XY>
	lcd_send_string(row1);
 8000778:	4808      	ldr	r0, [pc, #32]	@ (800079c <updateLCD_ChangeToAuto+0x38>)
 800077a:	f7ff fd75 	bl	8000268 <lcd_send_string>

	sprintf(row2, "Auto Mode");
 800077e:	4908      	ldr	r1, [pc, #32]	@ (80007a0 <updateLCD_ChangeToAuto+0x3c>)
 8000780:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <updateLCD_ChangeToAuto+0x40>)
 8000782:	f005 f8bf 	bl	8005904 <siprintf>
	lcd_goto_XY(1, 4);
 8000786:	2104      	movs	r1, #4
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff fd89 	bl	80002a0 <lcd_goto_XY>
	lcd_send_string(row2);
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <updateLCD_ChangeToAuto+0x40>)
 8000790:	f7ff fd6a 	bl	8000268 <lcd_send_string>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	08006120 	.word	0x08006120
 800079c:	20000110 	.word	0x20000110
 80007a0:	08006130 	.word	0x08006130
 80007a4:	20000124 	.word	0x20000124

080007a8 <updateLCD_ChangeToModify>:

// Display on LCD the next mode is Modify
void updateLCD_ChangeToModify(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	sprintf(row1, "Changing to...");
 80007ac:	490b      	ldr	r1, [pc, #44]	@ (80007dc <updateLCD_ChangeToModify+0x34>)
 80007ae:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <updateLCD_ChangeToModify+0x38>)
 80007b0:	f005 f8a8 	bl	8005904 <siprintf>
	lcd_goto_XY(0, 0);
 80007b4:	2100      	movs	r1, #0
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fd72 	bl	80002a0 <lcd_goto_XY>
	lcd_send_string(row1);
 80007bc:	4808      	ldr	r0, [pc, #32]	@ (80007e0 <updateLCD_ChangeToModify+0x38>)
 80007be:	f7ff fd53 	bl	8000268 <lcd_send_string>

	sprintf(row2, "Modify Mode");
 80007c2:	4908      	ldr	r1, [pc, #32]	@ (80007e4 <updateLCD_ChangeToModify+0x3c>)
 80007c4:	4808      	ldr	r0, [pc, #32]	@ (80007e8 <updateLCD_ChangeToModify+0x40>)
 80007c6:	f005 f89d 	bl	8005904 <siprintf>
	lcd_goto_XY(1, 2);
 80007ca:	2102      	movs	r1, #2
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff fd67 	bl	80002a0 <lcd_goto_XY>
	lcd_send_string(row2);
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <updateLCD_ChangeToModify+0x40>)
 80007d4:	f7ff fd48 	bl	8000268 <lcd_send_string>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08006120 	.word	0x08006120
 80007e0:	20000110 	.word	0x20000110
 80007e4:	0800613c 	.word	0x0800613c
 80007e8:	20000124 	.word	0x20000124

080007ec <updateLCD_ChangeToManual>:

// Display on LCD the next mode is Manual
void updateLCD_ChangeToManual(void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	sprintf(row1, "Changing to...");
 80007f0:	490b      	ldr	r1, [pc, #44]	@ (8000820 <updateLCD_ChangeToManual+0x34>)
 80007f2:	480c      	ldr	r0, [pc, #48]	@ (8000824 <updateLCD_ChangeToManual+0x38>)
 80007f4:	f005 f886 	bl	8005904 <siprintf>
	lcd_goto_XY(0, 0);
 80007f8:	2100      	movs	r1, #0
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fd50 	bl	80002a0 <lcd_goto_XY>
	lcd_send_string(row1);
 8000800:	4808      	ldr	r0, [pc, #32]	@ (8000824 <updateLCD_ChangeToManual+0x38>)
 8000802:	f7ff fd31 	bl	8000268 <lcd_send_string>

	sprintf(row2, "Manual Mode");
 8000806:	4908      	ldr	r1, [pc, #32]	@ (8000828 <updateLCD_ChangeToManual+0x3c>)
 8000808:	4808      	ldr	r0, [pc, #32]	@ (800082c <updateLCD_ChangeToManual+0x40>)
 800080a:	f005 f87b 	bl	8005904 <siprintf>
	lcd_goto_XY(1, 2);
 800080e:	2102      	movs	r1, #2
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff fd45 	bl	80002a0 <lcd_goto_XY>
	lcd_send_string(row2);
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <updateLCD_ChangeToManual+0x40>)
 8000818:	f7ff fd26 	bl	8000268 <lcd_send_string>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08006120 	.word	0x08006120
 8000824:	20000110 	.word	0x20000110
 8000828:	08006148 	.word	0x08006148
 800082c:	20000124 	.word	0x20000124

08000830 <updateLCD_ManualMode>:

// Display on LCD remaining time in Manual
void updateLCD_ManualMode(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	lcd_goto_XY(0, 0);
 8000834:	2100      	movs	r1, #0
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff fd32 	bl	80002a0 <lcd_goto_XY>
	sprintf(row1, "Manual mode");
 800083c:	490b      	ldr	r1, [pc, #44]	@ (800086c <updateLCD_ManualMode+0x3c>)
 800083e:	480c      	ldr	r0, [pc, #48]	@ (8000870 <updateLCD_ManualMode+0x40>)
 8000840:	f005 f860 	bl	8005904 <siprintf>
	lcd_send_string(row1);
 8000844:	480a      	ldr	r0, [pc, #40]	@ (8000870 <updateLCD_ManualMode+0x40>)
 8000846:	f7ff fd0f 	bl	8000268 <lcd_send_string>

	lcd_goto_XY(1, 0);
 800084a:	2100      	movs	r1, #0
 800084c:	2001      	movs	r0, #1
 800084e:	f7ff fd27 	bl	80002a0 <lcd_goto_XY>
	sprintf(row2, "Remain:    %d ", getCounter());
 8000852:	f000 f91d 	bl	8000a90 <getCounter>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4906      	ldr	r1, [pc, #24]	@ (8000874 <updateLCD_ManualMode+0x44>)
 800085c:	4806      	ldr	r0, [pc, #24]	@ (8000878 <updateLCD_ManualMode+0x48>)
 800085e:	f005 f851 	bl	8005904 <siprintf>
	lcd_send_string(row2);
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <updateLCD_ManualMode+0x48>)
 8000864:	f7ff fd00 	bl	8000268 <lcd_send_string>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08006154 	.word	0x08006154
 8000870:	20000110 	.word	0x20000110
 8000874:	08006160 	.word	0x08006160
 8000878:	20000124 	.word	0x20000124

0800087c <updateLCD_TrafficTime>:

// Display on LCD current time counter
void updateLCD_TrafficTime(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	lcd_goto_XY(0, 0);
 8000880:	2100      	movs	r1, #0
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fd0c 	bl	80002a0 <lcd_goto_XY>
	sprintf(row1, "Lane X:    %d ", getTimeCounter(X));
 8000888:	2000      	movs	r0, #0
 800088a:	f000 f89b 	bl	80009c4 <getTimeCounter>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	490c      	ldr	r1, [pc, #48]	@ (80008c4 <updateLCD_TrafficTime+0x48>)
 8000894:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <updateLCD_TrafficTime+0x4c>)
 8000896:	f005 f835 	bl	8005904 <siprintf>
	lcd_send_string(row1);
 800089a:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <updateLCD_TrafficTime+0x4c>)
 800089c:	f7ff fce4 	bl	8000268 <lcd_send_string>
	lcd_goto_XY(1, 0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff fcfc 	bl	80002a0 <lcd_goto_XY>
	sprintf(row2, "Lane Y:    %d ", getTimeCounter(Y));
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 f88b 	bl	80009c4 <getTimeCounter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461a      	mov	r2, r3
 80008b2:	4906      	ldr	r1, [pc, #24]	@ (80008cc <updateLCD_TrafficTime+0x50>)
 80008b4:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <updateLCD_TrafficTime+0x54>)
 80008b6:	f005 f825 	bl	8005904 <siprintf>
	lcd_send_string(row2);
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <updateLCD_TrafficTime+0x54>)
 80008bc:	f7ff fcd4 	bl	8000268 <lcd_send_string>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08006170 	.word	0x08006170
 80008c8:	20000110 	.word	0x20000110
 80008cc:	08006180 	.word	0x08006180
 80008d0:	20000124 	.word	0x20000124

080008d4 <updateLCD_ModifyRed>:

// Display info on LCD about Modify Red time
void updateLCD_ModifyRed(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	lcd_goto_XY(0, 0);
 80008d8:	2100      	movs	r1, #0
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fce0 	bl	80002a0 <lcd_goto_XY>
	sprintf(row1, "Modify on Red");
 80008e0:	490b      	ldr	r1, [pc, #44]	@ (8000910 <updateLCD_ModifyRed+0x3c>)
 80008e2:	480c      	ldr	r0, [pc, #48]	@ (8000914 <updateLCD_ModifyRed+0x40>)
 80008e4:	f005 f80e 	bl	8005904 <siprintf>
	lcd_send_string(row1);
 80008e8:	480a      	ldr	r0, [pc, #40]	@ (8000914 <updateLCD_ModifyRed+0x40>)
 80008ea:	f7ff fcbd 	bl	8000268 <lcd_send_string>

	lcd_goto_XY(1, 0);
 80008ee:	2100      	movs	r1, #0
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fcd5 	bl	80002a0 <lcd_goto_XY>
	sprintf(row2, "Value:    %d  ", getCounter());
 80008f6:	f000 f8cb 	bl	8000a90 <getCounter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	461a      	mov	r2, r3
 80008fe:	4906      	ldr	r1, [pc, #24]	@ (8000918 <updateLCD_ModifyRed+0x44>)
 8000900:	4806      	ldr	r0, [pc, #24]	@ (800091c <updateLCD_ModifyRed+0x48>)
 8000902:	f004 ffff 	bl	8005904 <siprintf>
	lcd_send_string(row2);
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <updateLCD_ModifyRed+0x48>)
 8000908:	f7ff fcae 	bl	8000268 <lcd_send_string>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08006190 	.word	0x08006190
 8000914:	20000110 	.word	0x20000110
 8000918:	080061a0 	.word	0x080061a0
 800091c:	20000124 	.word	0x20000124

08000920 <updateLCD_ModifyGreen>:

// Display info on LCD about Modify Green time
void updateLCD_ModifyGreen(void){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	lcd_goto_XY(0, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff fcba 	bl	80002a0 <lcd_goto_XY>
	sprintf(row1, "Modify on Green");
 800092c:	490b      	ldr	r1, [pc, #44]	@ (800095c <updateLCD_ModifyGreen+0x3c>)
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <updateLCD_ModifyGreen+0x40>)
 8000930:	f004 ffe8 	bl	8005904 <siprintf>
	lcd_send_string(row1);
 8000934:	480a      	ldr	r0, [pc, #40]	@ (8000960 <updateLCD_ModifyGreen+0x40>)
 8000936:	f7ff fc97 	bl	8000268 <lcd_send_string>

	lcd_goto_XY(1, 0);
 800093a:	2100      	movs	r1, #0
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fcaf 	bl	80002a0 <lcd_goto_XY>
	sprintf(row2, "Value:    %d  ", getCounter());
 8000942:	f000 f8a5 	bl	8000a90 <getCounter>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4906      	ldr	r1, [pc, #24]	@ (8000964 <updateLCD_ModifyGreen+0x44>)
 800094c:	4806      	ldr	r0, [pc, #24]	@ (8000968 <updateLCD_ModifyGreen+0x48>)
 800094e:	f004 ffd9 	bl	8005904 <siprintf>
	lcd_send_string(row2);
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <updateLCD_ModifyGreen+0x48>)
 8000954:	f7ff fc88 	bl	8000268 <lcd_send_string>
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	080061b0 	.word	0x080061b0
 8000960:	20000110 	.word	0x20000110
 8000964:	080061a0 	.word	0x080061a0
 8000968:	20000124 	.word	0x20000124

0800096c <setSystemTime>:
uint8_t timeFlag = 0;

// Set new value for led[color]
// color: Red, Green, Yellow
// value from counter variable
void setSystemTime(uint8_t color){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	systemTime[color] = counter;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <setSystemTime+0x20>)
 800097a:	7811      	ldrb	r1, [r2, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <setSystemTime+0x24>)
 800097e:	54d1      	strb	r1, [r2, r3]
	resetCounter();
 8000980:	f000 f87a 	bl	8000a78 <resetCounter>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000138 	.word	0x20000138
 8000990:	20000034 	.word	0x20000034

08000994 <resetTimeCounter>:

// Reset timeCounter[lane] to systemTime[color]
// lane: X, Y
// color: Red, Green, Yellow
void resetTimeCounter(uint8_t lane, uint8_t color){
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71bb      	strb	r3, [r7, #6]
	timeCounter[lane] = systemTime[color];
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4904      	ldr	r1, [pc, #16]	@ (80009bc <resetTimeCounter+0x28>)
 80009aa:	5c89      	ldrb	r1, [r1, r2]
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <resetTimeCounter+0x2c>)
 80009ae:	54d1      	strb	r1, [r2, r3]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000034 	.word	0x20000034
 80009c0:	20000038 	.word	0x20000038

080009c4 <getTimeCounter>:
	timeCounter[Y] = 0;
}

// Return timeCounter[lane]
// lane: X, Y
uint8_t getTimeCounter(uint8_t lane){
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	return timeCounter[lane];
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4a03      	ldr	r2, [pc, #12]	@ (80009e0 <getTimeCounter+0x1c>)
 80009d2:	5cd3      	ldrb	r3, [r2, r3]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000038 	.word	0x20000038

080009e4 <decreaseTimeCounter>:

// Decrease timeCounter[lane]
// lane: X, Y
void decreaseTimeCounter(void){
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	timeCounter[X]--;
 80009e8:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <decreaseTimeCounter+0x24>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <decreaseTimeCounter+0x24>)
 80009f2:	701a      	strb	r2, [r3, #0]
	timeCounter[Y]--;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <decreaseTimeCounter+0x24>)
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b02      	ldr	r3, [pc, #8]	@ (8000a08 <decreaseTimeCounter+0x24>)
 80009fe:	705a      	strb	r2, [r3, #1]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000038 	.word	0x20000038

08000a0c <increaseCounter>:

// Increase counter variable when user presses button in Modify mode
void increaseCounter(void){
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	counter++;
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <increaseCounter+0x18>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b02      	ldr	r3, [pc, #8]	@ (8000a24 <increaseCounter+0x18>)
 8000a1a:	701a      	strb	r2, [r3, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000138 	.word	0x20000138

08000a28 <decreaseCounter>:

// Decrease counter variable
void decreaseCounter(void){
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	counter--;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <decreaseCounter+0x18>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b02      	ldr	r3, [pc, #8]	@ (8000a40 <decreaseCounter+0x18>)
 8000a36:	701a      	strb	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000138 	.word	0x20000138

08000a44 <setManualCounter>:

// Set counter to 20
void setManualCounter(void){
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	counter = 20;
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <setManualCounter+0x14>)
 8000a4a:	2214      	movs	r2, #20
 8000a4c:	701a      	strb	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000138 	.word	0x20000138

08000a5c <extendManualCounter>:
// Plus counter by 20
void extendManualCounter(void){
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	counter += 20;
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <extendManualCounter+0x18>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	3314      	adds	r3, #20
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b02      	ldr	r3, [pc, #8]	@ (8000a74 <extendManualCounter+0x18>)
 8000a6a:	701a      	strb	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	20000138 	.word	0x20000138

08000a78 <resetCounter>:

// Set counter to 0
void resetCounter(void){
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	counter = 0;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <resetCounter+0x14>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000138 	.word	0x20000138

08000a90 <getCounter>:

// Return counter value
uint8_t getCounter(void){
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	return counter;
 8000a94:	4b02      	ldr	r3, [pc, #8]	@ (8000aa0 <getCounter+0x10>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	20000138 	.word	0x20000138

08000aa4 <checkSystemTime>:

// Check systemTime after Modify mode
void checkSystemTime(void){
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	if(systemTime[Red] != systemTime[Green] + systemTime[Yellow]){
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <checkSystemTime+0x54>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <checkSystemTime+0x54>)
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <checkSystemTime+0x54>)
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	440b      	add	r3, r1
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d018      	beq.n	8000af0 <checkSystemTime+0x4c>
		if(systemTime[Green] >= systemTime[Red])
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <checkSystemTime+0x54>)
 8000ac0:	785a      	ldrb	r2, [r3, #1]
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <checkSystemTime+0x54>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d30a      	bcc.n	8000ae0 <checkSystemTime+0x3c>
			systemTime[Green] = (systemTime[Red]/5)*4;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <checkSystemTime+0x54>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4a0b      	ldr	r2, [pc, #44]	@ (8000afc <checkSystemTime+0x58>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <checkSystemTime+0x54>)
 8000ade:	705a      	strb	r2, [r3, #1]
		systemTime[Yellow] = systemTime[Red] - systemTime[Green];
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <checkSystemTime+0x54>)
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <checkSystemTime+0x54>)
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b02      	ldr	r3, [pc, #8]	@ (8000af8 <checkSystemTime+0x54>)
 8000aee:	709a      	strb	r2, [r3, #2]
	}
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	20000034 	.word	0x20000034
 8000afc:	cccccccd 	.word	0xcccccccd

08000b00 <checkCounter>:

// Check if the counter < 100
void checkCounter(void){
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	if(counter >= 100) counter %= 100;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <checkCounter+0x30>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b63      	cmp	r3, #99	@ 0x63
 8000b0a:	d90c      	bls.n	8000b26 <checkCounter+0x26>
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <checkCounter+0x30>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <checkCounter+0x34>)
 8000b12:	fba2 1203 	umull	r1, r2, r2, r3
 8000b16:	0952      	lsrs	r2, r2, #5
 8000b18:	2164      	movs	r1, #100	@ 0x64
 8000b1a:	fb01 f202 	mul.w	r2, r1, r2
 8000b1e:	1a9b      	subs	r3, r3, r2
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <checkCounter+0x30>)
 8000b24:	701a      	strb	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000138 	.word	0x20000138
 8000b34:	51eb851f 	.word	0x51eb851f

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f001 f8c4 	bl	8001cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f846 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f000 f900 	bl	8000d48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b48:	f000 f884 	bl	8000c54 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b4c:	f000 f8b0 	bl	8000cb0 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b50:	4818      	ldr	r0, [pc, #96]	@ (8000bb4 <main+0x7c>)
 8000b52:	f004 fa77 	bl	8005044 <HAL_TIM_Base_Start_IT>
  initScheduler(10);
 8000b56:	200a      	movs	r0, #10
 8000b58:	f000 fc9a 	bl	8001490 <initScheduler>
  lcd_init();
 8000b5c:	f7ff fb56 	bl	800020c <lcd_init>
  initButton(2, 1000, 10);
 8000b60:	220a      	movs	r2, #10
 8000b62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b66:	2002      	movs	r0, #2
 8000b68:	f7ff fcaa 	bl	80004c0 <initButton>
  addTaskSch(buttonReading, 0, 10);
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4811      	ldr	r0, [pc, #68]	@ (8000bb8 <main+0x80>)
 8000b72:	f000 fc9d 	bl	80014b0 <addTaskSch>
  addTaskSch(autoModeFSM, 30, 100);
 8000b76:	2264      	movs	r2, #100	@ 0x64
 8000b78:	211e      	movs	r1, #30
 8000b7a:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <main+0x84>)
 8000b7c:	f000 fc98 	bl	80014b0 <addTaskSch>
  addTaskSch(manualModeFSM, 30, 30);
 8000b80:	221e      	movs	r2, #30
 8000b82:	211e      	movs	r1, #30
 8000b84:	480e      	ldr	r0, [pc, #56]	@ (8000bc0 <main+0x88>)
 8000b86:	f000 fc93 	bl	80014b0 <addTaskSch>
  addTaskSch(modifyModeFSM, 20, 30);
 8000b8a:	221e      	movs	r2, #30
 8000b8c:	2114      	movs	r1, #20
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <main+0x8c>)
 8000b90:	f000 fc8e 	bl	80014b0 <addTaskSch>
	addTaskSch(updateLCD_TrafficTime, 100, 300);
 8000b94:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000b98:	2164      	movs	r1, #100	@ 0x64
 8000b9a:	480b      	ldr	r0, [pc, #44]	@ (8000bc8 <main+0x90>)
 8000b9c:	f000 fc88 	bl	80014b0 <addTaskSch>
  addTaskSch(decreaseTimeCounter, 300, 1000);
 8000ba0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ba4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000ba8:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <main+0x94>)
 8000baa:	f000 fc81 	bl	80014b0 <addTaskSch>
  while (1)
  {
	  dispatchTaskSch();
 8000bae:	f000 fde5 	bl	800177c <dispatchTaskSch>
 8000bb2:	e7fc      	b.n	8000bae <main+0x76>
 8000bb4:	20000190 	.word	0x20000190
 8000bb8:	0800055d 	.word	0x0800055d
 8000bbc:	0800035d 	.word	0x0800035d
 8000bc0:	08001045 	.word	0x08001045
 8000bc4:	080011a5 	.word	0x080011a5
 8000bc8:	0800087d 	.word	0x0800087d
 8000bcc:	080009e5 	.word	0x080009e5

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	@ 0x40
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2228      	movs	r2, #40	@ 0x28
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 feb0 	bl	8005944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c02:	2300      	movs	r3, #0
 8000c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c06:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 0318 	add.w	r3, r7, #24
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fdcb 	bl	80047ac <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c1c:	f000 f950 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c20:	230f      	movs	r3, #15
 8000c22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c24:	2302      	movs	r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 f838 	bl	8004cb0 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c46:	f000 f93b 	bl	8000ec0 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3740      	adds	r7, #64	@ 0x40
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <MX_I2C1_Init+0x54>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c60:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <MX_I2C1_Init+0x58>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 82;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c6c:	2252      	movs	r2, #82	@ 0x52
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_I2C1_Init+0x50>)
 8000c92:	f001 fc09 	bl	80024a8 <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 f910 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000013c 	.word	0x2000013c
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	000186a0 	.word	0x000186a0

08000cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000cce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000cd6:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000cda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf4:	4813      	ldr	r0, [pc, #76]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000cf6:	f004 f955 	bl	8004fa4 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d00:	f000 f8de 	bl	8000ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000d12:	f004 fad9 	bl	80052c8 <HAL_TIM_ConfigClockSource>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d1c:	f000 f8d0 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_TIM2_Init+0x94>)
 8000d2e:	f004 fcbb 	bl	80056a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d38:	f000 f8c2 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000190 	.word	0x20000190

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a4d      	ldr	r2, [pc, #308]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b4b      	ldr	r3, [pc, #300]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b48      	ldr	r3, [pc, #288]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a47      	ldr	r2, [pc, #284]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b45      	ldr	r3, [pc, #276]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b42      	ldr	r3, [pc, #264]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a41      	ldr	r2, [pc, #260]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b3f      	ldr	r3, [pc, #252]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b3c      	ldr	r3, [pc, #240]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a3b      	ldr	r2, [pc, #236]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b39      	ldr	r3, [pc, #228]	@ (8000e98 <MX_GPIO_Init+0x150>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LaneY_B_Pin|LaneY_A_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000dc2:	4836      	ldr	r0, [pc, #216]	@ (8000e9c <MX_GPIO_Init+0x154>)
 8000dc4:	f001 fb35 	bl	8002432 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LaneX_B_GPIO_Port, LaneX_B_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	4834      	ldr	r0, [pc, #208]	@ (8000ea0 <MX_GPIO_Init+0x158>)
 8000dce:	f001 fb30 	bl	8002432 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LaneX_A_GPIO_Port, LaneX_A_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2140      	movs	r1, #64	@ 0x40
 8000dd6:	4833      	ldr	r0, [pc, #204]	@ (8000ea4 <MX_GPIO_Init+0x15c>)
 8000dd8:	f001 fb2b 	bl	8002432 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <MX_GPIO_Init+0x160>)
 8000de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	482b      	ldr	r0, [pc, #172]	@ (8000ea0 <MX_GPIO_Init+0x158>)
 8000df2:	f001 f983 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000df6:	230c      	movs	r3, #12
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	4824      	ldr	r0, [pc, #144]	@ (8000e9c <MX_GPIO_Init+0x154>)
 8000e0a:	f001 f977 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LaneY_B_Pin LaneY_A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LaneY_B_Pin|LaneY_A_Pin;
 8000e0e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	481d      	ldr	r0, [pc, #116]	@ (8000e9c <MX_GPIO_Init+0x154>)
 8000e28:	f001 f968 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button0_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button0_Pin;
 8000e2c:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4818      	ldr	r0, [pc, #96]	@ (8000ea4 <MX_GPIO_Init+0x15c>)
 8000e42:	f001 f95b 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LaneX_B_Pin */
  GPIO_InitStruct.Pin = LaneX_B_Pin;
 8000e46:	2380      	movs	r3, #128	@ 0x80
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LaneX_B_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4810      	ldr	r0, [pc, #64]	@ (8000ea0 <MX_GPIO_Init+0x158>)
 8000e5e:	f001 f94d 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LaneX_A_Pin */
  GPIO_InitStruct.Pin = LaneX_A_Pin;
 8000e62:	2340      	movs	r3, #64	@ 0x40
 8000e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LaneX_A_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480a      	ldr	r0, [pc, #40]	@ (8000ea4 <MX_GPIO_Init+0x15c>)
 8000e7a:	f001 f93f 	bl	80020fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2028      	movs	r0, #40	@ 0x28
 8000e84:	f001 f87d 	bl	8001f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e88:	2028      	movs	r0, #40	@ 0x28
 8000e8a:	f001 f896 	bl	8001fba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	10110000 	.word	0x10110000

08000eac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	updateSch();
 8000eb4:	f000 fc40 	bl	8001738 <updateSch>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <Error_Handler+0x8>

08000ecc <remainingTimeExpired>:
 *      Author: phamgialuong
 */

#include "manualModeFSM.h"

void remainingTimeExpired(void){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	deleteTaskSch(updateLCD_ManualMode);
 8000ed0:	4811      	ldr	r0, [pc, #68]	@ (8000f18 <remainingTimeExpired+0x4c>)
 8000ed2:	f000 fbb9 	bl	8001648 <deleteTaskSch>
	deleteTaskSch(decreaseCounter);
 8000ed6:	4811      	ldr	r0, [pc, #68]	@ (8000f1c <remainingTimeExpired+0x50>)
 8000ed8:	f000 fbb6 	bl	8001648 <deleteTaskSch>
	// Print change mode info
	lcd_clear_display();
 8000edc:	f7ff f9d9 	bl	8000292 <lcd_clear_display>
	addTaskSch(updateLCD_ChangeToAuto, 50, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2132      	movs	r1, #50	@ 0x32
 8000ee4:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <remainingTimeExpired+0x54>)
 8000ee6:	f000 fae3 	bl	80014b0 <addTaskSch>
	// Prepare for next mode
	addTaskSch(lcd_clear_display, 2000, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000ef0:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <remainingTimeExpired+0x58>)
 8000ef2:	f000 fadd 	bl	80014b0 <addTaskSch>
	addTaskSch(updateLCD_TrafficTime, 2100, 300);
 8000ef6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000efa:	f640 0134 	movw	r1, #2100	@ 0x834
 8000efe:	480a      	ldr	r0, [pc, #40]	@ (8000f28 <remainingTimeExpired+0x5c>)
 8000f00:	f000 fad6 	bl	80014b0 <addTaskSch>
	addTaskSch(decreaseTimeCounter, 2100, 1000);
 8000f04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f08:	f640 0134 	movw	r1, #2100	@ 0x834
 8000f0c:	4807      	ldr	r0, [pc, #28]	@ (8000f2c <remainingTimeExpired+0x60>)
 8000f0e:	f000 facf 	bl	80014b0 <addTaskSch>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	08000831 	.word	0x08000831
 8000f1c:	08000a29 	.word	0x08000a29
 8000f20:	08000765 	.word	0x08000765
 8000f24:	08000293 	.word	0x08000293
 8000f28:	0800087d 	.word	0x0800087d
 8000f2c:	080009e5 	.word	0x080009e5

08000f30 <changeToModifyMode>:

void changeToModifyMode(void){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	deleteTaskSch(updateLCD_ManualMode);
 8000f34:	4812      	ldr	r0, [pc, #72]	@ (8000f80 <changeToModifyMode+0x50>)
 8000f36:	f000 fb87 	bl	8001648 <deleteTaskSch>
	deleteTaskSch(decreaseCounter);
 8000f3a:	4812      	ldr	r0, [pc, #72]	@ (8000f84 <changeToModifyMode+0x54>)
 8000f3c:	f000 fb84 	bl	8001648 <deleteTaskSch>
	// Print change mode info
	lcd_clear_display();
 8000f40:	f7ff f9a7 	bl	8000292 <lcd_clear_display>
	addTaskSch(updateLCD_ChangeToModify, 50, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2132      	movs	r1, #50	@ 0x32
 8000f48:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <changeToModifyMode+0x58>)
 8000f4a:	f000 fab1 	bl	80014b0 <addTaskSch>
	// Prepare for next mode
	addTaskSch(lcd_clear_display, 2000, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000f54:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <changeToModifyMode+0x5c>)
 8000f56:	f000 faab 	bl	80014b0 <addTaskSch>
	addTaskSch(updateLCD_ModifyRed, 2100, 300);
 8000f5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f5e:	f640 0134 	movw	r1, #2100	@ 0x834
 8000f62:	480b      	ldr	r0, [pc, #44]	@ (8000f90 <changeToModifyMode+0x60>)
 8000f64:	f000 faa4 	bl	80014b0 <addTaskSch>
	addTaskSch(blinkRedLeds, 200, 250);
 8000f68:	22fa      	movs	r2, #250	@ 0xfa
 8000f6a:	21c8      	movs	r1, #200	@ 0xc8
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <changeToModifyMode+0x64>)
 8000f6e:	f000 fa9f 	bl	80014b0 <addTaskSch>
	resetCounter();
 8000f72:	f7ff fd81 	bl	8000a78 <resetCounter>
	modifyState = WaitRed;
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <changeToModifyMode+0x68>)
 8000f78:	220a      	movs	r2, #10
 8000f7a:	701a      	strb	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08000831 	.word	0x08000831
 8000f84:	08000a29 	.word	0x08000a29
 8000f88:	080007a9 	.word	0x080007a9
 8000f8c:	08000293 	.word	0x08000293
 8000f90:	080008d5 	.word	0x080008d5
 8000f94:	08001bd9 	.word	0x08001bd9
 8000f98:	2000003b 	.word	0x2000003b

08000f9c <changeToAmberState>:

void changeToAmberState(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	deleteTaskSch(updateLCD_ManualMode);
 8000fa0:	480d      	ldr	r0, [pc, #52]	@ (8000fd8 <changeToAmberState+0x3c>)
 8000fa2:	f000 fb51 	bl	8001648 <deleteTaskSch>
	// Prepare for next state
	resetTimeCounter(X, Yellow);
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fcf3 	bl	8000994 <resetTimeCounter>
	resetTimeCounter(Y, Yellow);
 8000fae:	2102      	movs	r1, #2
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff fcef 	bl	8000994 <resetTimeCounter>
	lcd_clear_display();
 8000fb6:	f7ff f96c 	bl	8000292 <lcd_clear_display>
	addTaskSch(updateLCD_TrafficTime, 100, 300);
 8000fba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fbe:	2164      	movs	r1, #100	@ 0x64
 8000fc0:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <changeToAmberState+0x40>)
 8000fc2:	f000 fa75 	bl	80014b0 <addTaskSch>
	addTaskSch(decreaseTimeCounter, 1000, 1000);
 8000fc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fce:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <changeToAmberState+0x44>)
 8000fd0:	f000 fa6e 	bl	80014b0 <addTaskSch>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	08000831 	.word	0x08000831
 8000fdc:	0800087d 	.word	0x0800087d
 8000fe0:	080009e5 	.word	0x080009e5

08000fe4 <changeToNextState>:

void changeToNextState(uint8_t x, uint8_t y){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	deleteTaskSch(updateLCD_TrafficTime);
 8000ff4:	4810      	ldr	r0, [pc, #64]	@ (8001038 <changeToNextState+0x54>)
 8000ff6:	f000 fb27 	bl	8001648 <deleteTaskSch>
	lcd_clear_display();
 8000ffa:	f7ff f94a 	bl	8000292 <lcd_clear_display>
	addTaskSch(updateLCD_ManualMode, 100, 300);
 8000ffe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001002:	2164      	movs	r1, #100	@ 0x64
 8001004:	480d      	ldr	r0, [pc, #52]	@ (800103c <changeToNextState+0x58>)
 8001006:	f000 fa53 	bl	80014b0 <addTaskSch>
	addTaskSch(decreaseCounter, 100, 1000);
 800100a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800100e:	2164      	movs	r1, #100	@ 0x64
 8001010:	480b      	ldr	r0, [pc, #44]	@ (8001040 <changeToNextState+0x5c>)
 8001012:	f000 fa4d 	bl	80014b0 <addTaskSch>
	setManualCounter();
 8001016:	f7ff fd15 	bl	8000a44 <setManualCounter>
	turnLed(X, x);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4619      	mov	r1, r3
 800101e:	2000      	movs	r0, #0
 8001020:	f000 fd62 	bl	8001ae8 <turnLed>
	turnLed(Y, y);
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	4619      	mov	r1, r3
 8001028:	2001      	movs	r0, #1
 800102a:	f000 fd5d 	bl	8001ae8 <turnLed>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	0800087d 	.word	0x0800087d
 800103c:	08000831 	.word	0x08000831
 8001040:	08000a29 	.word	0x08000a29

08001044 <manualModeFSM>:

void manualModeFSM(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	switch(manualState){
 8001048:	4b54      	ldr	r3, [pc, #336]	@ (800119c <manualModeFSM+0x158>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3b06      	subs	r3, #6
 800104e:	2b03      	cmp	r3, #3
 8001050:	f200 8098 	bhi.w	8001184 <manualModeFSM+0x140>
 8001054:	a201      	add	r2, pc, #4	@ (adr r2, 800105c <manualModeFSM+0x18>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	0800106d 	.word	0x0800106d
 8001060:	080010dd 	.word	0x080010dd
 8001064:	080010f9 	.word	0x080010f9
 8001068:	08001169 	.word	0x08001169
	case Man_RedGreen:
		// Extend remaining time
		if(hasJustPressedOnButton(1)){
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fb25 	bl	80006bc <hasJustPressedOnButton>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <manualModeFSM+0x38>
			extendManualCounter();
 8001078:	f7ff fcf0 	bl	8000a5c <extendManualCounter>
		}
		// Remaining time expired
		if(getCounter() <= 0){
 800107c:	f7ff fd08 	bl	8000a90 <getCounter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10f      	bne.n	80010a6 <manualModeFSM+0x62>
			remainingTimeExpired();
 8001086:	f7ff ff21 	bl	8000ecc <remainingTimeExpired>
			resetTimeCounter(X, Red);
 800108a:	2100      	movs	r1, #0
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fc81 	bl	8000994 <resetTimeCounter>
			resetTimeCounter(Y, Green);
 8001092:	2101      	movs	r1, #1
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff fc7d 	bl	8000994 <resetTimeCounter>
			autoState = Auto_RedGreen;
 800109a:	4b41      	ldr	r3, [pc, #260]	@ (80011a0 <manualModeFSM+0x15c>)
 800109c:	2202      	movs	r2, #2
 800109e:	701a      	strb	r2, [r3, #0]
			manualState = Sleep;
 80010a0:	4b3e      	ldr	r3, [pc, #248]	@ (800119c <manualModeFSM+0x158>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
		}
		// Change to Modify mode
		if(hasJustLongPressedOnButton(0)){
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff fb32 	bl	8000710 <hasJustLongPressedOnButton>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <manualModeFSM+0x78>
			changeToModifyMode();
 80010b2:	f7ff ff3d 	bl	8000f30 <changeToModifyMode>
			manualState = Sleep;
 80010b6:	4b39      	ldr	r3, [pc, #228]	@ (800119c <manualModeFSM+0x158>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
		}
		// Change to next state
		if(hasJustLongPressedOnButton(1)){
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff fb27 	bl	8000710 <hasJustLongPressedOnButton>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d05f      	beq.n	8001188 <manualModeFSM+0x144>
			changeToAmberState();
 80010c8:	f7ff ff68 	bl	8000f9c <changeToAmberState>
			turnLed(Y, Yellow);
 80010cc:	2102      	movs	r1, #2
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 fd0a 	bl	8001ae8 <turnLed>
			manualState = Man_RedYellow;
 80010d4:	4b31      	ldr	r3, [pc, #196]	@ (800119c <manualModeFSM+0x158>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010da:	e055      	b.n	8001188 <manualModeFSM+0x144>
	case Man_RedYellow:
		if(getTimeCounter(X) <= 0){
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fc71 	bl	80009c4 <getTimeCounter>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d151      	bne.n	800118c <manualModeFSM+0x148>
			changeToNextState(Green, Red);
 80010e8:	2100      	movs	r1, #0
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff ff7a 	bl	8000fe4 <changeToNextState>
			manualState = Man_GreenRed;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	@ (800119c <manualModeFSM+0x158>)
 80010f2:	2208      	movs	r2, #8
 80010f4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010f6:	e049      	b.n	800118c <manualModeFSM+0x148>
	case Man_GreenRed:
		// Extend remaining time
		if(hasJustPressedOnButton(1)){
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff fadf 	bl	80006bc <hasJustPressedOnButton>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <manualModeFSM+0xc4>
			extendManualCounter();
 8001104:	f7ff fcaa 	bl	8000a5c <extendManualCounter>
		}
		// Remaining time expired
		if(getCounter() <= 0){
 8001108:	f7ff fcc2 	bl	8000a90 <getCounter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10f      	bne.n	8001132 <manualModeFSM+0xee>
			remainingTimeExpired();
 8001112:	f7ff fedb 	bl	8000ecc <remainingTimeExpired>
			resetTimeCounter(X, Green);
 8001116:	2101      	movs	r1, #1
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fc3b 	bl	8000994 <resetTimeCounter>
			resetTimeCounter(Y, Red);
 800111e:	2100      	movs	r1, #0
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff fc37 	bl	8000994 <resetTimeCounter>
			autoState = Auto_GreenRed;
 8001126:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <manualModeFSM+0x15c>)
 8001128:	2204      	movs	r2, #4
 800112a:	701a      	strb	r2, [r3, #0]
			manualState = Sleep;
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <manualModeFSM+0x158>)
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
		}
		// Change to Modify mode
		if(hasJustLongPressedOnButton(0)){
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff faec 	bl	8000710 <hasJustLongPressedOnButton>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d004      	beq.n	8001148 <manualModeFSM+0x104>
			changeToModifyMode();
 800113e:	f7ff fef7 	bl	8000f30 <changeToModifyMode>
			manualState = Sleep;
 8001142:	4b16      	ldr	r3, [pc, #88]	@ (800119c <manualModeFSM+0x158>)
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
		}
		// Change to next state
		if(hasJustLongPressedOnButton(1)){
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff fae1 	bl	8000710 <hasJustLongPressedOnButton>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01d      	beq.n	8001190 <manualModeFSM+0x14c>
			changeToAmberState();
 8001154:	f7ff ff22 	bl	8000f9c <changeToAmberState>
			turnLed(X, Yellow);
 8001158:	2102      	movs	r1, #2
 800115a:	2000      	movs	r0, #0
 800115c:	f000 fcc4 	bl	8001ae8 <turnLed>
			manualState = Man_YellowRed;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <manualModeFSM+0x158>)
 8001162:	2209      	movs	r2, #9
 8001164:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001166:	e013      	b.n	8001190 <manualModeFSM+0x14c>
	case Man_YellowRed:
		if(getTimeCounter(X) <= 0){
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fc2b 	bl	80009c4 <getTimeCounter>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10f      	bne.n	8001194 <manualModeFSM+0x150>
			changeToNextState(Red, Green);
 8001174:	2101      	movs	r1, #1
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff ff34 	bl	8000fe4 <changeToNextState>
			manualState = Man_RedGreen;
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <manualModeFSM+0x158>)
 800117e:	2206      	movs	r2, #6
 8001180:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001182:	e007      	b.n	8001194 <manualModeFSM+0x150>
	default:
		break;
 8001184:	bf00      	nop
 8001186:	e006      	b.n	8001196 <manualModeFSM+0x152>
		break;
 8001188:	bf00      	nop
 800118a:	e004      	b.n	8001196 <manualModeFSM+0x152>
		break;
 800118c:	bf00      	nop
 800118e:	e002      	b.n	8001196 <manualModeFSM+0x152>
		break;
 8001190:	bf00      	nop
 8001192:	e000      	b.n	8001196 <manualModeFSM+0x152>
		break;
 8001194:	bf00      	nop
	}
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000003a 	.word	0x2000003a
 80011a0:	20000139 	.word	0x20000139

080011a4 <modifyModeFSM>:
 *      Author: phamgialuong
 */

#include "modifyModeFSM.h"

void modifyModeFSM(void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	switch(modifyState){
 80011a8:	4b8c      	ldr	r3, [pc, #560]	@ (80013dc <modifyModeFSM+0x238>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3b0a      	subs	r3, #10
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	f200 8100 	bhi.w	80013b4 <modifyModeFSM+0x210>
 80011b4:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <modifyModeFSM+0x18>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011dd 	.word	0x080011dd
 80011c0:	0800122b 	.word	0x0800122b
 80011c4:	0800126b 	.word	0x0800126b
 80011c8:	080012a5 	.word	0x080012a5
 80011cc:	080012c1 	.word	0x080012c1
 80011d0:	08001325 	.word	0x08001325
 80011d4:	08001363 	.word	0x08001363
 80011d8:	0800139b 	.word	0x0800139b
	case WaitRed:
		if(isPressedOnButton(1)){
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff fa31 	bl	8000644 <isPressedOnButton>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <modifyModeFSM+0x4e>
			increaseCounter();
 80011e8:	f7ff fc10 	bl	8000a0c <increaseCounter>
			modifyState = RedPressed;
 80011ec:	4b7b      	ldr	r3, [pc, #492]	@ (80013dc <modifyModeFSM+0x238>)
 80011ee:	220c      	movs	r2, #12
 80011f0:	701a      	strb	r2, [r3, #0]
		}
		if(hasJustLongPressedOnButton(0)){
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fa8c 	bl	8000710 <hasJustLongPressedOnButton>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80dc 	beq.w	80013b8 <modifyModeFSM+0x214>
			deleteTaskSch(updateLCD_ModifyRed);
 8001200:	4877      	ldr	r0, [pc, #476]	@ (80013e0 <modifyModeFSM+0x23c>)
 8001202:	f000 fa21 	bl	8001648 <deleteTaskSch>
			addTaskSch(updateLCD_ModifyGreen, 100, 300);
 8001206:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800120a:	2164      	movs	r1, #100	@ 0x64
 800120c:	4875      	ldr	r0, [pc, #468]	@ (80013e4 <modifyModeFSM+0x240>)
 800120e:	f000 f94f 	bl	80014b0 <addTaskSch>
			deleteTaskSch(blinkRedLeds);
 8001212:	4875      	ldr	r0, [pc, #468]	@ (80013e8 <modifyModeFSM+0x244>)
 8001214:	f000 fa18 	bl	8001648 <deleteTaskSch>
			addTaskSch(blinkGreenLeds, 100, 250);
 8001218:	22fa      	movs	r2, #250	@ 0xfa
 800121a:	2164      	movs	r1, #100	@ 0x64
 800121c:	4873      	ldr	r0, [pc, #460]	@ (80013ec <modifyModeFSM+0x248>)
 800121e:	f000 f947 	bl	80014b0 <addTaskSch>
			modifyState = WaitGreen;
 8001222:	4b6e      	ldr	r3, [pc, #440]	@ (80013dc <modifyModeFSM+0x238>)
 8001224:	220e      	movs	r2, #14
 8001226:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001228:	e0c6      	b.n	80013b8 <modifyModeFSM+0x214>
	case RedReleased:
		checkCounter();
 800122a:	f7ff fc69 	bl	8000b00 <checkCounter>
		if(isPressedOnButton(0)){
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fa08 	bl	8000644 <isPressedOnButton>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00a      	beq.n	8001250 <modifyModeFSM+0xac>
			if(getCounter() > 0) setSystemTime(Red);
 800123a:	f7ff fc29 	bl	8000a90 <getCounter>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <modifyModeFSM+0xa6>
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff fb91 	bl	800096c <setSystemTime>
			modifyState = WaitRed;
 800124a:	4b64      	ldr	r3, [pc, #400]	@ (80013dc <modifyModeFSM+0x238>)
 800124c:	220a      	movs	r2, #10
 800124e:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedOnButton(1)){
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff f9f7 	bl	8000644 <isPressedOnButton>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80af 	beq.w	80013bc <modifyModeFSM+0x218>
			increaseCounter();
 800125e:	f7ff fbd5 	bl	8000a0c <increaseCounter>
			modifyState = RedPressed;
 8001262:	4b5e      	ldr	r3, [pc, #376]	@ (80013dc <modifyModeFSM+0x238>)
 8001264:	220c      	movs	r2, #12
 8001266:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001268:	e0a8      	b.n	80013bc <modifyModeFSM+0x218>
	case RedPressed:
		if(isPressedOnButton(1) == 0){
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff f9ea 	bl	8000644 <isPressedOnButton>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <modifyModeFSM+0xd8>
			modifyState = RedReleased;
 8001276:	4b59      	ldr	r3, [pc, #356]	@ (80013dc <modifyModeFSM+0x238>)
 8001278:	220b      	movs	r2, #11
 800127a:	701a      	strb	r2, [r3, #0]
		}
		if(isLongPressedOnButton(1)){
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff f9ff 	bl	8000680 <isLongPressedOnButton>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 809b 	beq.w	80013c0 <modifyModeFSM+0x21c>
			increaseCounter();
 800128a:	f7ff fbbf 	bl	8000a0c <increaseCounter>
			addTaskSch(increaseCounter, 500, 500);
 800128e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001292:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001296:	4856      	ldr	r0, [pc, #344]	@ (80013f0 <modifyModeFSM+0x24c>)
 8001298:	f000 f90a 	bl	80014b0 <addTaskSch>
			modifyState = RedLongPressed;
 800129c:	4b4f      	ldr	r3, [pc, #316]	@ (80013dc <modifyModeFSM+0x238>)
 800129e:	220d      	movs	r2, #13
 80012a0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012a2:	e08d      	b.n	80013c0 <modifyModeFSM+0x21c>
	case RedLongPressed:
		if(isPressedOnButton(1) == 0){
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff f9cd 	bl	8000644 <isPressedOnButton>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f040 8089 	bne.w	80013c4 <modifyModeFSM+0x220>
			deleteTaskSch(increaseCounter);
 80012b2:	484f      	ldr	r0, [pc, #316]	@ (80013f0 <modifyModeFSM+0x24c>)
 80012b4:	f000 f9c8 	bl	8001648 <deleteTaskSch>
			modifyState = RedReleased;
 80012b8:	4b48      	ldr	r3, [pc, #288]	@ (80013dc <modifyModeFSM+0x238>)
 80012ba:	220b      	movs	r2, #11
 80012bc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012be:	e081      	b.n	80013c4 <modifyModeFSM+0x220>
	case WaitGreen:
		if(isPressedOnButton(1)){
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff f9bf 	bl	8000644 <isPressedOnButton>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <modifyModeFSM+0x132>
			increaseCounter();
 80012cc:	f7ff fb9e 	bl	8000a0c <increaseCounter>
			modifyState = GreenPressed;
 80012d0:	4b42      	ldr	r3, [pc, #264]	@ (80013dc <modifyModeFSM+0x238>)
 80012d2:	2210      	movs	r2, #16
 80012d4:	701a      	strb	r2, [r3, #0]
		}
		if(hasJustLongPressedOnButton(0)){
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fa1a 	bl	8000710 <hasJustLongPressedOnButton>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d072      	beq.n	80013c8 <modifyModeFSM+0x224>
			deleteTaskSch(updateLCD_ModifyGreen);
 80012e2:	4840      	ldr	r0, [pc, #256]	@ (80013e4 <modifyModeFSM+0x240>)
 80012e4:	f000 f9b0 	bl	8001648 <deleteTaskSch>
			deleteTaskSch(blinkGreenLeds);
 80012e8:	4840      	ldr	r0, [pc, #256]	@ (80013ec <modifyModeFSM+0x248>)
 80012ea:	f000 f9ad 	bl	8001648 <deleteTaskSch>
			// Print change mode info
			lcd_clear_display();
 80012ee:	f7fe ffd0 	bl	8000292 <lcd_clear_display>
			addTaskSch(updateLCD_ChangeToAuto, 50, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2132      	movs	r1, #50	@ 0x32
 80012f6:	483f      	ldr	r0, [pc, #252]	@ (80013f4 <modifyModeFSM+0x250>)
 80012f8:	f000 f8da 	bl	80014b0 <addTaskSch>
			// Prepare for next mode
			addTaskSch(lcd_clear_display, 2000, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001302:	483d      	ldr	r0, [pc, #244]	@ (80013f8 <modifyModeFSM+0x254>)
 8001304:	f000 f8d4 	bl	80014b0 <addTaskSch>
			addTaskSch(updateLCD_TrafficTime, 2050, 300);
 8001308:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800130c:	f640 0102 	movw	r1, #2050	@ 0x802
 8001310:	483a      	ldr	r0, [pc, #232]	@ (80013fc <modifyModeFSM+0x258>)
 8001312:	f000 f8cd 	bl	80014b0 <addTaskSch>
			autoState = InitAuto;
 8001316:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <modifyModeFSM+0x25c>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
			modifyState = Sleep;
 800131c:	4b2f      	ldr	r3, [pc, #188]	@ (80013dc <modifyModeFSM+0x238>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001322:	e051      	b.n	80013c8 <modifyModeFSM+0x224>
	case GreenReleased:
		checkCounter();
 8001324:	f7ff fbec 	bl	8000b00 <checkCounter>
		if(isPressedOnButton(0)){
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff f98b 	bl	8000644 <isPressedOnButton>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00a      	beq.n	800134a <modifyModeFSM+0x1a6>
			if(getCounter() > 0) setSystemTime(Green);
 8001334:	f7ff fbac 	bl	8000a90 <getCounter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <modifyModeFSM+0x1a0>
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fb14 	bl	800096c <setSystemTime>
			modifyState = WaitGreen;
 8001344:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <modifyModeFSM+0x238>)
 8001346:	220e      	movs	r2, #14
 8001348:	701a      	strb	r2, [r3, #0]
		}
		if(isPressedOnButton(1)){
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff f97a 	bl	8000644 <isPressedOnButton>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d03a      	beq.n	80013cc <modifyModeFSM+0x228>
			increaseCounter();
 8001356:	f7ff fb59 	bl	8000a0c <increaseCounter>
			modifyState = GreenPressed;
 800135a:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <modifyModeFSM+0x238>)
 800135c:	2210      	movs	r2, #16
 800135e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001360:	e034      	b.n	80013cc <modifyModeFSM+0x228>
	case GreenPressed:
		if(isPressedOnButton(1) == 0){
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff f96e 	bl	8000644 <isPressedOnButton>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <modifyModeFSM+0x1d0>
			modifyState = GreenReleased;
 800136e:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <modifyModeFSM+0x238>)
 8001370:	220f      	movs	r2, #15
 8001372:	701a      	strb	r2, [r3, #0]
		}
		if(isLongPressedOnButton(1)){
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff f983 	bl	8000680 <isLongPressedOnButton>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d027      	beq.n	80013d0 <modifyModeFSM+0x22c>
			increaseCounter();
 8001380:	f7ff fb44 	bl	8000a0c <increaseCounter>
			addTaskSch(increaseCounter, 500, 500);
 8001384:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001388:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800138c:	4818      	ldr	r0, [pc, #96]	@ (80013f0 <modifyModeFSM+0x24c>)
 800138e:	f000 f88f 	bl	80014b0 <addTaskSch>
			modifyState = GreenLongPressed;
 8001392:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <modifyModeFSM+0x238>)
 8001394:	2211      	movs	r2, #17
 8001396:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001398:	e01a      	b.n	80013d0 <modifyModeFSM+0x22c>
	case GreenLongPressed:
		if(isPressedOnButton(1) == 0){
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff f952 	bl	8000644 <isPressedOnButton>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d116      	bne.n	80013d4 <modifyModeFSM+0x230>
			deleteTaskSch(increaseCounter);
 80013a6:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <modifyModeFSM+0x24c>)
 80013a8:	f000 f94e 	bl	8001648 <deleteTaskSch>
			modifyState = GreenReleased;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <modifyModeFSM+0x238>)
 80013ae:	220f      	movs	r2, #15
 80013b0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013b2:	e00f      	b.n	80013d4 <modifyModeFSM+0x230>
	default:
		break;
 80013b4:	bf00      	nop
 80013b6:	e00e      	b.n	80013d6 <modifyModeFSM+0x232>
		break;
 80013b8:	bf00      	nop
 80013ba:	e00c      	b.n	80013d6 <modifyModeFSM+0x232>
		break;
 80013bc:	bf00      	nop
 80013be:	e00a      	b.n	80013d6 <modifyModeFSM+0x232>
		break;
 80013c0:	bf00      	nop
 80013c2:	e008      	b.n	80013d6 <modifyModeFSM+0x232>
		break;
 80013c4:	bf00      	nop
 80013c6:	e006      	b.n	80013d6 <modifyModeFSM+0x232>
		break;
 80013c8:	bf00      	nop
 80013ca:	e004      	b.n	80013d6 <modifyModeFSM+0x232>
		break;
 80013cc:	bf00      	nop
 80013ce:	e002      	b.n	80013d6 <modifyModeFSM+0x232>
		break;
 80013d0:	bf00      	nop
 80013d2:	e000      	b.n	80013d6 <modifyModeFSM+0x232>
		break;
 80013d4:	bf00      	nop
	}
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000003b 	.word	0x2000003b
 80013e0:	080008d5 	.word	0x080008d5
 80013e4:	08000921 	.word	0x08000921
 80013e8:	08001bd9 	.word	0x08001bd9
 80013ec:	08001c11 	.word	0x08001c11
 80013f0:	08000a0d 	.word	0x08000a0d
 80013f4:	08000765 	.word	0x08000765
 80013f8:	08000293 	.word	0x08000293
 80013fc:	0800087d 	.word	0x0800087d
 8001400:	20000139 	.word	0x20000139

08001404 <freeTask>:

taskNode* freeList = NULL;
uint8_t freeListSize = 0;

// Add used task memory to freeList
void freeTask(taskNode* task){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(freeListSize >= 10){
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <freeTask+0x3c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b09      	cmp	r3, #9
 8001412:	d903      	bls.n	800141c <freeTask+0x18>
		free(task);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f004 f9bf 	bl	8005798 <free>
	}else{
		task->next = freeList;
		freeList = task;
		freeListSize++;
	}
}
 800141a:	e00c      	b.n	8001436 <freeTask+0x32>
		task->next = freeList;
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <freeTask+0x40>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	611a      	str	r2, [r3, #16]
		freeList = task;
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <freeTask+0x40>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
		freeListSize++;
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <freeTask+0x3c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <freeTask+0x3c>)
 8001434:	701a      	strb	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200001e4 	.word	0x200001e4
 8001444:	200001e0 	.word	0x200001e0

08001448 <allocateTask>:

// Allocate memory if freeList not NULL
taskNode* allocateTask(void){
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
	if(freeList == NULL) return NULL;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <allocateTask+0x40>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <allocateTask+0x12>
 8001456:	2300      	movs	r3, #0
 8001458:	e011      	b.n	800147e <allocateTask+0x36>
	taskNode* tmp = freeList;
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <allocateTask+0x40>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	607b      	str	r3, [r7, #4]
	freeList = freeList->next;
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <allocateTask+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	4a08      	ldr	r2, [pc, #32]	@ (8001488 <allocateTask+0x40>)
 8001468:	6013      	str	r3, [r2, #0]
	tmp->next = NULL;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
	freeListSize--;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <allocateTask+0x44>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	3b01      	subs	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <allocateTask+0x44>)
 800147a:	701a      	strb	r2, [r3, #0]
	return tmp;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	200001e0 	.word	0x200001e0
 800148c:	200001e4 	.word	0x200001e4

08001490 <initScheduler>:

// Set timer interrupt duration for Scheduler
void initScheduler(uint8_t timerInterruptDuration){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	schTick = timerInterruptDuration;
 800149a:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <initScheduler+0x1c>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	7013      	strb	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000003c 	.word	0x2000003c

080014b0 <addTaskSch>:

// Add new task to Scheduler
void addTaskSch(void (*taskFunction)(), uint32_t taskDelay, uint32_t taskPeriod){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
	taskDelay = taskDelay / schTick;
 80014bc:	4b5f      	ldr	r3, [pc, #380]	@ (800163c <addTaskSch+0x18c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80014c8:	60bb      	str	r3, [r7, #8]
	taskPeriod = taskPeriod / schTick;
 80014ca:	4b5c      	ldr	r3, [pc, #368]	@ (800163c <addTaskSch+0x18c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80014d6:	607b      	str	r3, [r7, #4]

	// Check if the same task is existed
	taskNode* tmp = deleteTaskSch(taskFunction);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f8b5 	bl	8001648 <deleteTaskSch>
 80014de:	61f8      	str	r0, [r7, #28]
	if(tmp == NULL){
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d11d      	bne.n	8001522 <addTaskSch+0x72>
		// If it's not found, allocate memory from freeList
		tmp = allocateTask();
 80014e6:	f7ff ffaf 	bl	8001448 <allocateTask>
 80014ea:	61f8      	str	r0, [r7, #28]
		if(tmp == NULL){
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d104      	bne.n	80014fc <addTaskSch+0x4c>
			// If freeList is NULL, dynamic allocate
			tmp = (taskNode*)malloc(sizeof(taskNode));
 80014f2:	2018      	movs	r0, #24
 80014f4:	f004 f948 	bl	8005788 <malloc>
 80014f8:	4603      	mov	r3, r0
 80014fa:	61fb      	str	r3, [r7, #28]
		}
		tmp->pTask = taskFunction;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]
		tmp->delay = taskDelay;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	605a      	str	r2, [r3, #4]
		tmp->period = taskPeriod;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	609a      	str	r2, [r3, #8]
		tmp->runMe = 0;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	2200      	movs	r2, #0
 8001512:	731a      	strb	r2, [r3, #12]
		tmp->next = NULL;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
		tmp->previous = NULL;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	e003      	b.n	800152a <addTaskSch+0x7a>
	}else{
		// If there's existed, update its delay
		// and re-add to task list
		tmp->delay = tmp->period;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	605a      	str	r2, [r3, #4]
	}

	if(schedulerSize == 0){
 800152a:	4b45      	ldr	r3, [pc, #276]	@ (8001640 <addTaskSch+0x190>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <addTaskSch+0x96>
		// First node
		head = tmp;
 8001532:	4a44      	ldr	r2, [pc, #272]	@ (8001644 <addTaskSch+0x194>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	6013      	str	r3, [r2, #0]
		schedulerSize++;
 8001538:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <addTaskSch+0x190>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	b2da      	uxtb	r2, r3
 8001540:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <addTaskSch+0x190>)
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e076      	b.n	8001634 <addTaskSch+0x184>
	}else{
		if((tmp->delay < head->delay) || (tmp->delay==0 && head->delay!=0)){
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <addTaskSch+0x194>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d308      	bcc.n	8001566 <addTaskSch+0xb6>
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d110      	bne.n	800157e <addTaskSch+0xce>
 800155c:	4b39      	ldr	r3, [pc, #228]	@ (8001644 <addTaskSch+0x194>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00b      	beq.n	800157e <addTaskSch+0xce>
			// Add first
			tmp->next = head;
 8001566:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <addTaskSch+0x194>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	611a      	str	r2, [r3, #16]
			head->previous = tmp;
 800156e:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <addTaskSch+0x194>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
			head = tmp;
 8001576:	4a33      	ldr	r2, [pc, #204]	@ (8001644 <addTaskSch+0x194>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e04b      	b.n	8001616 <addTaskSch+0x166>
		}else{
			taskNode* node = head;
 800157e:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <addTaskSch+0x194>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	61bb      	str	r3, [r7, #24]
			uint32_t totalDelay = node->delay;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	617b      	str	r3, [r7, #20]
			while((totalDelay <= tmp->delay) && (node->next != NULL)){
 800158a:	e008      	b.n	800159e <addTaskSch+0xee>
				// Find suitable place
				totalDelay += node->next->delay;
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
				node = node->next;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	61bb      	str	r3, [r7, #24]
			while((totalDelay <= tmp->delay) && (node->next != NULL)){
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d803      	bhi.n	80015b0 <addTaskSch+0x100>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ed      	bne.n	800158c <addTaskSch+0xdc>
			}
			if(node->next == NULL && totalDelay <= tmp->delay){
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d117      	bne.n	80015e8 <addTaskSch+0x138>
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d812      	bhi.n	80015e8 <addTaskSch+0x138>
				// Add tail
				tmp->delay -= totalDelay;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	1ad2      	subs	r2, r2, r3
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	605a      	str	r2, [r3, #4]
				node->next = tmp;
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	611a      	str	r2, [r3, #16]
				tmp->previous = node;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	615a      	str	r2, [r3, #20]
				schedulerSize++;
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <addTaskSch+0x190>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <addTaskSch+0x190>)
 80015e4:	701a      	strb	r2, [r3, #0]
				return;
 80015e6:	e025      	b.n	8001634 <addTaskSch+0x184>
			}else{ // Add middle
				tmp->delay -= (totalDelay - node->delay);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	1acb      	subs	r3, r1, r3
 80015f4:	441a      	add	r2, r3
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	605a      	str	r2, [r3, #4]
				node->previous->next = tmp;
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	611a      	str	r2, [r3, #16]
				tmp->previous = node->previous;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	615a      	str	r2, [r3, #20]
				tmp->next = node;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	611a      	str	r2, [r3, #16]
				node->previous = tmp;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	615a      	str	r2, [r3, #20]
			}
		}
		// If new node is not added at the end of linked list,
		// update the delay for it's next task
		tmp->next->delay -= tmp->delay;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	6859      	ldr	r1, [r3, #4]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	1a8a      	subs	r2, r1, r2
 8001626:	605a      	str	r2, [r3, #4]
		schedulerSize++;
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <addTaskSch+0x190>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b03      	ldr	r3, [pc, #12]	@ (8001640 <addTaskSch+0x190>)
 8001632:	701a      	strb	r2, [r3, #0]
	}
}
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000003c 	.word	0x2000003c
 8001640:	200001dc 	.word	0x200001dc
 8001644:	200001d8 	.word	0x200001d8

08001648 <deleteTaskSch>:

// Delete the task has the same function pointer
taskNode* deleteTaskSch(void (*taskFunction)()){
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	if(schedulerSize >= 1){
 8001650:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <deleteTaskSch+0xe8>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d064      	beq.n	8001722 <deleteTaskSch+0xda>
		taskNode* tmp = head;
 8001658:	4b36      	ldr	r3, [pc, #216]	@ (8001734 <deleteTaskSch+0xec>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]
		if(taskFunction == head->pTask){
 800165e:	4b35      	ldr	r3, [pc, #212]	@ (8001734 <deleteTaskSch+0xec>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	d129      	bne.n	80016be <deleteTaskSch+0x76>
			// Delete first node of the list
			if(schedulerSize == 1){
 800166a:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <deleteTaskSch+0xe8>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d103      	bne.n	800167a <deleteTaskSch+0x32>
				// One node list
				head = NULL;
 8001672:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <deleteTaskSch+0xec>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e04b      	b.n	8001712 <deleteTaskSch+0xca>
			}else{ // More than 1 node list
				head = head->next;
 800167a:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <deleteTaskSch+0xec>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	4a2c      	ldr	r2, [pc, #176]	@ (8001734 <deleteTaskSch+0xec>)
 8001682:	6013      	str	r3, [r2, #0]
				head->previous = NULL;
 8001684:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <deleteTaskSch+0xec>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
				tmp->next = NULL;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
				if(tmp->delay > 0) head->delay += tmp->delay;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d03b      	beq.n	8001712 <deleteTaskSch+0xca>
 800169a:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <deleteTaskSch+0xec>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <deleteTaskSch+0xec>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	440a      	add	r2, r1
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	e031      	b.n	8001712 <deleteTaskSch+0xca>
			}
		}else{
			while(tmp->pTask != taskFunction){
				tmp = tmp->next;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	60fb      	str	r3, [r7, #12]
				if(tmp == NULL) return NULL;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <deleteTaskSch+0x76>
 80016ba:	2300      	movs	r3, #0
 80016bc:	e032      	b.n	8001724 <deleteTaskSch+0xdc>
			while(tmp->pTask != taskFunction){
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1f2      	bne.n	80016ae <deleteTaskSch+0x66>
			}
			if(tmp->next == NULL){
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <deleteTaskSch+0x98>
				// Delete node at the end of the list
				tmp->previous->next = NULL;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
				tmp->previous = NULL;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	e018      	b.n	8001712 <deleteTaskSch+0xca>
			}else{ // Delete node in the middle of the list
				tmp->previous->next = tmp->next;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	6912      	ldr	r2, [r2, #16]
 80016e8:	611a      	str	r2, [r3, #16]
				tmp->next->previous = tmp->previous;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	6952      	ldr	r2, [r2, #20]
 80016f2:	615a      	str	r2, [r3, #20]
				tmp->next->delay += tmp->delay;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	440a      	add	r2, r1
 8001704:	605a      	str	r2, [r3, #4]
				tmp->next = NULL;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
				tmp->previous = NULL;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
			}
		}
		schedulerSize--;
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <deleteTaskSch+0xe8>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <deleteTaskSch+0xe8>)
 800171c:	701a      	strb	r2, [r3, #0]
		return tmp;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	e000      	b.n	8001724 <deleteTaskSch+0xdc>
	}else{
		return NULL;
 8001722:	2300      	movs	r3, #0
	}
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200001dc 	.word	0x200001dc
 8001734:	200001d8 	.word	0x200001d8

08001738 <updateSch>:

// Update delay value of the first task of the list
// call at timer interrupt function
void updateSch(void){
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	if(head != NULL){
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <updateSch+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d014      	beq.n	800176e <updateSch+0x36>
		if(head->delay > 0) head->delay--;
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <updateSch+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <updateSch+0x20>
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <updateSch+0x40>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	3a01      	subs	r2, #1
 8001756:	605a      	str	r2, [r3, #4]
		if(head->delay <= 0){
 8001758:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <updateSch+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <updateSch+0x36>
			head->runMe++;
 8001762:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <updateSch+0x40>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	7b1a      	ldrb	r2, [r3, #12]
 8001768:	3201      	adds	r2, #1
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200001d8 	.word	0x200001d8

0800177c <dispatchTaskSch>:

// Run task if it's delay is greater than 0
void dispatchTaskSch(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	if(head != NULL && head->runMe > 0){
 8001780:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <dispatchTaskSch+0xdc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d066      	beq.n	8001856 <dispatchTaskSch+0xda>
 8001788:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <dispatchTaskSch+0xdc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	7b1b      	ldrb	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d061      	beq.n	8001856 <dispatchTaskSch+0xda>
		(*head->pTask)();
 8001792:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <dispatchTaskSch+0xdc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4798      	blx	r3
		head->runMe--;
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <dispatchTaskSch+0xdc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	7b1a      	ldrb	r2, [r3, #12]
 80017a0:	3a01      	subs	r2, #1
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	731a      	strb	r2, [r3, #12]
		if(head->period > 0){
 80017a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001858 <dispatchTaskSch+0xdc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d014      	beq.n	80017da <dispatchTaskSch+0x5e>
			addTaskSch(head->pTask, head->period*schTick, head->period*schTick);
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <dispatchTaskSch+0xdc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <dispatchTaskSch+0xdc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a27      	ldr	r2, [pc, #156]	@ (800185c <dispatchTaskSch+0xe0>)
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	fb02 f103 	mul.w	r1, r2, r3
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <dispatchTaskSch+0xdc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	4a24      	ldr	r2, [pc, #144]	@ (800185c <dispatchTaskSch+0xe0>)
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	f7ff fe6c 	bl	80014b0 <addTaskSch>
 80017d8:	e036      	b.n	8001848 <dispatchTaskSch+0xcc>
		}else{
			freeTask(deleteTaskSch(head->pTask));
 80017da:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <dispatchTaskSch+0xdc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff31 	bl	8001648 <deleteTaskSch>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fe0b 	bl	8001404 <freeTask>
		}
		// Handling the case that more than 1 task are scheduled at once time
		while(head->delay == 0){
 80017ee:	e02b      	b.n	8001848 <dispatchTaskSch+0xcc>
			(*head->pTask)();
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <dispatchTaskSch+0xdc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4798      	blx	r3
			if(head->period > 0){
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <dispatchTaskSch+0xdc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d014      	beq.n	800182c <dispatchTaskSch+0xb0>
				addTaskSch(head->pTask, head->period*schTick, head->period*schTick);
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <dispatchTaskSch+0xdc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <dispatchTaskSch+0xdc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4a13      	ldr	r2, [pc, #76]	@ (800185c <dispatchTaskSch+0xe0>)
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	fb02 f103 	mul.w	r1, r2, r3
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <dispatchTaskSch+0xdc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <dispatchTaskSch+0xe0>)
 800181e:	7812      	ldrb	r2, [r2, #0]
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	461a      	mov	r2, r3
 8001826:	f7ff fe43 	bl	80014b0 <addTaskSch>
 800182a:	e009      	b.n	8001840 <dispatchTaskSch+0xc4>
			}else{
				freeTask(deleteTaskSch(head->pTask));
 800182c:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <dispatchTaskSch+0xdc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff08 	bl	8001648 <deleteTaskSch>
 8001838:	4603      	mov	r3, r0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fde2 	bl	8001404 <freeTask>
			}
			if(head == NULL) return;
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <dispatchTaskSch+0xdc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <dispatchTaskSch+0xd8>
		while(head->delay == 0){
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <dispatchTaskSch+0xdc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0ce      	beq.n	80017f0 <dispatchTaskSch+0x74>
 8001852:	e000      	b.n	8001856 <dispatchTaskSch+0xda>
			if(head == NULL) return;
 8001854:	bf00      	nop
		}
	}
}
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200001d8 	.word	0x200001d8
 800185c:	2000003c 	.word	0x2000003c

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_MspInit+0x5c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <HAL_MspInit+0x5c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6193      	str	r3, [r2, #24]
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_MspInit+0x5c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_MspInit+0x5c>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a0e      	ldr	r2, [pc, #56]	@ (80018bc <HAL_MspInit+0x5c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_MspInit+0x5c>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_MspInit+0x60>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_MspInit+0x60>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000

080018c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	@ 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a25      	ldr	r2, [pc, #148]	@ (8001974 <HAL_I2C_MspInit+0xb0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d142      	bne.n	800196a <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <HAL_I2C_MspInit+0xb4>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a23      	ldr	r2, [pc, #140]	@ (8001978 <HAL_I2C_MspInit+0xb4>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <HAL_I2C_MspInit+0xb4>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001902:	2312      	movs	r3, #18
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	481a      	ldr	r0, [pc, #104]	@ (800197c <HAL_I2C_MspInit+0xb8>)
 8001912:	f000 fbf3 	bl	80020fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <HAL_I2C_MspInit+0xbc>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
 800192c:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <HAL_I2C_MspInit+0xbc>)
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_I2C_MspInit+0xb4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <HAL_I2C_MspInit+0xb4>)
 8001938:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_I2C_MspInit+0xb4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	201f      	movs	r0, #31
 8001950:	f000 fb17 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001954:	201f      	movs	r0, #31
 8001956:	f000 fb30 	bl	8001fba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2020      	movs	r0, #32
 8001960:	f000 fb0f 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001964:	2020      	movs	r0, #32
 8001966:	f000 fb28 	bl	8001fba <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	@ 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40005400 	.word	0x40005400
 8001978:	40021000 	.word	0x40021000
 800197c:	40010c00 	.word	0x40010c00
 8001980:	40010000 	.word	0x40010000

08001984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001994:	d113      	bne.n	80019be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <HAL_TIM_Base_MspInit+0x44>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a0b      	ldr	r2, [pc, #44]	@ (80019c8 <HAL_TIM_Base_MspInit+0x44>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_TIM_Base_MspInit+0x44>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	201c      	movs	r0, #28
 80019b4:	f000 fae5 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b8:	201c      	movs	r0, #28
 80019ba:	f000 fafe 	bl	8001fba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <NMI_Handler+0x4>

080019d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <MemManage_Handler+0x4>

080019e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 f99a 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <TIM2_IRQHandler+0x10>)
 8001a2a:	f003 fb5d 	bl	80050e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000190 	.word	0x20000190

08001a38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <I2C1_EV_IRQHandler+0x10>)
 8001a3e:	f000 ff89 	bl	8002954 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000013c 	.word	0x2000013c

08001a4c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <I2C1_ER_IRQHandler+0x10>)
 8001a52:	f001 f8d2 	bl	8002bfa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000013c 	.word	0x2000013c

08001a60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a64:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a68:	f000 fcfc 	bl	8002464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f003 ff68 	bl	8005974 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20005000 	.word	0x20005000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	200001e8 	.word	0x200001e8
 8001ad8:	20000338 	.word	0x20000338

08001adc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <turnLed>:
#include "trafficLight.h"

// Turn led on lane
// color: Red, Green, Yellow
// lane: X, Y
void turnLed(uint8_t lane, uint8_t color){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]
	switch(lane){
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <turnLed+0x1c>
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d02d      	beq.n	8001b5e <turnLed+0x76>
		default:
			break;
		}
		break;
	default:
		break;
 8001b02:	e05f      	b.n	8001bc4 <turnLed+0xdc>
		switch(color){
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d01c      	beq.n	8001b44 <turnLed+0x5c>
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	dc25      	bgt.n	8001b5a <turnLed+0x72>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <turnLed+0x30>
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d00b      	beq.n	8001b2e <turnLed+0x46>
			break;
 8001b16:	e020      	b.n	8001b5a <turnLed+0x72>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 1);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2140      	movs	r1, #64	@ 0x40
 8001b1c:	482b      	ldr	r0, [pc, #172]	@ (8001bcc <turnLed+0xe4>)
 8001b1e:	f000 fc88 	bl	8002432 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 1);
 8001b22:	2201      	movs	r2, #1
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	482a      	ldr	r0, [pc, #168]	@ (8001bd0 <turnLed+0xe8>)
 8001b28:	f000 fc83 	bl	8002432 <HAL_GPIO_WritePin>
			break;
 8001b2c:	e016      	b.n	8001b5c <turnLed+0x74>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2140      	movs	r1, #64	@ 0x40
 8001b32:	4826      	ldr	r0, [pc, #152]	@ (8001bcc <turnLed+0xe4>)
 8001b34:	f000 fc7d 	bl	8002432 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2180      	movs	r1, #128	@ 0x80
 8001b3c:	4824      	ldr	r0, [pc, #144]	@ (8001bd0 <turnLed+0xe8>)
 8001b3e:	f000 fc78 	bl	8002432 <HAL_GPIO_WritePin>
			break;
 8001b42:	e00b      	b.n	8001b5c <turnLed+0x74>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 1);
 8001b44:	2201      	movs	r2, #1
 8001b46:	2140      	movs	r1, #64	@ 0x40
 8001b48:	4820      	ldr	r0, [pc, #128]	@ (8001bcc <turnLed+0xe4>)
 8001b4a:	f000 fc72 	bl	8002432 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2180      	movs	r1, #128	@ 0x80
 8001b52:	481f      	ldr	r0, [pc, #124]	@ (8001bd0 <turnLed+0xe8>)
 8001b54:	f000 fc6d 	bl	8002432 <HAL_GPIO_WritePin>
			break;
 8001b58:	e000      	b.n	8001b5c <turnLed+0x74>
			break;
 8001b5a:	bf00      	nop
		break;
 8001b5c:	e032      	b.n	8001bc4 <turnLed+0xdc>
		switch(color){
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d020      	beq.n	8001ba6 <turnLed+0xbe>
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	dc2b      	bgt.n	8001bc0 <turnLed+0xd8>
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <turnLed+0x8a>
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d00d      	beq.n	8001b8c <turnLed+0xa4>
			break;
 8001b70:	e026      	b.n	8001bc0 <turnLed+0xd8>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b78:	4816      	ldr	r0, [pc, #88]	@ (8001bd4 <turnLed+0xec>)
 8001b7a:	f000 fc5a 	bl	8002432 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b84:	4813      	ldr	r0, [pc, #76]	@ (8001bd4 <turnLed+0xec>)
 8001b86:	f000 fc54 	bl	8002432 <HAL_GPIO_WritePin>
			break;
 8001b8a:	e01a      	b.n	8001bc2 <turnLed+0xda>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b92:	4810      	ldr	r0, [pc, #64]	@ (8001bd4 <turnLed+0xec>)
 8001b94:	f000 fc4d 	bl	8002432 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 1);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b9e:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <turnLed+0xec>)
 8001ba0:	f000 fc47 	bl	8002432 <HAL_GPIO_WritePin>
			break;
 8001ba4:	e00d      	b.n	8001bc2 <turnLed+0xda>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 1);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bac:	4809      	ldr	r0, [pc, #36]	@ (8001bd4 <turnLed+0xec>)
 8001bae:	f000 fc40 	bl	8002432 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bb8:	4806      	ldr	r0, [pc, #24]	@ (8001bd4 <turnLed+0xec>)
 8001bba:	f000 fc3a 	bl	8002432 <HAL_GPIO_WritePin>
			break;
 8001bbe:	e000      	b.n	8001bc2 <turnLed+0xda>
			break;
 8001bc0:	bf00      	nop
		break;
 8001bc2:	bf00      	nop
	}
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40010800 	.word	0x40010800

08001bd8 <blinkRedLeds>:

uint8_t toggle = 1;

// Blinking Red leds
void blinkRedLeds(void){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	if(toggle == 1){
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <blinkRedLeds+0x34>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10b      	bne.n	8001bfc <blinkRedLeds+0x24>
		turnLed(X, Red);
 8001be4:	2100      	movs	r1, #0
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff ff7e 	bl	8001ae8 <turnLed>
		turnLed(Y, Red);
 8001bec:	2100      	movs	r1, #0
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff ff7a 	bl	8001ae8 <turnLed>
		toggle = 0;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <blinkRedLeds+0x34>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
	}else{
		clearAllLeds();
		toggle = 1;
	}
}
 8001bfa:	e004      	b.n	8001c06 <blinkRedLeds+0x2e>
		clearAllLeds();
 8001bfc:	f000 f824 	bl	8001c48 <clearAllLeds>
		toggle = 1;
 8001c00:	4b02      	ldr	r3, [pc, #8]	@ (8001c0c <blinkRedLeds+0x34>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000044 	.word	0x20000044

08001c10 <blinkGreenLeds>:

// Blinking Green leds
void blinkGreenLeds(void){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	if(toggle == 1){
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <blinkGreenLeds+0x34>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10b      	bne.n	8001c34 <blinkGreenLeds+0x24>
		turnLed(X, Green);
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff ff62 	bl	8001ae8 <turnLed>
		turnLed(Y, Green);
 8001c24:	2101      	movs	r1, #1
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff ff5e 	bl	8001ae8 <turnLed>
		toggle = 0;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <blinkGreenLeds+0x34>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
	}else{
		clearAllLeds();
		toggle = 1;
	}
}
 8001c32:	e004      	b.n	8001c3e <blinkGreenLeds+0x2e>
		clearAllLeds();
 8001c34:	f000 f808 	bl	8001c48 <clearAllLeds>
		toggle = 1;
 8001c38:	4b02      	ldr	r3, [pc, #8]	@ (8001c44 <blinkGreenLeds+0x34>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000044 	.word	0x20000044

08001c48 <clearAllLeds>:


// Turn off all traffic leds
void clearAllLeds(void){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin | LaneY_B_Pin, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001c52:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <clearAllLeds+0x28>)
 8001c54:	f000 fbed 	bl	8002432 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 0);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2140      	movs	r1, #64	@ 0x40
 8001c5c:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <clearAllLeds+0x2c>)
 8001c5e:	f000 fbe8 	bl	8002432 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2180      	movs	r1, #128	@ 0x80
 8001c66:	4804      	ldr	r0, [pc, #16]	@ (8001c78 <clearAllLeds+0x30>)
 8001c68:	f000 fbe3 	bl	8002432 <HAL_GPIO_WritePin>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40010800 	.word	0x40010800
 8001c74:	40010c00 	.word	0x40010c00
 8001c78:	40011000 	.word	0x40011000

08001c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c7c:	f7ff ff2e 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c82:	490c      	ldr	r1, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c84:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c98:	4c09      	ldr	r4, [pc, #36]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f003 fe6b 	bl	8005980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7fe ff45 	bl	8000b38 <main>
  bx lr
 8001cae:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001cb8:	08006228 	.word	0x08006228
  ldr r2, =_sbss
 8001cbc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001cc0:	20000338 	.word	0x20000338

08001cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC1_2_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <HAL_Init+0x28>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <HAL_Init+0x28>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f947 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fdbc 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f95f 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 f927 	bl	8001f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	@ (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000040 	.word	0x20000040
 8001d4c:	2000004c 	.word	0x2000004c
 8001d50:	20000048 	.word	0x20000048

08001d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <HAL_IncTick+0x1c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a03      	ldr	r2, [pc, #12]	@ (8001d74 <HAL_IncTick+0x20>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	2000004c 	.word	0x2000004c
 8001d74:	200001ec 	.word	0x200001ec

08001d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b02      	ldr	r3, [pc, #8]	@ (8001d88 <HAL_GetTick+0x10>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	200001ec 	.word	0x200001ec

08001d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_GetTick>
 8001d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da4:	d005      	beq.n	8001db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_Delay+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001db2:	bf00      	nop
 8001db4:	f7ff ffe0 	bl	8001d78 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d8f7      	bhi.n	8001db4 <HAL_Delay+0x28>
  {
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000004c 	.word	0x2000004c

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4906      	ldr	r1, [pc, #24]	@ (8001e6c <__NVIC_EnableIRQ+0x34>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	@ 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff90 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff2d 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff42 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff90 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5f 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff35 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d005      	beq.n	8002014 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2204      	movs	r2, #4
 800200c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	e051      	b.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 020e 	bic.w	r2, r2, #14
 8002022:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a22      	ldr	r2, [pc, #136]	@ (80020c4 <HAL_DMA_Abort_IT+0xd4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d029      	beq.n	8002092 <HAL_DMA_Abort_IT+0xa2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a21      	ldr	r2, [pc, #132]	@ (80020c8 <HAL_DMA_Abort_IT+0xd8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d022      	beq.n	800208e <HAL_DMA_Abort_IT+0x9e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1f      	ldr	r2, [pc, #124]	@ (80020cc <HAL_DMA_Abort_IT+0xdc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01a      	beq.n	8002088 <HAL_DMA_Abort_IT+0x98>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1e      	ldr	r2, [pc, #120]	@ (80020d0 <HAL_DMA_Abort_IT+0xe0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d012      	beq.n	8002082 <HAL_DMA_Abort_IT+0x92>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_DMA_Abort_IT+0xe4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00a      	beq.n	800207c <HAL_DMA_Abort_IT+0x8c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1b      	ldr	r2, [pc, #108]	@ (80020d8 <HAL_DMA_Abort_IT+0xe8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d102      	bne.n	8002076 <HAL_DMA_Abort_IT+0x86>
 8002070:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002074:	e00e      	b.n	8002094 <HAL_DMA_Abort_IT+0xa4>
 8002076:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800207a:	e00b      	b.n	8002094 <HAL_DMA_Abort_IT+0xa4>
 800207c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002080:	e008      	b.n	8002094 <HAL_DMA_Abort_IT+0xa4>
 8002082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002086:	e005      	b.n	8002094 <HAL_DMA_Abort_IT+0xa4>
 8002088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800208c:	e002      	b.n	8002094 <HAL_DMA_Abort_IT+0xa4>
 800208e:	2310      	movs	r3, #16
 8002090:	e000      	b.n	8002094 <HAL_DMA_Abort_IT+0xa4>
 8002092:	2301      	movs	r3, #1
 8002094:	4a11      	ldr	r2, [pc, #68]	@ (80020dc <HAL_DMA_Abort_IT+0xec>)
 8002096:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
    } 
  }
  return status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40020008 	.word	0x40020008
 80020c8:	4002001c 	.word	0x4002001c
 80020cc:	40020030 	.word	0x40020030
 80020d0:	40020044 	.word	0x40020044
 80020d4:	40020058 	.word	0x40020058
 80020d8:	4002006c 	.word	0x4002006c
 80020dc:	40020000 	.word	0x40020000

080020e0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ee:	b2db      	uxtb	r3, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b08b      	sub	sp, #44	@ 0x2c
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	e169      	b.n	80023e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002110:	2201      	movs	r2, #1
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 8158 	bne.w	80023de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a9a      	ldr	r2, [pc, #616]	@ (800239c <HAL_GPIO_Init+0x2a0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d05e      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 8002138:	4a98      	ldr	r2, [pc, #608]	@ (800239c <HAL_GPIO_Init+0x2a0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d875      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 800213e:	4a98      	ldr	r2, [pc, #608]	@ (80023a0 <HAL_GPIO_Init+0x2a4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d058      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 8002144:	4a96      	ldr	r2, [pc, #600]	@ (80023a0 <HAL_GPIO_Init+0x2a4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d86f      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 800214a:	4a96      	ldr	r2, [pc, #600]	@ (80023a4 <HAL_GPIO_Init+0x2a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d052      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 8002150:	4a94      	ldr	r2, [pc, #592]	@ (80023a4 <HAL_GPIO_Init+0x2a8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d869      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 8002156:	4a94      	ldr	r2, [pc, #592]	@ (80023a8 <HAL_GPIO_Init+0x2ac>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d04c      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 800215c:	4a92      	ldr	r2, [pc, #584]	@ (80023a8 <HAL_GPIO_Init+0x2ac>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d863      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 8002162:	4a92      	ldr	r2, [pc, #584]	@ (80023ac <HAL_GPIO_Init+0x2b0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d046      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
 8002168:	4a90      	ldr	r2, [pc, #576]	@ (80023ac <HAL_GPIO_Init+0x2b0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d85d      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 800216e:	2b12      	cmp	r3, #18
 8002170:	d82a      	bhi.n	80021c8 <HAL_GPIO_Init+0xcc>
 8002172:	2b12      	cmp	r3, #18
 8002174:	d859      	bhi.n	800222a <HAL_GPIO_Init+0x12e>
 8002176:	a201      	add	r2, pc, #4	@ (adr r2, 800217c <HAL_GPIO_Init+0x80>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	080021f7 	.word	0x080021f7
 8002180:	080021d1 	.word	0x080021d1
 8002184:	080021e3 	.word	0x080021e3
 8002188:	08002225 	.word	0x08002225
 800218c:	0800222b 	.word	0x0800222b
 8002190:	0800222b 	.word	0x0800222b
 8002194:	0800222b 	.word	0x0800222b
 8002198:	0800222b 	.word	0x0800222b
 800219c:	0800222b 	.word	0x0800222b
 80021a0:	0800222b 	.word	0x0800222b
 80021a4:	0800222b 	.word	0x0800222b
 80021a8:	0800222b 	.word	0x0800222b
 80021ac:	0800222b 	.word	0x0800222b
 80021b0:	0800222b 	.word	0x0800222b
 80021b4:	0800222b 	.word	0x0800222b
 80021b8:	0800222b 	.word	0x0800222b
 80021bc:	0800222b 	.word	0x0800222b
 80021c0:	080021d9 	.word	0x080021d9
 80021c4:	080021ed 	.word	0x080021ed
 80021c8:	4a79      	ldr	r2, [pc, #484]	@ (80023b0 <HAL_GPIO_Init+0x2b4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ce:	e02c      	b.n	800222a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e029      	b.n	800222c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	3304      	adds	r3, #4
 80021de:	623b      	str	r3, [r7, #32]
          break;
 80021e0:	e024      	b.n	800222c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	3308      	adds	r3, #8
 80021e8:	623b      	str	r3, [r7, #32]
          break;
 80021ea:	e01f      	b.n	800222c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	330c      	adds	r3, #12
 80021f2:	623b      	str	r3, [r7, #32]
          break;
 80021f4:	e01a      	b.n	800222c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021fe:	2304      	movs	r3, #4
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e013      	b.n	800222c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800220c:	2308      	movs	r3, #8
 800220e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	611a      	str	r2, [r3, #16]
          break;
 8002216:	e009      	b.n	800222c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002218:	2308      	movs	r3, #8
 800221a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	615a      	str	r2, [r3, #20]
          break;
 8002222:	e003      	b.n	800222c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
          break;
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x130>
          break;
 800222a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2bff      	cmp	r3, #255	@ 0xff
 8002230:	d801      	bhi.n	8002236 <HAL_GPIO_Init+0x13a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	e001      	b.n	800223a <HAL_GPIO_Init+0x13e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2bff      	cmp	r3, #255	@ 0xff
 8002240:	d802      	bhi.n	8002248 <HAL_GPIO_Init+0x14c>
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	e002      	b.n	800224e <HAL_GPIO_Init+0x152>
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	3b08      	subs	r3, #8
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	210f      	movs	r1, #15
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	6a39      	ldr	r1, [r7, #32]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	431a      	orrs	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80b1 	beq.w	80023de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800227c:	4b4d      	ldr	r3, [pc, #308]	@ (80023b4 <HAL_GPIO_Init+0x2b8>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a4c      	ldr	r2, [pc, #304]	@ (80023b4 <HAL_GPIO_Init+0x2b8>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b4a      	ldr	r3, [pc, #296]	@ (80023b4 <HAL_GPIO_Init+0x2b8>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002294:	4a48      	ldr	r2, [pc, #288]	@ (80023b8 <HAL_GPIO_Init+0x2bc>)
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a40      	ldr	r2, [pc, #256]	@ (80023bc <HAL_GPIO_Init+0x2c0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <HAL_GPIO_Init+0x1ec>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3f      	ldr	r2, [pc, #252]	@ (80023c0 <HAL_GPIO_Init+0x2c4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00d      	beq.n	80022e4 <HAL_GPIO_Init+0x1e8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a3e      	ldr	r2, [pc, #248]	@ (80023c4 <HAL_GPIO_Init+0x2c8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <HAL_GPIO_Init+0x1e4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <HAL_GPIO_Init+0x2cc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_GPIO_Init+0x1e0>
 80022d8:	2303      	movs	r3, #3
 80022da:	e006      	b.n	80022ea <HAL_GPIO_Init+0x1ee>
 80022dc:	2304      	movs	r3, #4
 80022de:	e004      	b.n	80022ea <HAL_GPIO_Init+0x1ee>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e002      	b.n	80022ea <HAL_GPIO_Init+0x1ee>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_GPIO_Init+0x1ee>
 80022e8:	2300      	movs	r3, #0
 80022ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ec:	f002 0203 	and.w	r2, r2, #3
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	4093      	lsls	r3, r2
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022fa:	492f      	ldr	r1, [pc, #188]	@ (80023b8 <HAL_GPIO_Init+0x2bc>)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d006      	beq.n	8002322 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	492c      	ldr	r1, [pc, #176]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002322:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	43db      	mvns	r3, r3
 800232a:	4928      	ldr	r1, [pc, #160]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800232c:	4013      	ands	r3, r2
 800232e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800233c:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4922      	ldr	r1, [pc, #136]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	4313      	orrs	r3, r2
 8002346:	60cb      	str	r3, [r1, #12]
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	43db      	mvns	r3, r3
 8002352:	491e      	ldr	r1, [pc, #120]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 8002354:	4013      	ands	r3, r2
 8002356:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4918      	ldr	r1, [pc, #96]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002372:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	43db      	mvns	r3, r3
 800237a:	4914      	ldr	r1, [pc, #80]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800237c:	4013      	ands	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d021      	beq.n	80023d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800238c:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	490e      	ldr	r1, [pc, #56]	@ (80023cc <HAL_GPIO_Init+0x2d0>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e021      	b.n	80023de <HAL_GPIO_Init+0x2e2>
 800239a:	bf00      	nop
 800239c:	10320000 	.word	0x10320000
 80023a0:	10310000 	.word	0x10310000
 80023a4:	10220000 	.word	0x10220000
 80023a8:	10210000 	.word	0x10210000
 80023ac:	10120000 	.word	0x10120000
 80023b0:	10110000 	.word	0x10110000
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40010800 	.word	0x40010800
 80023c0:	40010c00 	.word	0x40010c00
 80023c4:	40011000 	.word	0x40011000
 80023c8:	40011400 	.word	0x40011400
 80023cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_GPIO_Init+0x304>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	4909      	ldr	r1, [pc, #36]	@ (8002400 <HAL_GPIO_Init+0x304>)
 80023da:	4013      	ands	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	3301      	adds	r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f47f ae8e 	bne.w	8002110 <HAL_GPIO_Init+0x14>
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	372c      	adds	r7, #44	@ 0x2c
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	40010400 	.word	0x40010400

08002404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	887b      	ldrh	r3, [r7, #2]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e001      	b.n	8002426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	807b      	strh	r3, [r7, #2]
 800243e:	4613      	mov	r3, r2
 8002440:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002442:	787b      	ldrb	r3, [r7, #1]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800244e:	e003      	b.n	8002458 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	611a      	str	r2, [r3, #16]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
	...

08002464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800246e:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800247a:	4a05      	ldr	r2, [pc, #20]	@ (8002490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f806 	bl	8002494 <HAL_GPIO_EXTI_Callback>
  }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e12b      	b.n	8002712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff f9f8 	bl	80018c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2224      	movs	r2, #36	@ 0x24
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800250a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800250c:	f002 fd18 	bl	8004f40 <HAL_RCC_GetPCLK1Freq>
 8002510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a81      	ldr	r2, [pc, #516]	@ (800271c <HAL_I2C_Init+0x274>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d807      	bhi.n	800252c <HAL_I2C_Init+0x84>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a80      	ldr	r2, [pc, #512]	@ (8002720 <HAL_I2C_Init+0x278>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e006      	b.n	800253a <HAL_I2C_Init+0x92>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a7d      	ldr	r2, [pc, #500]	@ (8002724 <HAL_I2C_Init+0x27c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	bf94      	ite	ls
 8002534:	2301      	movls	r3, #1
 8002536:	2300      	movhi	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0e7      	b.n	8002712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a78      	ldr	r2, [pc, #480]	@ (8002728 <HAL_I2C_Init+0x280>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9b      	lsrs	r3, r3, #18
 800254c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a6a      	ldr	r2, [pc, #424]	@ (800271c <HAL_I2C_Init+0x274>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d802      	bhi.n	800257c <HAL_I2C_Init+0xd4>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3301      	adds	r3, #1
 800257a:	e009      	b.n	8002590 <HAL_I2C_Init+0xe8>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	4a69      	ldr	r2, [pc, #420]	@ (800272c <HAL_I2C_Init+0x284>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	3301      	adds	r3, #1
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	495c      	ldr	r1, [pc, #368]	@ (800271c <HAL_I2C_Init+0x274>)
 80025ac:	428b      	cmp	r3, r1
 80025ae:	d819      	bhi.n	80025e4 <HAL_I2C_Init+0x13c>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e59      	subs	r1, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025c4:	400b      	ands	r3, r1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_I2C_Init+0x138>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e59      	subs	r1, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025de:	e051      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e0:	2304      	movs	r3, #4
 80025e2:	e04f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <HAL_I2C_Init+0x168>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e012      	b.n	8002636 <HAL_I2C_Init+0x18e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	0099      	lsls	r1, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	fbb0 f3f3 	udiv	r3, r0, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Init+0x196>
 800263a:	2301      	movs	r3, #1
 800263c:	e022      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <HAL_I2C_Init+0x1bc>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e58      	subs	r0, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	440b      	add	r3, r1
 8002654:	fbb0 f3f3 	udiv	r3, r0, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002662:	e00f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	6809      	ldr	r1, [r1, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6911      	ldr	r1, [r2, #16]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	000186a0 	.word	0x000186a0
 8002720:	001e847f 	.word	0x001e847f
 8002724:	003d08ff 	.word	0x003d08ff
 8002728:	431bde83 	.word	0x431bde83
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002742:	2b80      	cmp	r3, #128	@ 0x80
 8002744:	d103      	bne.n	800274e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
  }
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	461a      	mov	r2, r3
 8002764:	460b      	mov	r3, r1
 8002766:	817b      	strh	r3, [r7, #10]
 8002768:	4613      	mov	r3, r2
 800276a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff fb04 	bl	8001d78 <HAL_GetTick>
 8002770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b20      	cmp	r3, #32
 800277c:	f040 80e0 	bne.w	8002940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2319      	movs	r3, #25
 8002786:	2201      	movs	r2, #1
 8002788:	4970      	ldr	r1, [pc, #448]	@ (800294c <HAL_I2C_Master_Transmit+0x1f4>)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f001 fdea 	bl	8004364 <I2C_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
 8002798:	e0d3      	b.n	8002942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_I2C_Master_Transmit+0x50>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e0cc      	b.n	8002942 <HAL_I2C_Master_Transmit+0x1ea>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d007      	beq.n	80027ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2221      	movs	r2, #33	@ 0x21
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2210      	movs	r2, #16
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	893a      	ldrh	r2, [r7, #8]
 80027fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a50      	ldr	r2, [pc, #320]	@ (8002950 <HAL_I2C_Master_Transmit+0x1f8>)
 800280e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002810:	8979      	ldrh	r1, [r7, #10]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	6a3a      	ldr	r2, [r7, #32]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f001 fc7a 	bl	8004110 <I2C_MasterRequestWrite>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e08d      	b.n	8002942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800283c:	e066      	b.n	800290c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f001 fea8 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06b      	b.n	8002942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d11b      	bne.n	80028e0 <HAL_I2C_Master_Transmit+0x188>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	6a39      	ldr	r1, [r7, #32]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f001 fe9f 	bl	8004628 <I2C_WaitOnBTFFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d107      	bne.n	8002908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e01a      	b.n	8002942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d194      	bne.n	800283e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	00100002 	.word	0x00100002
 8002950:	ffff0000 	.word	0xffff0000

08002954 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002974:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b10      	cmp	r3, #16
 8002982:	d003      	beq.n	800298c <HAL_I2C_EV_IRQHandler+0x38>
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b40      	cmp	r3, #64	@ 0x40
 8002988:	f040 80b1 	bne.w	8002aee <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80029ac:	d003      	beq.n	80029b6 <HAL_I2C_EV_IRQHandler+0x62>
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80029b4:	d101      	bne.n	80029ba <HAL_I2C_EV_IRQHandler+0x66>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_I2C_EV_IRQHandler+0x68>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f000 8114 	beq.w	8002bea <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x90>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f001 fece 	bl	8004778 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fd74 	bl	80034ca <I2C_Master_SB>
 80029e2:	e083      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_I2C_EV_IRQHandler+0xac>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fdeb 	bl	80035d4 <I2C_Master_ADD10>
 80029fe:	e075      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_I2C_EV_IRQHandler+0xc8>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fe06 	bl	8003626 <I2C_Master_ADDR>
 8002a1a:	e067      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d036      	beq.n	8002a94 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a34:	f000 80db 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <HAL_I2C_EV_IRQHandler+0x10a>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_I2C_EV_IRQHandler+0x10a>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f9d4 	bl	8002e04 <I2C_MasterTransmit_TXE>
 8002a5c:	e046      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80c2 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80bc 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a76:	7bbb      	ldrb	r3, [r7, #14]
 8002a78:	2b21      	cmp	r3, #33	@ 0x21
 8002a7a:	d103      	bne.n	8002a84 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fa5d 	bl	8002f3c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a82:	e0b4      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	f040 80b1 	bne.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 facb 	bl	8003028 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a92:	e0ac      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa2:	f000 80a4 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x178>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x178>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb47 	bl	8003158 <I2C_MasterReceive_RXNE>
 8002aca:	e00f      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 808b 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8085 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fbff 	bl	80032e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aea:	e080      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
 8002aec:	e07f      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	e007      	b.n	8002b10 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d011      	beq.n	8002b3e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 ffcc 	bl	8003ad4 <I2C_Slave_ADDR>
 8002b3c:	e05a      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x206>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f001 f806 	bl	8003b64 <I2C_Slave_STOPF>
 8002b58:	e04c      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b5a:	7bbb      	ldrb	r3, [r7, #14]
 8002b5c:	2b21      	cmp	r3, #33	@ 0x21
 8002b5e:	d002      	beq.n	8002b66 <HAL_I2C_EV_IRQHandler+0x212>
 8002b60:	7bbb      	ldrb	r3, [r7, #14]
 8002b62:	2b29      	cmp	r3, #41	@ 0x29
 8002b64:	d120      	bne.n	8002ba8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x238>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x238>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fee9 	bl	800395c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b8a:	e032      	b.n	8002bf2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02d      	beq.n	8002bf2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d028      	beq.n	8002bf2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 ff18 	bl	80039d6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba6:	e024      	b.n	8002bf2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x27a>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x27a>
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 ff25 	bl	8003a16 <I2C_SlaveReceive_RXNE>
 8002bcc:	e012      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 ff55 	bl	8003a92 <I2C_SlaveReceive_BTF>
 8002be8:	e004      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bf2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b08a      	sub	sp, #40	@ 0x28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c1c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d015      	beq.n	8002c54 <HAL_I2C_ER_IRQHandler+0x5a>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d010      	beq.n	8002c54 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c42:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <HAL_I2C_ER_IRQHandler+0x80>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	f043 0302 	orr.w	r3, r3, #2
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002c78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d03e      	beq.n	8002d02 <HAL_I2C_ER_IRQHandler+0x108>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d039      	beq.n	8002d02 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002c8e:	7efb      	ldrb	r3, [r7, #27]
 8002c90:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ca8:	7ebb      	ldrb	r3, [r7, #26]
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d112      	bne.n	8002cd4 <HAL_I2C_ER_IRQHandler+0xda>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10f      	bne.n	8002cd4 <HAL_I2C_ER_IRQHandler+0xda>
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b21      	cmp	r3, #33	@ 0x21
 8002cb8:	d008      	beq.n	8002ccc <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	2b29      	cmp	r3, #41	@ 0x29
 8002cbe:	d005      	beq.n	8002ccc <HAL_I2C_ER_IRQHandler+0xd2>
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b28      	cmp	r3, #40	@ 0x28
 8002cc4:	d106      	bne.n	8002cd4 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b21      	cmp	r3, #33	@ 0x21
 8002cca:	d103      	bne.n	8002cd4 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f001 f879 	bl	8003dc4 <I2C_Slave_AF>
 8002cd2:	e016      	b.n	8002d02 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cdc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ce6:	7efb      	ldrb	r3, [r7, #27]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d002      	beq.n	8002cf2 <HAL_I2C_ER_IRQHandler+0xf8>
 8002cec:	7efb      	ldrb	r3, [r7, #27]
 8002cee:	2b40      	cmp	r3, #64	@ 0x40
 8002cf0:	d107      	bne.n	8002d02 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d00:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <HAL_I2C_ER_IRQHandler+0x12e>
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	f043 0308 	orr.w	r3, r3, #8
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002d26:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f001 f8b6 	bl	8003eac <I2C_ITError>
  }
}
 8002d40:	bf00      	nop
 8002d42:	3728      	adds	r7, #40	@ 0x28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d150      	bne.n	8002ecc <I2C_MasterTransmit_TXE+0xc8>
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b21      	cmp	r3, #33	@ 0x21
 8002e2e:	d14d      	bne.n	8002ecc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d01d      	beq.n	8002e72 <I2C_MasterTransmit_TXE+0x6e>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d01a      	beq.n	8002e72 <I2C_MasterTransmit_TXE+0x6e>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e42:	d016      	beq.n	8002e72 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e52:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2211      	movs	r2, #17
 8002e58:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff6c 	bl	8002d48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e70:	e060      	b.n	8002f34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e80:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e90:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	d107      	bne.n	8002ebc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff81 	bl	8002dbc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eba:	e03b      	b.n	8002f34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff3f 	bl	8002d48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eca:	e033      	b.n	8002f34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b21      	cmp	r3, #33	@ 0x21
 8002ed0:	d005      	beq.n	8002ede <I2C_MasterTransmit_TXE+0xda>
 8002ed2:	7bbb      	ldrb	r3, [r7, #14]
 8002ed4:	2b40      	cmp	r3, #64	@ 0x40
 8002ed6:	d12d      	bne.n	8002f34 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b22      	cmp	r3, #34	@ 0x22
 8002edc:	d12a      	bne.n	8002f34 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d108      	bne.n	8002efa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ef8:	e01c      	b.n	8002f34 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b40      	cmp	r3, #64	@ 0x40
 8002f04:	d103      	bne.n	8002f0e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f88e 	bl	8003028 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f0c:	e012      	b.n	8002f34 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f32:	e7ff      	b.n	8002f34 <I2C_MasterTransmit_TXE+0x130>
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b21      	cmp	r3, #33	@ 0x21
 8002f54:	d164      	bne.n	8003020 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f84:	e04c      	b.n	8003020 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d01d      	beq.n	8002fc8 <I2C_MasterTransmit_BTF+0x8c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d01a      	beq.n	8002fc8 <I2C_MasterTransmit_BTF+0x8c>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f98:	d016      	beq.n	8002fc8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fa8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2211      	movs	r2, #17
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fec1 	bl	8002d48 <HAL_I2C_MasterTxCpltCallback>
}
 8002fc6:	e02b      	b.n	8003020 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fd6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b40      	cmp	r3, #64	@ 0x40
 8003000:	d107      	bne.n	8003012 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fed6 	bl	8002dbc <HAL_I2C_MemTxCpltCallback>
}
 8003010:	e006      	b.n	8003020 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fe94 	bl	8002d48 <HAL_I2C_MasterTxCpltCallback>
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003036:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11d      	bne.n	800307c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10b      	bne.n	8003060 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304c:	b2da      	uxtb	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003058:	1c9a      	adds	r2, r3, #2
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800305e:	e077      	b.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003064:	b29b      	uxth	r3, r3
 8003066:	121b      	asrs	r3, r3, #8
 8003068:	b2da      	uxtb	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800307a:	e069      	b.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10b      	bne.n	800309c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003088:	b2da      	uxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800309a:	e059      	b.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d152      	bne.n	800314a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b22      	cmp	r3, #34	@ 0x22
 80030a8:	d10d      	bne.n	80030c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030c4:	e044      	b.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b21      	cmp	r3, #33	@ 0x21
 80030d4:	d112      	bne.n	80030fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80030fa:	e029      	b.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d124      	bne.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b21      	cmp	r3, #33	@ 0x21
 800310a:	d121      	bne.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800311a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fe3a 	bl	8002dbc <HAL_I2C_MemTxCpltCallback>
}
 8003148:	e002      	b.n	8003150 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff faf0 	bl	8002730 <I2C_Flush_DR>
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b22      	cmp	r3, #34	@ 0x22
 800316a:	f040 80b9 	bne.w	80032e0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d921      	bls.n	80031c6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	f040 8096 	bne.w	80032e0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80031c4:	e08c      	b.n	80032e0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d07f      	beq.n	80032ce <I2C_MasterReceive_RXNE+0x176>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d002      	beq.n	80031da <I2C_MasterReceive_RXNE+0x82>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d179      	bne.n	80032ce <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f001 fa6c 	bl	80046b8 <I2C_WaitOnSTOPRequestThroughIT>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d14c      	bne.n	8003280 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003204:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b40      	cmp	r3, #64	@ 0x40
 800323e:	d10a      	bne.n	8003256 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fdbd 	bl	8002dce <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003254:	e044      	b.n	80032e0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d002      	beq.n	800326a <I2C_MasterReceive_RXNE+0x112>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b20      	cmp	r3, #32
 8003268:	d103      	bne.n	8003272 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003270:	e002      	b.n	8003278 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2212      	movs	r2, #18
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fd6e 	bl	8002d5a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800327e:	e02f      	b.n	80032e0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800328e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff fd8a 	bl	8002de0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032cc:	e008      	b.n	80032e0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032dc:	605a      	str	r2, [r3, #4]
}
 80032de:	e7ff      	b.n	80032e0 <I2C_MasterReceive_RXNE+0x188>
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d11b      	bne.n	8003338 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003336:	e0c4      	b.n	80034c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b03      	cmp	r3, #3
 8003340:	d129      	bne.n	8003396 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003350:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b04      	cmp	r3, #4
 8003356:	d00a      	beq.n	800336e <I2C_MasterReceive_BTF+0x86>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d007      	beq.n	800336e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800336c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003394:	e095      	b.n	80034c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d17d      	bne.n	800349c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d002      	beq.n	80033ac <I2C_MasterReceive_BTF+0xc4>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d108      	bne.n	80033be <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e016      	b.n	80033ec <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d002      	beq.n	80033ca <I2C_MasterReceive_BTF+0xe2>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d108      	bne.n	80033dc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e007      	b.n	80033ec <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003446:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d10a      	bne.n	8003472 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fcaf 	bl	8002dce <HAL_I2C_MemRxCpltCallback>
}
 8003470:	e027      	b.n	80034c2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d002      	beq.n	8003486 <I2C_MasterReceive_BTF+0x19e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b20      	cmp	r3, #32
 8003484:	d103      	bne.n	800348e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
 800348c:	e002      	b.n	8003494 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2212      	movs	r2, #18
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fc60 	bl	8002d5a <HAL_I2C_MasterRxCpltCallback>
}
 800349a:	e012      	b.n	80034c2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b40      	cmp	r3, #64	@ 0x40
 80034dc:	d117      	bne.n	800350e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80034f8:	e067      	b.n	80035ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]
}
 800350c:	e05d      	b.n	80035ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003516:	d133      	bne.n	8003580 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b21      	cmp	r3, #33	@ 0x21
 8003522:	d109      	bne.n	8003538 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003534:	611a      	str	r2, [r3, #16]
 8003536:	e008      	b.n	800354a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <I2C_Master_SB+0x92>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003560:	2b00      	cmp	r3, #0
 8003562:	d032      	beq.n	80035ca <I2C_Master_SB+0x100>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02d      	beq.n	80035ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800357c:	605a      	str	r2, [r3, #4]
}
 800357e:	e024      	b.n	80035ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10e      	bne.n	80035a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358c:	b29b      	uxth	r3, r3
 800358e:	11db      	asrs	r3, r3, #7
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 0306 	and.w	r3, r3, #6
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f063 030f 	orn	r3, r3, #15
 800359c:	b2da      	uxtb	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]
}
 80035a4:	e011      	b.n	80035ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10d      	bne.n	80035ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	11db      	asrs	r3, r3, #7
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 0306 	and.w	r3, r3, #6
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	f063 030e 	orn	r3, r3, #14
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <I2C_Master_ADD10+0x26>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d108      	bne.n	800360c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <I2C_Master_ADD10+0x48>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361a:	605a      	str	r2, [r3, #4]
  }
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003626:	b480      	push	{r7}
 8003628:	b091      	sub	sp, #68	@ 0x44
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003634:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b22      	cmp	r3, #34	@ 0x22
 800364e:	f040 8174 	bne.w	800393a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <I2C_Master_ADDR+0x54>
 800365a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800365e:	2b40      	cmp	r3, #64	@ 0x40
 8003660:	d10b      	bne.n	800367a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	633b      	str	r3, [r7, #48]	@ 0x30
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	633b      	str	r3, [r7, #48]	@ 0x30
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	633b      	str	r3, [r7, #48]	@ 0x30
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	e16b      	b.n	8003952 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11d      	bne.n	80036be <I2C_Master_ADDR+0x98>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800368a:	d118      	bne.n	80036be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80036bc:	e149      	b.n	8003952 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d113      	bne.n	80036f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e120      	b.n	8003932 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	f040 808a 	bne.w	8003810 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80036fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003702:	d137      	bne.n	8003774 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003712:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800371e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003722:	d113      	bne.n	800374c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003732:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	e0f2      	b.n	8003932 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374c:	2300      	movs	r3, #0
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	623b      	str	r3, [r7, #32]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	623b      	str	r3, [r7, #32]
 8003760:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e0de      	b.n	8003932 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003776:	2b08      	cmp	r3, #8
 8003778:	d02e      	beq.n	80037d8 <I2C_Master_ADDR+0x1b2>
 800377a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377c:	2b20      	cmp	r3, #32
 800377e:	d02b      	beq.n	80037d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	2b12      	cmp	r3, #18
 8003784:	d102      	bne.n	800378c <I2C_Master_ADDR+0x166>
 8003786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003788:	2b01      	cmp	r3, #1
 800378a:	d125      	bne.n	80037d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800378c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378e:	2b04      	cmp	r3, #4
 8003790:	d00e      	beq.n	80037b0 <I2C_Master_ADDR+0x18a>
 8003792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003794:	2b02      	cmp	r3, #2
 8003796:	d00b      	beq.n	80037b0 <I2C_Master_ADDR+0x18a>
 8003798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379a:	2b10      	cmp	r3, #16
 800379c:	d008      	beq.n	80037b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e007      	b.n	80037c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	e0ac      	b.n	8003932 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e8:	2300      	movs	r3, #0
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e090      	b.n	8003932 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d158      	bne.n	80038cc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	2b04      	cmp	r3, #4
 800381e:	d021      	beq.n	8003864 <I2C_Master_ADDR+0x23e>
 8003820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003822:	2b02      	cmp	r3, #2
 8003824:	d01e      	beq.n	8003864 <I2C_Master_ADDR+0x23e>
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	2b10      	cmp	r3, #16
 800382a:	d01b      	beq.n	8003864 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800383a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e012      	b.n	800388a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003872:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003898:	d14b      	bne.n	8003932 <I2C_Master_ADDR+0x30c>
 800389a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038a0:	d00b      	beq.n	80038ba <I2C_Master_ADDR+0x294>
 80038a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d008      	beq.n	80038ba <I2C_Master_ADDR+0x294>
 80038a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d005      	beq.n	80038ba <I2C_Master_ADDR+0x294>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d002      	beq.n	80038ba <I2C_Master_ADDR+0x294>
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d13b      	bne.n	8003932 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	e032      	b.n	8003932 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038da:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ea:	d117      	bne.n	800391c <I2C_Master_ADDR+0x2f6>
 80038ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038f2:	d00b      	beq.n	800390c <I2C_Master_ADDR+0x2e6>
 80038f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d008      	beq.n	800390c <I2C_Master_ADDR+0x2e6>
 80038fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d005      	beq.n	800390c <I2C_Master_ADDR+0x2e6>
 8003900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003902:	2b10      	cmp	r3, #16
 8003904:	d002      	beq.n	800390c <I2C_Master_ADDR+0x2e6>
 8003906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003908:	2b20      	cmp	r3, #32
 800390a:	d107      	bne.n	800391c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800391a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003938:	e00b      	b.n	8003952 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
}
 8003950:	e7ff      	b.n	8003952 <I2C_Master_ADDR+0x32c>
 8003952:	bf00      	nop
 8003954:	3744      	adds	r7, #68	@ 0x44
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800396a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d02b      	beq.n	80039ce <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	781a      	ldrb	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d114      	bne.n	80039ce <I2C_SlaveTransmit_TXE+0x72>
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b29      	cmp	r3, #41	@ 0x29
 80039a8:	d111      	bne.n	80039ce <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2221      	movs	r2, #33	@ 0x21
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2228      	movs	r2, #40	@ 0x28
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff f9cf 	bl	8002d6c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d011      	beq.n	8003a0c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02c      	beq.n	8003a8a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d114      	bne.n	8003a8a <I2C_SlaveReceive_RXNE+0x74>
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a64:	d111      	bne.n	8003a8a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a74:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2222      	movs	r2, #34	@ 0x22
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2228      	movs	r2, #40	@ 0x28
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff f97a 	bl	8002d7e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d012      	beq.n	8003aca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003aee:	2b28      	cmp	r3, #40	@ 0x28
 8003af0:	d125      	bne.n	8003b3e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b00:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	81bb      	strh	r3, [r7, #12]
 8003b20:	e002      	b.n	8003b28 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b30:	89ba      	ldrh	r2, [r7, #12]
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff f92a 	bl	8002d90 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b3c:	e00e      	b.n	8003b5c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b84:	2300      	movs	r3, #0
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc0:	d172      	bne.n	8003ca8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b22      	cmp	r3, #34	@ 0x22
 8003bc6:	d002      	beq.n	8003bce <I2C_Slave_STOPF+0x6a>
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bcc:	d135      	bne.n	8003c3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f043 0204 	orr.w	r2, r3, #4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fa6a 	bl	80020e0 <HAL_DMA_GetState>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d049      	beq.n	8003ca6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c16:	4a69      	ldr	r2, [pc, #420]	@ (8003dbc <I2C_Slave_STOPF+0x258>)
 8003c18:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe f9e6 	bl	8001ff0 <HAL_DMA_Abort_IT>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d03d      	beq.n	8003ca6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c34:	4610      	mov	r0, r2
 8003c36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c38:	e035      	b.n	8003ca6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f043 0204 	orr.w	r2, r3, #4
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fa34 	bl	80020e0 <HAL_DMA_GetState>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d014      	beq.n	8003ca8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c82:	4a4e      	ldr	r2, [pc, #312]	@ (8003dbc <I2C_Slave_STOPF+0x258>)
 8003c84:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe f9b0 	bl	8001ff0 <HAL_DMA_Abort_IT>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4798      	blx	r3
 8003ca4:	e000      	b.n	8003ca8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ca6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d03e      	beq.n	8003d30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d112      	bne.n	8003ce6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b40      	cmp	r3, #64	@ 0x40
 8003cf2:	d112      	bne.n	8003d1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	f043 0204 	orr.w	r2, r3, #4
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8b7 	bl	8003eac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d3e:	e039      	b.n	8003db4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d44:	d109      	bne.n	8003d5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2228      	movs	r2, #40	@ 0x28
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff f812 	bl	8002d7e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b28      	cmp	r3, #40	@ 0x28
 8003d64:	d111      	bne.n	8003d8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a15      	ldr	r2, [pc, #84]	@ (8003dc0 <I2C_Slave_STOPF+0x25c>)
 8003d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff f811 	bl	8002daa <HAL_I2C_ListenCpltCallback>
}
 8003d88:	e014      	b.n	8003db4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	2b22      	cmp	r3, #34	@ 0x22
 8003d90:	d002      	beq.n	8003d98 <I2C_Slave_STOPF+0x234>
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b22      	cmp	r3, #34	@ 0x22
 8003d96:	d10d      	bne.n	8003db4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fe ffe5 	bl	8002d7e <HAL_I2C_SlaveRxCpltCallback>
}
 8003db4:	bf00      	nop
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	08004215 	.word	0x08004215
 8003dc0:	ffff0000 	.word	0xffff0000

08003dc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d002      	beq.n	8003de6 <I2C_Slave_AF+0x22>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d129      	bne.n	8003e3a <I2C_Slave_AF+0x76>
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b28      	cmp	r3, #40	@ 0x28
 8003dea:	d126      	bne.n	8003e3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea8 <I2C_Slave_AF+0xe4>)
 8003df0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe ffb9 	bl	8002daa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e38:	e031      	b.n	8003e9e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b21      	cmp	r3, #33	@ 0x21
 8003e3e:	d129      	bne.n	8003e94 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <I2C_Slave_AF+0xe4>)
 8003e44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2221      	movs	r2, #33	@ 0x21
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e84:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe fc52 	bl	8002730 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fe ff6d 	bl	8002d6c <HAL_I2C_SlaveTxCpltCallback>
}
 8003e92:	e004      	b.n	8003e9e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e9c:	615a      	str	r2, [r3, #20]
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	ffff0000 	.word	0xffff0000

08003eac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d002      	beq.n	8003ed0 <I2C_ITError+0x24>
 8003eca:	7bbb      	ldrb	r3, [r7, #14]
 8003ecc:	2b40      	cmp	r3, #64	@ 0x40
 8003ece:	d10a      	bne.n	8003ee6 <I2C_ITError+0x3a>
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b22      	cmp	r3, #34	@ 0x22
 8003ed4:	d107      	bne.n	8003ee6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003eec:	2b28      	cmp	r3, #40	@ 0x28
 8003eee:	d107      	bne.n	8003f00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2228      	movs	r2, #40	@ 0x28
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003efe:	e015      	b.n	8003f2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f0e:	d00a      	beq.n	8003f26 <I2C_ITError+0x7a>
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	2b60      	cmp	r3, #96	@ 0x60
 8003f14:	d007      	beq.n	8003f26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3a:	d162      	bne.n	8004002 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d020      	beq.n	8003f9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8004108 <I2C_ITError+0x25c>)
 8003f60:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe f842 	bl	8001ff0 <HAL_DMA_Abort_IT>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8089 	beq.w	8004086 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f96:	4610      	mov	r0, r2
 8003f98:	4798      	blx	r3
 8003f9a:	e074      	b.n	8004086 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	4a59      	ldr	r2, [pc, #356]	@ (8004108 <I2C_ITError+0x25c>)
 8003fa2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe f821 	bl	8001ff0 <HAL_DMA_Abort_IT>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d068      	beq.n	8004086 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d10b      	bne.n	8003fda <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4798      	blx	r3
 8004000:	e041      	b.n	8004086 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b60      	cmp	r3, #96	@ 0x60
 800400c:	d125      	bne.n	800405a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	d10b      	bne.n	8004042 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fe fecd 	bl	8002df2 <HAL_I2C_AbortCpltCallback>
 8004058:	e015      	b.n	8004086 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004064:	2b40      	cmp	r3, #64	@ 0x40
 8004066:	d10b      	bne.n	8004080 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fe fead 	bl	8002de0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10e      	bne.n	80040b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d104      	bne.n	80040b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d113      	bne.n	8004100 <I2C_ITError+0x254>
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b28      	cmp	r3, #40	@ 0x28
 80040dc:	d110      	bne.n	8004100 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a0a      	ldr	r2, [pc, #40]	@ (800410c <I2C_ITError+0x260>)
 80040e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe fe55 	bl	8002daa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	08004215 	.word	0x08004215
 800410c:	ffff0000 	.word	0xffff0000

08004110 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	460b      	mov	r3, r1
 800411e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d006      	beq.n	800413a <I2C_MasterRequestWrite+0x2a>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d003      	beq.n	800413a <I2C_MasterRequestWrite+0x2a>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004138:	d108      	bne.n	800414c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e00b      	b.n	8004164 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004150:	2b12      	cmp	r3, #18
 8004152:	d107      	bne.n	8004164 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004162:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f8f7 	bl	8004364 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800418a:	d103      	bne.n	8004194 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e035      	b.n	8004204 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041a0:	d108      	bne.n	80041b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041a2:	897b      	ldrh	r3, [r7, #10]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041b0:	611a      	str	r2, [r3, #16]
 80041b2:	e01b      	b.n	80041ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041b4:	897b      	ldrh	r3, [r7, #10]
 80041b6:	11db      	asrs	r3, r3, #7
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0306 	and.w	r3, r3, #6
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f063 030f 	orn	r3, r3, #15
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	490e      	ldr	r1, [pc, #56]	@ (800420c <I2C_MasterRequestWrite+0xfc>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f940 	bl	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e010      	b.n	8004204 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4907      	ldr	r1, [pc, #28]	@ (8004210 <I2C_MasterRequestWrite+0x100>)
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f930 	bl	8004458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	00010008 	.word	0x00010008
 8004210:	00010002 	.word	0x00010002

08004214 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800422e:	4b4b      	ldr	r3, [pc, #300]	@ (800435c <I2C_DMAAbort+0x148>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	08db      	lsrs	r3, r3, #3
 8004234:	4a4a      	ldr	r2, [pc, #296]	@ (8004360 <I2C_DMAAbort+0x14c>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	0a1a      	lsrs	r2, r3, #8
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00da      	lsls	r2, r3, #3
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800425a:	e00a      	b.n	8004272 <I2C_DMAAbort+0x5e>
    }
    count--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b01      	subs	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800426c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004270:	d0ea      	beq.n	8004248 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427e:	2200      	movs	r2, #0
 8004280:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	2200      	movs	r2, #0
 8004290:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2200      	movs	r2, #0
 80042a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b4:	2200      	movs	r2, #0
 80042b6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c4:	2200      	movs	r2, #0
 80042c6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b60      	cmp	r3, #96	@ 0x60
 80042e2:	d10e      	bne.n	8004302 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2200      	movs	r2, #0
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042fa:	6978      	ldr	r0, [r7, #20]
 80042fc:	f7fe fd79 	bl	8002df2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004300:	e027      	b.n	8004352 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004308:	2b28      	cmp	r3, #40	@ 0x28
 800430a:	d117      	bne.n	800433c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800432a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2228      	movs	r2, #40	@ 0x28
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800433a:	e007      	b.n	800434c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800434c:	6978      	ldr	r0, [r7, #20]
 800434e:	f7fe fd47 	bl	8002de0 <HAL_I2C_ErrorCallback>
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000040 	.word	0x20000040
 8004360:	14f8b589 	.word	0x14f8b589

08004364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004374:	e048      	b.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d044      	beq.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437e:	f7fd fcfb 	bl	8001d78 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d139      	bne.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	0c1b      	lsrs	r3, r3, #16
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d10d      	bne.n	80043ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	43da      	mvns	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4013      	ands	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	e00c      	b.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	43da      	mvns	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d116      	bne.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e023      	b.n	8004450 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	0c1b      	lsrs	r3, r3, #16
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10d      	bne.n	800442e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	e00c      	b.n	8004448 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	43da      	mvns	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	429a      	cmp	r2, r3
 800444c:	d093      	beq.n	8004376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004466:	e071      	b.n	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	d123      	bne.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004486:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	f043 0204 	orr.w	r2, r3, #4
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e067      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d041      	beq.n	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c8:	f7fd fc56 	bl	8001d78 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d302      	bcc.n	80044de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d136      	bne.n	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10c      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	43da      	mvns	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e00b      	b.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	43da      	mvns	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e021      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d10c      	bne.n	8004570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	43da      	mvns	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e00b      	b.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	f47f af6d 	bne.w	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a4:	e034      	b.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f8b8 	bl	800471c <I2C_IsAcknowledgeFailed>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e034      	b.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d028      	beq.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fd fbdb 	bl	8001d78 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11d      	bne.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045de:	2b80      	cmp	r3, #128	@ 0x80
 80045e0:	d016      	beq.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e007      	b.n	8004620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b80      	cmp	r3, #128	@ 0x80
 800461c:	d1c3      	bne.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004634:	e034      	b.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f870 	bl	800471c <I2C_IsAcknowledgeFailed>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e034      	b.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d028      	beq.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fd fb93 	bl	8001d78 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11d      	bne.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b04      	cmp	r3, #4
 8004670:	d016      	beq.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e007      	b.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d1c3      	bne.n	8004636 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80046c4:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	4a13      	ldr	r2, [pc, #76]	@ (8004718 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	0a1a      	lsrs	r2, r3, #8
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b01      	subs	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d107      	bne.n	80046f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e008      	b.n	8004708 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004704:	d0e9      	beq.n	80046da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000040 	.word	0x20000040
 8004718:	14f8b589 	.word	0x14f8b589

0800471c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004732:	d11b      	bne.n	800476c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800473c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	f043 0204 	orr.w	r2, r3, #4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr

08004778 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004788:	d103      	bne.n	8004792 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004790:	e007      	b.n	80047a2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800479a:	d102      	bne.n	80047a2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2208      	movs	r2, #8
 80047a0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e272      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8087 	beq.w	80048da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047cc:	4b92      	ldr	r3, [pc, #584]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d00c      	beq.n	80047f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d112      	bne.n	800480a <HAL_RCC_OscConfig+0x5e>
 80047e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f0:	d10b      	bne.n	800480a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f2:	4b89      	ldr	r3, [pc, #548]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d06c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x12c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d168      	bne.n	80048d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e24c      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x76>
 8004814:	4b80      	ldr	r3, [pc, #512]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a7f      	ldr	r2, [pc, #508]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800481a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	e02e      	b.n	8004880 <HAL_RCC_OscConfig+0xd4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0x98>
 800482a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a7a      	ldr	r2, [pc, #488]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004830:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	4b78      	ldr	r3, [pc, #480]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a77      	ldr	r2, [pc, #476]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800483c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e01d      	b.n	8004880 <HAL_RCC_OscConfig+0xd4>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800484c:	d10c      	bne.n	8004868 <HAL_RCC_OscConfig+0xbc>
 800484e:	4b72      	ldr	r3, [pc, #456]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a71      	ldr	r2, [pc, #452]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6e      	ldr	r2, [pc, #440]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e00b      	b.n	8004880 <HAL_RCC_OscConfig+0xd4>
 8004868:	4b6b      	ldr	r3, [pc, #428]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a6a      	ldr	r2, [pc, #424]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800486e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4b68      	ldr	r3, [pc, #416]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a67      	ldr	r2, [pc, #412]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800487a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800487e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d013      	beq.n	80048b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fd fa76 	bl	8001d78 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004890:	f7fd fa72 	bl	8001d78 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e200      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0xe4>
 80048ae:	e014      	b.n	80048da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fd fa62 	bl	8001d78 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b8:	f7fd fa5e 	bl	8001d78 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	@ 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e1ec      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	4b53      	ldr	r3, [pc, #332]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x10c>
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d063      	beq.n	80049ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048f2:	4b49      	ldr	r3, [pc, #292]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d11c      	bne.n	8004938 <HAL_RCC_OscConfig+0x18c>
 80048fe:	4b46      	ldr	r3, [pc, #280]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d116      	bne.n	8004938 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490a:	4b43      	ldr	r3, [pc, #268]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <HAL_RCC_OscConfig+0x176>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e1c0      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004922:	4b3d      	ldr	r3, [pc, #244]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4939      	ldr	r1, [pc, #228]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004936:	e03a      	b.n	80049ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d020      	beq.n	8004982 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004940:	4b36      	ldr	r3, [pc, #216]	@ (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004946:	f7fd fa17 	bl	8001d78 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800494e:	f7fd fa13 	bl	8001d78 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e1a1      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	4b2d      	ldr	r3, [pc, #180]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4927      	ldr	r1, [pc, #156]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]
 8004980:	e015      	b.n	80049ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004982:	4b26      	ldr	r3, [pc, #152]	@ (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fd f9f6 	bl	8001d78 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004990:	f7fd f9f2 	bl	8001d78 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e180      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03a      	beq.n	8004a30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d019      	beq.n	80049f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c2:	4b17      	ldr	r3, [pc, #92]	@ (8004a20 <HAL_RCC_OscConfig+0x274>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c8:	f7fd f9d6 	bl	8001d78 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d0:	f7fd f9d2 	bl	8001d78 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e160      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <HAL_RCC_OscConfig+0x26c>)
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049ee:	2001      	movs	r0, #1
 80049f0:	f000 faba 	bl	8004f68 <RCC_Delay>
 80049f4:	e01c      	b.n	8004a30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <HAL_RCC_OscConfig+0x274>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fc:	f7fd f9bc 	bl	8001d78 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a02:	e00f      	b.n	8004a24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a04:	f7fd f9b8 	bl	8001d78 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d908      	bls.n	8004a24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e146      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	42420000 	.word	0x42420000
 8004a20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a24:	4b92      	ldr	r3, [pc, #584]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e9      	bne.n	8004a04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a6 	beq.w	8004b8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a42:	4b8b      	ldr	r3, [pc, #556]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10d      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4e:	4b88      	ldr	r3, [pc, #544]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	4a87      	ldr	r2, [pc, #540]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	61d3      	str	r3, [r2, #28]
 8004a5a:	4b85      	ldr	r3, [pc, #532]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6a:	4b82      	ldr	r3, [pc, #520]	@ (8004c74 <HAL_RCC_OscConfig+0x4c8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d118      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a76:	4b7f      	ldr	r3, [pc, #508]	@ (8004c74 <HAL_RCC_OscConfig+0x4c8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c74 <HAL_RCC_OscConfig+0x4c8>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a82:	f7fd f979 	bl	8001d78 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8a:	f7fd f975 	bl	8001d78 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b64      	cmp	r3, #100	@ 0x64
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e103      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	4b75      	ldr	r3, [pc, #468]	@ (8004c74 <HAL_RCC_OscConfig+0x4c8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d106      	bne.n	8004abe <HAL_RCC_OscConfig+0x312>
 8004ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	4a6e      	ldr	r2, [pc, #440]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	6213      	str	r3, [r2, #32]
 8004abc:	e02d      	b.n	8004b1a <HAL_RCC_OscConfig+0x36e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x334>
 8004ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4a69      	ldr	r2, [pc, #420]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	6213      	str	r3, [r2, #32]
 8004ad2:	4b67      	ldr	r3, [pc, #412]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	4a66      	ldr	r2, [pc, #408]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	f023 0304 	bic.w	r3, r3, #4
 8004adc:	6213      	str	r3, [r2, #32]
 8004ade:	e01c      	b.n	8004b1a <HAL_RCC_OscConfig+0x36e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d10c      	bne.n	8004b02 <HAL_RCC_OscConfig+0x356>
 8004ae8:	4b61      	ldr	r3, [pc, #388]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	4a60      	ldr	r2, [pc, #384]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	f043 0304 	orr.w	r3, r3, #4
 8004af2:	6213      	str	r3, [r2, #32]
 8004af4:	4b5e      	ldr	r3, [pc, #376]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	4a5d      	ldr	r2, [pc, #372]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	6213      	str	r3, [r2, #32]
 8004b00:	e00b      	b.n	8004b1a <HAL_RCC_OscConfig+0x36e>
 8004b02:	4b5b      	ldr	r3, [pc, #364]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	4a5a      	ldr	r2, [pc, #360]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	6213      	str	r3, [r2, #32]
 8004b0e:	4b58      	ldr	r3, [pc, #352]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4a57      	ldr	r2, [pc, #348]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d015      	beq.n	8004b4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b22:	f7fd f929 	bl	8001d78 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fd f925 	bl	8001d78 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0b1      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b40:	4b4b      	ldr	r3, [pc, #300]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ee      	beq.n	8004b2a <HAL_RCC_OscConfig+0x37e>
 8004b4c:	e014      	b.n	8004b78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4e:	f7fd f913 	bl	8001d78 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fd f90f 	bl	8001d78 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e09b      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6c:	4b40      	ldr	r3, [pc, #256]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ee      	bne.n	8004b56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d105      	bne.n	8004b8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8087 	beq.w	8004ca2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b94:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d061      	beq.n	8004c64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d146      	bne.n	8004c36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba8:	4b33      	ldr	r3, [pc, #204]	@ (8004c78 <HAL_RCC_OscConfig+0x4cc>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fd f8e3 	bl	8001d78 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fd f8df 	bl	8001d78 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e06d      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc8:	4b29      	ldr	r3, [pc, #164]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bdc:	d108      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bde:	4b24      	ldr	r3, [pc, #144]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	4921      	ldr	r1, [pc, #132]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a19      	ldr	r1, [r3, #32]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	430b      	orrs	r3, r1
 8004c02:	491b      	ldr	r1, [pc, #108]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c08:	4b1b      	ldr	r3, [pc, #108]	@ (8004c78 <HAL_RCC_OscConfig+0x4cc>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0e:	f7fd f8b3 	bl	8001d78 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c16:	f7fd f8af 	bl	8001d78 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e03d      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c28:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x46a>
 8004c34:	e035      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c36:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <HAL_RCC_OscConfig+0x4cc>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3c:	f7fd f89c 	bl	8001d78 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fd f898 	bl	8001d78 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e026      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c56:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x498>
 8004c62:	e01e      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e019      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
 8004c70:	40021000 	.word	0x40021000
 8004c74:	40007000 	.word	0x40007000
 8004c78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <HAL_RCC_OscConfig+0x500>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d106      	bne.n	8004c9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000

08004cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0d0      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d910      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b67      	ldr	r3, [pc, #412]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 0207 	bic.w	r2, r3, #7
 8004cda:	4965      	ldr	r1, [pc, #404]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b63      	ldr	r3, [pc, #396]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0b8      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d0c:	4b59      	ldr	r3, [pc, #356]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a58      	ldr	r2, [pc, #352]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d24:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a52      	ldr	r2, [pc, #328]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b50      	ldr	r3, [pc, #320]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	494d      	ldr	r1, [pc, #308]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d040      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b47      	ldr	r3, [pc, #284]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d115      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b41      	ldr	r3, [pc, #260]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e073      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e06b      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4b39      	ldr	r3, [pc, #228]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4936      	ldr	r1, [pc, #216]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da0:	f7fc ffea 	bl	8001d78 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da8:	f7fc ffe6 	bl	8001d78 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e053      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1eb      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b27      	ldr	r3, [pc, #156]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d210      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b24      	ldr	r3, [pc, #144]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 0207 	bic.w	r2, r3, #7
 8004de6:	4922      	ldr	r1, [pc, #136]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e032      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b19      	ldr	r3, [pc, #100]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4916      	ldr	r1, [pc, #88]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	490e      	ldr	r1, [pc, #56]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e3e:	f000 f821 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e42:	4602      	mov	r2, r0
 8004e44:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	490a      	ldr	r1, [pc, #40]	@ (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	5ccb      	ldrb	r3, [r1, r3]
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <HAL_RCC_ClockConfig+0x1cc>)
 8004e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e5a:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCC_ClockConfig+0x1d0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc ff48 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40022000 	.word	0x40022000
 8004e74:	40021000 	.word	0x40021000
 8004e78:	080061c0 	.word	0x080061c0
 8004e7c:	20000040 	.word	0x20000040
 8004e80:	20000048 	.word	0x20000048

08004e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	2300      	movs	r3, #0
 8004e98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d002      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x30>
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d003      	beq.n	8004eba <HAL_RCC_GetSysClockFreq+0x36>
 8004eb2:	e027      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004eb4:	4b19      	ldr	r3, [pc, #100]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004eb6:	613b      	str	r3, [r7, #16]
      break;
 8004eb8:	e027      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	0c9b      	lsrs	r3, r3, #18
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	4a17      	ldr	r2, [pc, #92]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ec4:	5cd3      	ldrb	r3, [r2, r3]
 8004ec6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ed2:	4b11      	ldr	r3, [pc, #68]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	0c5b      	lsrs	r3, r3, #17
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	4a11      	ldr	r2, [pc, #68]	@ (8004f24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004ede:	5cd3      	ldrb	r3, [r2, r3]
 8004ee0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ee6:	fb03 f202 	mul.w	r2, r3, r2
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e004      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ef8:	fb02 f303 	mul.w	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	613b      	str	r3, [r7, #16]
      break;
 8004f02:	e002      	b.n	8004f0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f04:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x98>)
 8004f06:	613b      	str	r3, [r7, #16]
      break;
 8004f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f0a:	693b      	ldr	r3, [r7, #16]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	007a1200 	.word	0x007a1200
 8004f20:	080061d8 	.word	0x080061d8
 8004f24:	080061e8 	.word	0x080061e8
 8004f28:	003d0900 	.word	0x003d0900

08004f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f30:	4b02      	ldr	r3, [pc, #8]	@ (8004f3c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	20000040 	.word	0x20000040

08004f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f44:	f7ff fff2 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4903      	ldr	r1, [pc, #12]	@ (8004f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f56:	5ccb      	ldrb	r3, [r1, r3]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40021000 	.word	0x40021000
 8004f64:	080061d0 	.word	0x080061d0

08004f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f70:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <RCC_Delay+0x34>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa0 <RCC_Delay+0x38>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	0a5b      	lsrs	r3, r3, #9
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f84:	bf00      	nop
  }
  while (Delay --);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1e5a      	subs	r2, r3, #1
 8004f8a:	60fa      	str	r2, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1f9      	bne.n	8004f84 <RCC_Delay+0x1c>
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	20000040 	.word	0x20000040
 8004fa0:	10624dd3 	.word	0x10624dd3

08004fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e041      	b.n	800503a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc fcda 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f000 fa5c 	bl	80054a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d001      	beq.n	800505c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e03a      	b.n	80050d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a18      	ldr	r2, [pc, #96]	@ (80050dc <HAL_TIM_Base_Start_IT+0x98>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x58>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005086:	d009      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x58>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a14      	ldr	r2, [pc, #80]	@ (80050e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x58>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a13      	ldr	r2, [pc, #76]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d111      	bne.n	80050c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d010      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	e007      	b.n	80050d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800

080050e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d020      	beq.n	800514c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01b      	beq.n	800514c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0202 	mvn.w	r2, #2
 800511c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f998 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f98b 	bl	8005456 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f99a 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d020      	beq.n	8005198 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0204 	mvn.w	r2, #4
 8005168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f972 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f965 	bl	8005456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f974 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d020      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0208 	mvn.w	r2, #8
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2204      	movs	r2, #4
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f94c 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f93f 	bl	8005456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f94e 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01b      	beq.n	8005230 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0210 	mvn.w	r2, #16
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2208      	movs	r2, #8
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f926 	bl	8005468 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f919 	bl	8005456 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f928 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0201 	mvn.w	r2, #1
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fb fe2c 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa7f 	bl	8005776 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00c      	beq.n	800529c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8f8 	bl	800548c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00c      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0220 	mvn.w	r2, #32
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa52 	bl	8005764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_TIM_ConfigClockSource+0x1c>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e0b4      	b.n	800544e <HAL_TIM_ConfigClockSource+0x186>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800530a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531c:	d03e      	beq.n	800539c <HAL_TIM_ConfigClockSource+0xd4>
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005322:	f200 8087 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532a:	f000 8086 	beq.w	800543a <HAL_TIM_ConfigClockSource+0x172>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005332:	d87f      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005334:	2b70      	cmp	r3, #112	@ 0x70
 8005336:	d01a      	beq.n	800536e <HAL_TIM_ConfigClockSource+0xa6>
 8005338:	2b70      	cmp	r3, #112	@ 0x70
 800533a:	d87b      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 800533c:	2b60      	cmp	r3, #96	@ 0x60
 800533e:	d050      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005340:	2b60      	cmp	r3, #96	@ 0x60
 8005342:	d877      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005344:	2b50      	cmp	r3, #80	@ 0x50
 8005346:	d03c      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005348:	2b50      	cmp	r3, #80	@ 0x50
 800534a:	d873      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d058      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x13a>
 8005350:	2b40      	cmp	r3, #64	@ 0x40
 8005352:	d86f      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005354:	2b30      	cmp	r3, #48	@ 0x30
 8005356:	d064      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x15a>
 8005358:	2b30      	cmp	r3, #48	@ 0x30
 800535a:	d86b      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 800535c:	2b20      	cmp	r3, #32
 800535e:	d060      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x15a>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d867      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d05c      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x15a>
 8005368:	2b10      	cmp	r3, #16
 800536a:	d05a      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x15a>
 800536c:	e062      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800537e:	f000 f974 	bl	800566a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	609a      	str	r2, [r3, #8]
      break;
 800539a:	e04f      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ac:	f000 f95d 	bl	800566a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053be:	609a      	str	r2, [r3, #8]
      break;
 80053c0:	e03c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ce:	461a      	mov	r2, r3
 80053d0:	f000 f8d4 	bl	800557c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2150      	movs	r1, #80	@ 0x50
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f92b 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 80053e0:	e02c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 f8f2 	bl	80055d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2160      	movs	r1, #96	@ 0x60
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f91b 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005400:	e01c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	461a      	mov	r2, r3
 8005410:	f000 f8b4 	bl	800557c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2140      	movs	r1, #64	@ 0x40
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f90b 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005420:	e00c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 f902 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005432:	e003      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
      break;
 8005438:	e000      	b.n	800543c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800543a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
	...

080054a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005570 <TIM_Base_SetConfig+0xd0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054be:	d007      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005574 <TIM_Base_SetConfig+0xd4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <TIM_Base_SetConfig+0xd8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d108      	bne.n	80054e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a22      	ldr	r2, [pc, #136]	@ (8005570 <TIM_Base_SetConfig+0xd0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f0:	d007      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005574 <TIM_Base_SetConfig+0xd4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005578 <TIM_Base_SetConfig+0xd8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a0d      	ldr	r2, [pc, #52]	@ (8005570 <TIM_Base_SetConfig+0xd0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]
  }
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800

0800557c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f023 030a 	bic.w	r3, r3, #10
 80055b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0210 	bic.w	r2, r3, #16
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	031b      	lsls	r3, r3, #12
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	621a      	str	r2, [r3, #32]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	f043 0307 	orr.w	r3, r3, #7
 8005658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800566a:	b480      	push	{r7}
 800566c:	b087      	sub	sp, #28
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005684:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	021a      	lsls	r2, r3, #8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	431a      	orrs	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4313      	orrs	r3, r2
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	609a      	str	r2, [r3, #8]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056bc:	2302      	movs	r3, #2
 80056be:	e046      	b.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a16      	ldr	r2, [pc, #88]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570c:	d009      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a12      	ldr	r2, [pc, #72]	@ (800575c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d10c      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800

08005764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <malloc>:
 8005788:	4b02      	ldr	r3, [pc, #8]	@ (8005794 <malloc+0xc>)
 800578a:	4601      	mov	r1, r0
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	f000 b82d 	b.w	80057ec <_malloc_r>
 8005792:	bf00      	nop
 8005794:	20000050 	.word	0x20000050

08005798 <free>:
 8005798:	4b02      	ldr	r3, [pc, #8]	@ (80057a4 <free+0xc>)
 800579a:	4601      	mov	r1, r0
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	f000 b915 	b.w	80059cc <_free_r>
 80057a2:	bf00      	nop
 80057a4:	20000050 	.word	0x20000050

080057a8 <sbrk_aligned>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	4e0f      	ldr	r6, [pc, #60]	@ (80057e8 <sbrk_aligned+0x40>)
 80057ac:	460c      	mov	r4, r1
 80057ae:	6831      	ldr	r1, [r6, #0]
 80057b0:	4605      	mov	r5, r0
 80057b2:	b911      	cbnz	r1, 80057ba <sbrk_aligned+0x12>
 80057b4:	f000 f8ce 	bl	8005954 <_sbrk_r>
 80057b8:	6030      	str	r0, [r6, #0]
 80057ba:	4621      	mov	r1, r4
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 f8c9 	bl	8005954 <_sbrk_r>
 80057c2:	1c43      	adds	r3, r0, #1
 80057c4:	d103      	bne.n	80057ce <sbrk_aligned+0x26>
 80057c6:	f04f 34ff 	mov.w	r4, #4294967295
 80057ca:	4620      	mov	r0, r4
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
 80057ce:	1cc4      	adds	r4, r0, #3
 80057d0:	f024 0403 	bic.w	r4, r4, #3
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d0f8      	beq.n	80057ca <sbrk_aligned+0x22>
 80057d8:	1a21      	subs	r1, r4, r0
 80057da:	4628      	mov	r0, r5
 80057dc:	f000 f8ba 	bl	8005954 <_sbrk_r>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d1f2      	bne.n	80057ca <sbrk_aligned+0x22>
 80057e4:	e7ef      	b.n	80057c6 <sbrk_aligned+0x1e>
 80057e6:	bf00      	nop
 80057e8:	200001f0 	.word	0x200001f0

080057ec <_malloc_r>:
 80057ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057f0:	1ccd      	adds	r5, r1, #3
 80057f2:	f025 0503 	bic.w	r5, r5, #3
 80057f6:	3508      	adds	r5, #8
 80057f8:	2d0c      	cmp	r5, #12
 80057fa:	bf38      	it	cc
 80057fc:	250c      	movcc	r5, #12
 80057fe:	2d00      	cmp	r5, #0
 8005800:	4606      	mov	r6, r0
 8005802:	db01      	blt.n	8005808 <_malloc_r+0x1c>
 8005804:	42a9      	cmp	r1, r5
 8005806:	d904      	bls.n	8005812 <_malloc_r+0x26>
 8005808:	230c      	movs	r3, #12
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	2000      	movs	r0, #0
 800580e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005812:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058e8 <_malloc_r+0xfc>
 8005816:	f000 f869 	bl	80058ec <__malloc_lock>
 800581a:	f8d8 3000 	ldr.w	r3, [r8]
 800581e:	461c      	mov	r4, r3
 8005820:	bb44      	cbnz	r4, 8005874 <_malloc_r+0x88>
 8005822:	4629      	mov	r1, r5
 8005824:	4630      	mov	r0, r6
 8005826:	f7ff ffbf 	bl	80057a8 <sbrk_aligned>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	4604      	mov	r4, r0
 800582e:	d158      	bne.n	80058e2 <_malloc_r+0xf6>
 8005830:	f8d8 4000 	ldr.w	r4, [r8]
 8005834:	4627      	mov	r7, r4
 8005836:	2f00      	cmp	r7, #0
 8005838:	d143      	bne.n	80058c2 <_malloc_r+0xd6>
 800583a:	2c00      	cmp	r4, #0
 800583c:	d04b      	beq.n	80058d6 <_malloc_r+0xea>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	4639      	mov	r1, r7
 8005842:	4630      	mov	r0, r6
 8005844:	eb04 0903 	add.w	r9, r4, r3
 8005848:	f000 f884 	bl	8005954 <_sbrk_r>
 800584c:	4581      	cmp	r9, r0
 800584e:	d142      	bne.n	80058d6 <_malloc_r+0xea>
 8005850:	6821      	ldr	r1, [r4, #0]
 8005852:	4630      	mov	r0, r6
 8005854:	1a6d      	subs	r5, r5, r1
 8005856:	4629      	mov	r1, r5
 8005858:	f7ff ffa6 	bl	80057a8 <sbrk_aligned>
 800585c:	3001      	adds	r0, #1
 800585e:	d03a      	beq.n	80058d6 <_malloc_r+0xea>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	442b      	add	r3, r5
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	f8d8 3000 	ldr.w	r3, [r8]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	bb62      	cbnz	r2, 80058c8 <_malloc_r+0xdc>
 800586e:	f8c8 7000 	str.w	r7, [r8]
 8005872:	e00f      	b.n	8005894 <_malloc_r+0xa8>
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	1b52      	subs	r2, r2, r5
 8005878:	d420      	bmi.n	80058bc <_malloc_r+0xd0>
 800587a:	2a0b      	cmp	r2, #11
 800587c:	d917      	bls.n	80058ae <_malloc_r+0xc2>
 800587e:	1961      	adds	r1, r4, r5
 8005880:	42a3      	cmp	r3, r4
 8005882:	6025      	str	r5, [r4, #0]
 8005884:	bf18      	it	ne
 8005886:	6059      	strne	r1, [r3, #4]
 8005888:	6863      	ldr	r3, [r4, #4]
 800588a:	bf08      	it	eq
 800588c:	f8c8 1000 	streq.w	r1, [r8]
 8005890:	5162      	str	r2, [r4, r5]
 8005892:	604b      	str	r3, [r1, #4]
 8005894:	4630      	mov	r0, r6
 8005896:	f000 f82f 	bl	80058f8 <__malloc_unlock>
 800589a:	f104 000b 	add.w	r0, r4, #11
 800589e:	1d23      	adds	r3, r4, #4
 80058a0:	f020 0007 	bic.w	r0, r0, #7
 80058a4:	1ac2      	subs	r2, r0, r3
 80058a6:	bf1c      	itt	ne
 80058a8:	1a1b      	subne	r3, r3, r0
 80058aa:	50a3      	strne	r3, [r4, r2]
 80058ac:	e7af      	b.n	800580e <_malloc_r+0x22>
 80058ae:	6862      	ldr	r2, [r4, #4]
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	bf0c      	ite	eq
 80058b4:	f8c8 2000 	streq.w	r2, [r8]
 80058b8:	605a      	strne	r2, [r3, #4]
 80058ba:	e7eb      	b.n	8005894 <_malloc_r+0xa8>
 80058bc:	4623      	mov	r3, r4
 80058be:	6864      	ldr	r4, [r4, #4]
 80058c0:	e7ae      	b.n	8005820 <_malloc_r+0x34>
 80058c2:	463c      	mov	r4, r7
 80058c4:	687f      	ldr	r7, [r7, #4]
 80058c6:	e7b6      	b.n	8005836 <_malloc_r+0x4a>
 80058c8:	461a      	mov	r2, r3
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	42a3      	cmp	r3, r4
 80058ce:	d1fb      	bne.n	80058c8 <_malloc_r+0xdc>
 80058d0:	2300      	movs	r3, #0
 80058d2:	6053      	str	r3, [r2, #4]
 80058d4:	e7de      	b.n	8005894 <_malloc_r+0xa8>
 80058d6:	230c      	movs	r3, #12
 80058d8:	4630      	mov	r0, r6
 80058da:	6033      	str	r3, [r6, #0]
 80058dc:	f000 f80c 	bl	80058f8 <__malloc_unlock>
 80058e0:	e794      	b.n	800580c <_malloc_r+0x20>
 80058e2:	6005      	str	r5, [r0, #0]
 80058e4:	e7d6      	b.n	8005894 <_malloc_r+0xa8>
 80058e6:	bf00      	nop
 80058e8:	200001f4 	.word	0x200001f4

080058ec <__malloc_lock>:
 80058ec:	4801      	ldr	r0, [pc, #4]	@ (80058f4 <__malloc_lock+0x8>)
 80058ee:	f000 b86b 	b.w	80059c8 <__retarget_lock_acquire_recursive>
 80058f2:	bf00      	nop
 80058f4:	20000334 	.word	0x20000334

080058f8 <__malloc_unlock>:
 80058f8:	4801      	ldr	r0, [pc, #4]	@ (8005900 <__malloc_unlock+0x8>)
 80058fa:	f000 b866 	b.w	80059ca <__retarget_lock_release_recursive>
 80058fe:	bf00      	nop
 8005900:	20000334 	.word	0x20000334

08005904 <siprintf>:
 8005904:	b40e      	push	{r1, r2, r3}
 8005906:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800590a:	b500      	push	{lr}
 800590c:	b09c      	sub	sp, #112	@ 0x70
 800590e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005910:	9002      	str	r0, [sp, #8]
 8005912:	9006      	str	r0, [sp, #24]
 8005914:	9107      	str	r1, [sp, #28]
 8005916:	9104      	str	r1, [sp, #16]
 8005918:	4808      	ldr	r0, [pc, #32]	@ (800593c <siprintf+0x38>)
 800591a:	4909      	ldr	r1, [pc, #36]	@ (8005940 <siprintf+0x3c>)
 800591c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005920:	9105      	str	r1, [sp, #20]
 8005922:	6800      	ldr	r0, [r0, #0]
 8005924:	a902      	add	r1, sp, #8
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	f000 f8f4 	bl	8005b14 <_svfiprintf_r>
 800592c:	2200      	movs	r2, #0
 800592e:	9b02      	ldr	r3, [sp, #8]
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	b01c      	add	sp, #112	@ 0x70
 8005934:	f85d eb04 	ldr.w	lr, [sp], #4
 8005938:	b003      	add	sp, #12
 800593a:	4770      	bx	lr
 800593c:	20000050 	.word	0x20000050
 8005940:	ffff0208 	.word	0xffff0208

08005944 <memset>:
 8005944:	4603      	mov	r3, r0
 8005946:	4402      	add	r2, r0
 8005948:	4293      	cmp	r3, r2
 800594a:	d100      	bne.n	800594e <memset+0xa>
 800594c:	4770      	bx	lr
 800594e:	f803 1b01 	strb.w	r1, [r3], #1
 8005952:	e7f9      	b.n	8005948 <memset+0x4>

08005954 <_sbrk_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	2300      	movs	r3, #0
 8005958:	4d05      	ldr	r5, [pc, #20]	@ (8005970 <_sbrk_r+0x1c>)
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f7fc f886 	bl	8001a70 <_sbrk>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_sbrk_r+0x1a>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_sbrk_r+0x1a>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20000330 	.word	0x20000330

08005974 <__errno>:
 8005974:	4b01      	ldr	r3, [pc, #4]	@ (800597c <__errno+0x8>)
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000050 	.word	0x20000050

08005980 <__libc_init_array>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	2600      	movs	r6, #0
 8005984:	4d0c      	ldr	r5, [pc, #48]	@ (80059b8 <__libc_init_array+0x38>)
 8005986:	4c0d      	ldr	r4, [pc, #52]	@ (80059bc <__libc_init_array+0x3c>)
 8005988:	1b64      	subs	r4, r4, r5
 800598a:	10a4      	asrs	r4, r4, #2
 800598c:	42a6      	cmp	r6, r4
 800598e:	d109      	bne.n	80059a4 <__libc_init_array+0x24>
 8005990:	f000 fbba 	bl	8006108 <_init>
 8005994:	2600      	movs	r6, #0
 8005996:	4d0a      	ldr	r5, [pc, #40]	@ (80059c0 <__libc_init_array+0x40>)
 8005998:	4c0a      	ldr	r4, [pc, #40]	@ (80059c4 <__libc_init_array+0x44>)
 800599a:	1b64      	subs	r4, r4, r5
 800599c:	10a4      	asrs	r4, r4, #2
 800599e:	42a6      	cmp	r6, r4
 80059a0:	d105      	bne.n	80059ae <__libc_init_array+0x2e>
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a8:	4798      	blx	r3
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7ee      	b.n	800598c <__libc_init_array+0xc>
 80059ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b2:	4798      	blx	r3
 80059b4:	3601      	adds	r6, #1
 80059b6:	e7f2      	b.n	800599e <__libc_init_array+0x1e>
 80059b8:	08006220 	.word	0x08006220
 80059bc:	08006220 	.word	0x08006220
 80059c0:	08006220 	.word	0x08006220
 80059c4:	08006224 	.word	0x08006224

080059c8 <__retarget_lock_acquire_recursive>:
 80059c8:	4770      	bx	lr

080059ca <__retarget_lock_release_recursive>:
 80059ca:	4770      	bx	lr

080059cc <_free_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4605      	mov	r5, r0
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d040      	beq.n	8005a56 <_free_r+0x8a>
 80059d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059d8:	1f0c      	subs	r4, r1, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bfb8      	it	lt
 80059de:	18e4      	addlt	r4, r4, r3
 80059e0:	f7ff ff84 	bl	80058ec <__malloc_lock>
 80059e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a58 <_free_r+0x8c>)
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	b933      	cbnz	r3, 80059f8 <_free_r+0x2c>
 80059ea:	6063      	str	r3, [r4, #4]
 80059ec:	6014      	str	r4, [r2, #0]
 80059ee:	4628      	mov	r0, r5
 80059f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059f4:	f7ff bf80 	b.w	80058f8 <__malloc_unlock>
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	d908      	bls.n	8005a0e <_free_r+0x42>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	1821      	adds	r1, r4, r0
 8005a00:	428b      	cmp	r3, r1
 8005a02:	bf01      	itttt	eq
 8005a04:	6819      	ldreq	r1, [r3, #0]
 8005a06:	685b      	ldreq	r3, [r3, #4]
 8005a08:	1809      	addeq	r1, r1, r0
 8005a0a:	6021      	streq	r1, [r4, #0]
 8005a0c:	e7ed      	b.n	80059ea <_free_r+0x1e>
 8005a0e:	461a      	mov	r2, r3
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	b10b      	cbz	r3, 8005a18 <_free_r+0x4c>
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	d9fa      	bls.n	8005a0e <_free_r+0x42>
 8005a18:	6811      	ldr	r1, [r2, #0]
 8005a1a:	1850      	adds	r0, r2, r1
 8005a1c:	42a0      	cmp	r0, r4
 8005a1e:	d10b      	bne.n	8005a38 <_free_r+0x6c>
 8005a20:	6820      	ldr	r0, [r4, #0]
 8005a22:	4401      	add	r1, r0
 8005a24:	1850      	adds	r0, r2, r1
 8005a26:	4283      	cmp	r3, r0
 8005a28:	6011      	str	r1, [r2, #0]
 8005a2a:	d1e0      	bne.n	80059ee <_free_r+0x22>
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4408      	add	r0, r1
 8005a32:	6010      	str	r0, [r2, #0]
 8005a34:	6053      	str	r3, [r2, #4]
 8005a36:	e7da      	b.n	80059ee <_free_r+0x22>
 8005a38:	d902      	bls.n	8005a40 <_free_r+0x74>
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	e7d6      	b.n	80059ee <_free_r+0x22>
 8005a40:	6820      	ldr	r0, [r4, #0]
 8005a42:	1821      	adds	r1, r4, r0
 8005a44:	428b      	cmp	r3, r1
 8005a46:	bf01      	itttt	eq
 8005a48:	6819      	ldreq	r1, [r3, #0]
 8005a4a:	685b      	ldreq	r3, [r3, #4]
 8005a4c:	1809      	addeq	r1, r1, r0
 8005a4e:	6021      	streq	r1, [r4, #0]
 8005a50:	6063      	str	r3, [r4, #4]
 8005a52:	6054      	str	r4, [r2, #4]
 8005a54:	e7cb      	b.n	80059ee <_free_r+0x22>
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	200001f4 	.word	0x200001f4

08005a5c <__ssputs_r>:
 8005a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	461f      	mov	r7, r3
 8005a62:	688e      	ldr	r6, [r1, #8]
 8005a64:	4682      	mov	sl, r0
 8005a66:	42be      	cmp	r6, r7
 8005a68:	460c      	mov	r4, r1
 8005a6a:	4690      	mov	r8, r2
 8005a6c:	680b      	ldr	r3, [r1, #0]
 8005a6e:	d82d      	bhi.n	8005acc <__ssputs_r+0x70>
 8005a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a78:	d026      	beq.n	8005ac8 <__ssputs_r+0x6c>
 8005a7a:	6965      	ldr	r5, [r4, #20]
 8005a7c:	6909      	ldr	r1, [r1, #16]
 8005a7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a82:	eba3 0901 	sub.w	r9, r3, r1
 8005a86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a8a:	1c7b      	adds	r3, r7, #1
 8005a8c:	444b      	add	r3, r9
 8005a8e:	106d      	asrs	r5, r5, #1
 8005a90:	429d      	cmp	r5, r3
 8005a92:	bf38      	it	cc
 8005a94:	461d      	movcc	r5, r3
 8005a96:	0553      	lsls	r3, r2, #21
 8005a98:	d527      	bpl.n	8005aea <__ssputs_r+0x8e>
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f7ff fea6 	bl	80057ec <_malloc_r>
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	b360      	cbz	r0, 8005afe <__ssputs_r+0xa2>
 8005aa4:	464a      	mov	r2, r9
 8005aa6:	6921      	ldr	r1, [r4, #16]
 8005aa8:	f000 faea 	bl	8006080 <memcpy>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ab6:	81a3      	strh	r3, [r4, #12]
 8005ab8:	6126      	str	r6, [r4, #16]
 8005aba:	444e      	add	r6, r9
 8005abc:	6026      	str	r6, [r4, #0]
 8005abe:	463e      	mov	r6, r7
 8005ac0:	6165      	str	r5, [r4, #20]
 8005ac2:	eba5 0509 	sub.w	r5, r5, r9
 8005ac6:	60a5      	str	r5, [r4, #8]
 8005ac8:	42be      	cmp	r6, r7
 8005aca:	d900      	bls.n	8005ace <__ssputs_r+0x72>
 8005acc:	463e      	mov	r6, r7
 8005ace:	4632      	mov	r2, r6
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	f000 faac 	bl	8006030 <memmove>
 8005ad8:	2000      	movs	r0, #0
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	1b9b      	subs	r3, r3, r6
 8005ade:	60a3      	str	r3, [r4, #8]
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	4433      	add	r3, r6
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aea:	462a      	mov	r2, r5
 8005aec:	f000 fad6 	bl	800609c <_realloc_r>
 8005af0:	4606      	mov	r6, r0
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d1e0      	bne.n	8005ab8 <__ssputs_r+0x5c>
 8005af6:	4650      	mov	r0, sl
 8005af8:	6921      	ldr	r1, [r4, #16]
 8005afa:	f7ff ff67 	bl	80059cc <_free_r>
 8005afe:	230c      	movs	r3, #12
 8005b00:	f8ca 3000 	str.w	r3, [sl]
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b0e:	81a3      	strh	r3, [r4, #12]
 8005b10:	e7e9      	b.n	8005ae6 <__ssputs_r+0x8a>
	...

08005b14 <_svfiprintf_r>:
 8005b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	4698      	mov	r8, r3
 8005b1a:	898b      	ldrh	r3, [r1, #12]
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	061b      	lsls	r3, r3, #24
 8005b20:	460d      	mov	r5, r1
 8005b22:	4614      	mov	r4, r2
 8005b24:	b09d      	sub	sp, #116	@ 0x74
 8005b26:	d510      	bpl.n	8005b4a <_svfiprintf_r+0x36>
 8005b28:	690b      	ldr	r3, [r1, #16]
 8005b2a:	b973      	cbnz	r3, 8005b4a <_svfiprintf_r+0x36>
 8005b2c:	2140      	movs	r1, #64	@ 0x40
 8005b2e:	f7ff fe5d 	bl	80057ec <_malloc_r>
 8005b32:	6028      	str	r0, [r5, #0]
 8005b34:	6128      	str	r0, [r5, #16]
 8005b36:	b930      	cbnz	r0, 8005b46 <_svfiprintf_r+0x32>
 8005b38:	230c      	movs	r3, #12
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b40:	b01d      	add	sp, #116	@ 0x74
 8005b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b46:	2340      	movs	r3, #64	@ 0x40
 8005b48:	616b      	str	r3, [r5, #20]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b4e:	2320      	movs	r3, #32
 8005b50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b54:	2330      	movs	r3, #48	@ 0x30
 8005b56:	f04f 0901 	mov.w	r9, #1
 8005b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005cf8 <_svfiprintf_r+0x1e4>
 8005b62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b66:	4623      	mov	r3, r4
 8005b68:	469a      	mov	sl, r3
 8005b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b6e:	b10a      	cbz	r2, 8005b74 <_svfiprintf_r+0x60>
 8005b70:	2a25      	cmp	r2, #37	@ 0x25
 8005b72:	d1f9      	bne.n	8005b68 <_svfiprintf_r+0x54>
 8005b74:	ebba 0b04 	subs.w	fp, sl, r4
 8005b78:	d00b      	beq.n	8005b92 <_svfiprintf_r+0x7e>
 8005b7a:	465b      	mov	r3, fp
 8005b7c:	4622      	mov	r2, r4
 8005b7e:	4629      	mov	r1, r5
 8005b80:	4638      	mov	r0, r7
 8005b82:	f7ff ff6b 	bl	8005a5c <__ssputs_r>
 8005b86:	3001      	adds	r0, #1
 8005b88:	f000 80a7 	beq.w	8005cda <_svfiprintf_r+0x1c6>
 8005b8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b8e:	445a      	add	r2, fp
 8005b90:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b92:	f89a 3000 	ldrb.w	r3, [sl]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 809f 	beq.w	8005cda <_svfiprintf_r+0x1c6>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ba6:	f10a 0a01 	add.w	sl, sl, #1
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	9307      	str	r3, [sp, #28]
 8005bae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bb4:	4654      	mov	r4, sl
 8005bb6:	2205      	movs	r2, #5
 8005bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bbc:	484e      	ldr	r0, [pc, #312]	@ (8005cf8 <_svfiprintf_r+0x1e4>)
 8005bbe:	f000 fa51 	bl	8006064 <memchr>
 8005bc2:	9a04      	ldr	r2, [sp, #16]
 8005bc4:	b9d8      	cbnz	r0, 8005bfe <_svfiprintf_r+0xea>
 8005bc6:	06d0      	lsls	r0, r2, #27
 8005bc8:	bf44      	itt	mi
 8005bca:	2320      	movmi	r3, #32
 8005bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd0:	0711      	lsls	r1, r2, #28
 8005bd2:	bf44      	itt	mi
 8005bd4:	232b      	movmi	r3, #43	@ 0x2b
 8005bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bda:	f89a 3000 	ldrb.w	r3, [sl]
 8005bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8005be0:	d015      	beq.n	8005c0e <_svfiprintf_r+0xfa>
 8005be2:	4654      	mov	r4, sl
 8005be4:	2000      	movs	r0, #0
 8005be6:	f04f 0c0a 	mov.w	ip, #10
 8005bea:	9a07      	ldr	r2, [sp, #28]
 8005bec:	4621      	mov	r1, r4
 8005bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bf2:	3b30      	subs	r3, #48	@ 0x30
 8005bf4:	2b09      	cmp	r3, #9
 8005bf6:	d94b      	bls.n	8005c90 <_svfiprintf_r+0x17c>
 8005bf8:	b1b0      	cbz	r0, 8005c28 <_svfiprintf_r+0x114>
 8005bfa:	9207      	str	r2, [sp, #28]
 8005bfc:	e014      	b.n	8005c28 <_svfiprintf_r+0x114>
 8005bfe:	eba0 0308 	sub.w	r3, r0, r8
 8005c02:	fa09 f303 	lsl.w	r3, r9, r3
 8005c06:	4313      	orrs	r3, r2
 8005c08:	46a2      	mov	sl, r4
 8005c0a:	9304      	str	r3, [sp, #16]
 8005c0c:	e7d2      	b.n	8005bb4 <_svfiprintf_r+0xa0>
 8005c0e:	9b03      	ldr	r3, [sp, #12]
 8005c10:	1d19      	adds	r1, r3, #4
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	9103      	str	r1, [sp, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bfbb      	ittet	lt
 8005c1a:	425b      	neglt	r3, r3
 8005c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c20:	9307      	strge	r3, [sp, #28]
 8005c22:	9307      	strlt	r3, [sp, #28]
 8005c24:	bfb8      	it	lt
 8005c26:	9204      	strlt	r2, [sp, #16]
 8005c28:	7823      	ldrb	r3, [r4, #0]
 8005c2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c2c:	d10a      	bne.n	8005c44 <_svfiprintf_r+0x130>
 8005c2e:	7863      	ldrb	r3, [r4, #1]
 8005c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c32:	d132      	bne.n	8005c9a <_svfiprintf_r+0x186>
 8005c34:	9b03      	ldr	r3, [sp, #12]
 8005c36:	3402      	adds	r4, #2
 8005c38:	1d1a      	adds	r2, r3, #4
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	9203      	str	r2, [sp, #12]
 8005c3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005cfc <_svfiprintf_r+0x1e8>
 8005c48:	2203      	movs	r2, #3
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	7821      	ldrb	r1, [r4, #0]
 8005c4e:	f000 fa09 	bl	8006064 <memchr>
 8005c52:	b138      	cbz	r0, 8005c64 <_svfiprintf_r+0x150>
 8005c54:	2240      	movs	r2, #64	@ 0x40
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	eba0 000a 	sub.w	r0, r0, sl
 8005c5c:	4082      	lsls	r2, r0
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	3401      	adds	r4, #1
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c68:	2206      	movs	r2, #6
 8005c6a:	4825      	ldr	r0, [pc, #148]	@ (8005d00 <_svfiprintf_r+0x1ec>)
 8005c6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c70:	f000 f9f8 	bl	8006064 <memchr>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d036      	beq.n	8005ce6 <_svfiprintf_r+0x1d2>
 8005c78:	4b22      	ldr	r3, [pc, #136]	@ (8005d04 <_svfiprintf_r+0x1f0>)
 8005c7a:	bb1b      	cbnz	r3, 8005cc4 <_svfiprintf_r+0x1b0>
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	3307      	adds	r3, #7
 8005c80:	f023 0307 	bic.w	r3, r3, #7
 8005c84:	3308      	adds	r3, #8
 8005c86:	9303      	str	r3, [sp, #12]
 8005c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c8a:	4433      	add	r3, r6
 8005c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c8e:	e76a      	b.n	8005b66 <_svfiprintf_r+0x52>
 8005c90:	460c      	mov	r4, r1
 8005c92:	2001      	movs	r0, #1
 8005c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c98:	e7a8      	b.n	8005bec <_svfiprintf_r+0xd8>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f04f 0c0a 	mov.w	ip, #10
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	3401      	adds	r4, #1
 8005ca4:	9305      	str	r3, [sp, #20]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cac:	3a30      	subs	r2, #48	@ 0x30
 8005cae:	2a09      	cmp	r2, #9
 8005cb0:	d903      	bls.n	8005cba <_svfiprintf_r+0x1a6>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0c6      	beq.n	8005c44 <_svfiprintf_r+0x130>
 8005cb6:	9105      	str	r1, [sp, #20]
 8005cb8:	e7c4      	b.n	8005c44 <_svfiprintf_r+0x130>
 8005cba:	4604      	mov	r4, r0
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cc2:	e7f0      	b.n	8005ca6 <_svfiprintf_r+0x192>
 8005cc4:	ab03      	add	r3, sp, #12
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	462a      	mov	r2, r5
 8005cca:	4638      	mov	r0, r7
 8005ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8005d08 <_svfiprintf_r+0x1f4>)
 8005cce:	a904      	add	r1, sp, #16
 8005cd0:	f3af 8000 	nop.w
 8005cd4:	1c42      	adds	r2, r0, #1
 8005cd6:	4606      	mov	r6, r0
 8005cd8:	d1d6      	bne.n	8005c88 <_svfiprintf_r+0x174>
 8005cda:	89ab      	ldrh	r3, [r5, #12]
 8005cdc:	065b      	lsls	r3, r3, #25
 8005cde:	f53f af2d 	bmi.w	8005b3c <_svfiprintf_r+0x28>
 8005ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ce4:	e72c      	b.n	8005b40 <_svfiprintf_r+0x2c>
 8005ce6:	ab03      	add	r3, sp, #12
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	462a      	mov	r2, r5
 8005cec:	4638      	mov	r0, r7
 8005cee:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <_svfiprintf_r+0x1f4>)
 8005cf0:	a904      	add	r1, sp, #16
 8005cf2:	f000 f87d 	bl	8005df0 <_printf_i>
 8005cf6:	e7ed      	b.n	8005cd4 <_svfiprintf_r+0x1c0>
 8005cf8:	080061ea 	.word	0x080061ea
 8005cfc:	080061f0 	.word	0x080061f0
 8005d00:	080061f4 	.word	0x080061f4
 8005d04:	00000000 	.word	0x00000000
 8005d08:	08005a5d 	.word	0x08005a5d

08005d0c <_printf_common>:
 8005d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	4616      	mov	r6, r2
 8005d12:	4698      	mov	r8, r3
 8005d14:	688a      	ldr	r2, [r1, #8]
 8005d16:	690b      	ldr	r3, [r1, #16]
 8005d18:	4607      	mov	r7, r0
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	bfb8      	it	lt
 8005d1e:	4613      	movlt	r3, r2
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d26:	460c      	mov	r4, r1
 8005d28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d2c:	b10a      	cbz	r2, 8005d32 <_printf_common+0x26>
 8005d2e:	3301      	adds	r3, #1
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	0699      	lsls	r1, r3, #26
 8005d36:	bf42      	ittt	mi
 8005d38:	6833      	ldrmi	r3, [r6, #0]
 8005d3a:	3302      	addmi	r3, #2
 8005d3c:	6033      	strmi	r3, [r6, #0]
 8005d3e:	6825      	ldr	r5, [r4, #0]
 8005d40:	f015 0506 	ands.w	r5, r5, #6
 8005d44:	d106      	bne.n	8005d54 <_printf_common+0x48>
 8005d46:	f104 0a19 	add.w	sl, r4, #25
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	6832      	ldr	r2, [r6, #0]
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dc2b      	bgt.n	8005dac <_printf_common+0xa0>
 8005d54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	3b00      	subs	r3, #0
 8005d5c:	bf18      	it	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	0692      	lsls	r2, r2, #26
 8005d62:	d430      	bmi.n	8005dc6 <_printf_common+0xba>
 8005d64:	4641      	mov	r1, r8
 8005d66:	4638      	mov	r0, r7
 8005d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d6c:	47c8      	blx	r9
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d023      	beq.n	8005dba <_printf_common+0xae>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	6922      	ldr	r2, [r4, #16]
 8005d76:	f003 0306 	and.w	r3, r3, #6
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	bf14      	ite	ne
 8005d7e:	2500      	movne	r5, #0
 8005d80:	6833      	ldreq	r3, [r6, #0]
 8005d82:	f04f 0600 	mov.w	r6, #0
 8005d86:	bf08      	it	eq
 8005d88:	68e5      	ldreq	r5, [r4, #12]
 8005d8a:	f104 041a 	add.w	r4, r4, #26
 8005d8e:	bf08      	it	eq
 8005d90:	1aed      	subeq	r5, r5, r3
 8005d92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d96:	bf08      	it	eq
 8005d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	bfc4      	itt	gt
 8005da0:	1a9b      	subgt	r3, r3, r2
 8005da2:	18ed      	addgt	r5, r5, r3
 8005da4:	42b5      	cmp	r5, r6
 8005da6:	d11a      	bne.n	8005dde <_printf_common+0xd2>
 8005da8:	2000      	movs	r0, #0
 8005daa:	e008      	b.n	8005dbe <_printf_common+0xb2>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4652      	mov	r2, sl
 8005db0:	4641      	mov	r1, r8
 8005db2:	4638      	mov	r0, r7
 8005db4:	47c8      	blx	r9
 8005db6:	3001      	adds	r0, #1
 8005db8:	d103      	bne.n	8005dc2 <_printf_common+0xb6>
 8005dba:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc2:	3501      	adds	r5, #1
 8005dc4:	e7c1      	b.n	8005d4a <_printf_common+0x3e>
 8005dc6:	2030      	movs	r0, #48	@ 0x30
 8005dc8:	18e1      	adds	r1, r4, r3
 8005dca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dd4:	4422      	add	r2, r4
 8005dd6:	3302      	adds	r3, #2
 8005dd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ddc:	e7c2      	b.n	8005d64 <_printf_common+0x58>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4622      	mov	r2, r4
 8005de2:	4641      	mov	r1, r8
 8005de4:	4638      	mov	r0, r7
 8005de6:	47c8      	blx	r9
 8005de8:	3001      	adds	r0, #1
 8005dea:	d0e6      	beq.n	8005dba <_printf_common+0xae>
 8005dec:	3601      	adds	r6, #1
 8005dee:	e7d9      	b.n	8005da4 <_printf_common+0x98>

08005df0 <_printf_i>:
 8005df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	7e0f      	ldrb	r7, [r1, #24]
 8005df6:	4691      	mov	r9, r2
 8005df8:	2f78      	cmp	r7, #120	@ 0x78
 8005dfa:	4680      	mov	r8, r0
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	469a      	mov	sl, r3
 8005e00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e06:	d807      	bhi.n	8005e18 <_printf_i+0x28>
 8005e08:	2f62      	cmp	r7, #98	@ 0x62
 8005e0a:	d80a      	bhi.n	8005e22 <_printf_i+0x32>
 8005e0c:	2f00      	cmp	r7, #0
 8005e0e:	f000 80d3 	beq.w	8005fb8 <_printf_i+0x1c8>
 8005e12:	2f58      	cmp	r7, #88	@ 0x58
 8005e14:	f000 80ba 	beq.w	8005f8c <_printf_i+0x19c>
 8005e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e20:	e03a      	b.n	8005e98 <_printf_i+0xa8>
 8005e22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e26:	2b15      	cmp	r3, #21
 8005e28:	d8f6      	bhi.n	8005e18 <_printf_i+0x28>
 8005e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8005e30 <_printf_i+0x40>)
 8005e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e30:	08005e89 	.word	0x08005e89
 8005e34:	08005e9d 	.word	0x08005e9d
 8005e38:	08005e19 	.word	0x08005e19
 8005e3c:	08005e19 	.word	0x08005e19
 8005e40:	08005e19 	.word	0x08005e19
 8005e44:	08005e19 	.word	0x08005e19
 8005e48:	08005e9d 	.word	0x08005e9d
 8005e4c:	08005e19 	.word	0x08005e19
 8005e50:	08005e19 	.word	0x08005e19
 8005e54:	08005e19 	.word	0x08005e19
 8005e58:	08005e19 	.word	0x08005e19
 8005e5c:	08005f9f 	.word	0x08005f9f
 8005e60:	08005ec7 	.word	0x08005ec7
 8005e64:	08005f59 	.word	0x08005f59
 8005e68:	08005e19 	.word	0x08005e19
 8005e6c:	08005e19 	.word	0x08005e19
 8005e70:	08005fc1 	.word	0x08005fc1
 8005e74:	08005e19 	.word	0x08005e19
 8005e78:	08005ec7 	.word	0x08005ec7
 8005e7c:	08005e19 	.word	0x08005e19
 8005e80:	08005e19 	.word	0x08005e19
 8005e84:	08005f61 	.word	0x08005f61
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	1d1a      	adds	r2, r3, #4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6032      	str	r2, [r6, #0]
 8005e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e09e      	b.n	8005fda <_printf_i+0x1ea>
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	6820      	ldr	r0, [r4, #0]
 8005ea0:	1d19      	adds	r1, r3, #4
 8005ea2:	6031      	str	r1, [r6, #0]
 8005ea4:	0606      	lsls	r6, r0, #24
 8005ea6:	d501      	bpl.n	8005eac <_printf_i+0xbc>
 8005ea8:	681d      	ldr	r5, [r3, #0]
 8005eaa:	e003      	b.n	8005eb4 <_printf_i+0xc4>
 8005eac:	0645      	lsls	r5, r0, #25
 8005eae:	d5fb      	bpl.n	8005ea8 <_printf_i+0xb8>
 8005eb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	da03      	bge.n	8005ec0 <_printf_i+0xd0>
 8005eb8:	232d      	movs	r3, #45	@ 0x2d
 8005eba:	426d      	negs	r5, r5
 8005ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec0:	230a      	movs	r3, #10
 8005ec2:	4859      	ldr	r0, [pc, #356]	@ (8006028 <_printf_i+0x238>)
 8005ec4:	e011      	b.n	8005eea <_printf_i+0xfa>
 8005ec6:	6821      	ldr	r1, [r4, #0]
 8005ec8:	6833      	ldr	r3, [r6, #0]
 8005eca:	0608      	lsls	r0, r1, #24
 8005ecc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ed0:	d402      	bmi.n	8005ed8 <_printf_i+0xe8>
 8005ed2:	0649      	lsls	r1, r1, #25
 8005ed4:	bf48      	it	mi
 8005ed6:	b2ad      	uxthmi	r5, r5
 8005ed8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eda:	6033      	str	r3, [r6, #0]
 8005edc:	bf14      	ite	ne
 8005ede:	230a      	movne	r3, #10
 8005ee0:	2308      	moveq	r3, #8
 8005ee2:	4851      	ldr	r0, [pc, #324]	@ (8006028 <_printf_i+0x238>)
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eea:	6866      	ldr	r6, [r4, #4]
 8005eec:	2e00      	cmp	r6, #0
 8005eee:	bfa8      	it	ge
 8005ef0:	6821      	ldrge	r1, [r4, #0]
 8005ef2:	60a6      	str	r6, [r4, #8]
 8005ef4:	bfa4      	itt	ge
 8005ef6:	f021 0104 	bicge.w	r1, r1, #4
 8005efa:	6021      	strge	r1, [r4, #0]
 8005efc:	b90d      	cbnz	r5, 8005f02 <_printf_i+0x112>
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	d04b      	beq.n	8005f9a <_printf_i+0x1aa>
 8005f02:	4616      	mov	r6, r2
 8005f04:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f08:	fb03 5711 	mls	r7, r3, r1, r5
 8005f0c:	5dc7      	ldrb	r7, [r0, r7]
 8005f0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f12:	462f      	mov	r7, r5
 8005f14:	42bb      	cmp	r3, r7
 8005f16:	460d      	mov	r5, r1
 8005f18:	d9f4      	bls.n	8005f04 <_printf_i+0x114>
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d10b      	bne.n	8005f36 <_printf_i+0x146>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	07df      	lsls	r7, r3, #31
 8005f22:	d508      	bpl.n	8005f36 <_printf_i+0x146>
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	6861      	ldr	r1, [r4, #4]
 8005f28:	4299      	cmp	r1, r3
 8005f2a:	bfde      	ittt	le
 8005f2c:	2330      	movle	r3, #48	@ 0x30
 8005f2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f36:	1b92      	subs	r2, r2, r6
 8005f38:	6122      	str	r2, [r4, #16]
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f8cd a000 	str.w	sl, [sp]
 8005f44:	aa03      	add	r2, sp, #12
 8005f46:	f7ff fee1 	bl	8005d0c <_printf_common>
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d14a      	bne.n	8005fe4 <_printf_i+0x1f4>
 8005f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f52:	b004      	add	sp, #16
 8005f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	f043 0320 	orr.w	r3, r3, #32
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	2778      	movs	r7, #120	@ 0x78
 8005f62:	4832      	ldr	r0, [pc, #200]	@ (800602c <_printf_i+0x23c>)
 8005f64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	6831      	ldr	r1, [r6, #0]
 8005f6c:	061f      	lsls	r7, r3, #24
 8005f6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f72:	d402      	bmi.n	8005f7a <_printf_i+0x18a>
 8005f74:	065f      	lsls	r7, r3, #25
 8005f76:	bf48      	it	mi
 8005f78:	b2ad      	uxthmi	r5, r5
 8005f7a:	6031      	str	r1, [r6, #0]
 8005f7c:	07d9      	lsls	r1, r3, #31
 8005f7e:	bf44      	itt	mi
 8005f80:	f043 0320 	orrmi.w	r3, r3, #32
 8005f84:	6023      	strmi	r3, [r4, #0]
 8005f86:	b11d      	cbz	r5, 8005f90 <_printf_i+0x1a0>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	e7ab      	b.n	8005ee4 <_printf_i+0xf4>
 8005f8c:	4826      	ldr	r0, [pc, #152]	@ (8006028 <_printf_i+0x238>)
 8005f8e:	e7e9      	b.n	8005f64 <_printf_i+0x174>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	f023 0320 	bic.w	r3, r3, #32
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	e7f6      	b.n	8005f88 <_printf_i+0x198>
 8005f9a:	4616      	mov	r6, r2
 8005f9c:	e7bd      	b.n	8005f1a <_printf_i+0x12a>
 8005f9e:	6833      	ldr	r3, [r6, #0]
 8005fa0:	6825      	ldr	r5, [r4, #0]
 8005fa2:	1d18      	adds	r0, r3, #4
 8005fa4:	6961      	ldr	r1, [r4, #20]
 8005fa6:	6030      	str	r0, [r6, #0]
 8005fa8:	062e      	lsls	r6, r5, #24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	d501      	bpl.n	8005fb2 <_printf_i+0x1c2>
 8005fae:	6019      	str	r1, [r3, #0]
 8005fb0:	e002      	b.n	8005fb8 <_printf_i+0x1c8>
 8005fb2:	0668      	lsls	r0, r5, #25
 8005fb4:	d5fb      	bpl.n	8005fae <_printf_i+0x1be>
 8005fb6:	8019      	strh	r1, [r3, #0]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4616      	mov	r6, r2
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	e7bc      	b.n	8005f3a <_printf_i+0x14a>
 8005fc0:	6833      	ldr	r3, [r6, #0]
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	1d1a      	adds	r2, r3, #4
 8005fc6:	6032      	str	r2, [r6, #0]
 8005fc8:	681e      	ldr	r6, [r3, #0]
 8005fca:	6862      	ldr	r2, [r4, #4]
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 f849 	bl	8006064 <memchr>
 8005fd2:	b108      	cbz	r0, 8005fd8 <_printf_i+0x1e8>
 8005fd4:	1b80      	subs	r0, r0, r6
 8005fd6:	6060      	str	r0, [r4, #4]
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	6123      	str	r3, [r4, #16]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fe2:	e7aa      	b.n	8005f3a <_printf_i+0x14a>
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4640      	mov	r0, r8
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	47d0      	blx	sl
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d0ad      	beq.n	8005f4e <_printf_i+0x15e>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	079b      	lsls	r3, r3, #30
 8005ff6:	d413      	bmi.n	8006020 <_printf_i+0x230>
 8005ff8:	68e0      	ldr	r0, [r4, #12]
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	4298      	cmp	r0, r3
 8005ffe:	bfb8      	it	lt
 8006000:	4618      	movlt	r0, r3
 8006002:	e7a6      	b.n	8005f52 <_printf_i+0x162>
 8006004:	2301      	movs	r3, #1
 8006006:	4632      	mov	r2, r6
 8006008:	4649      	mov	r1, r9
 800600a:	4640      	mov	r0, r8
 800600c:	47d0      	blx	sl
 800600e:	3001      	adds	r0, #1
 8006010:	d09d      	beq.n	8005f4e <_printf_i+0x15e>
 8006012:	3501      	adds	r5, #1
 8006014:	68e3      	ldr	r3, [r4, #12]
 8006016:	9903      	ldr	r1, [sp, #12]
 8006018:	1a5b      	subs	r3, r3, r1
 800601a:	42ab      	cmp	r3, r5
 800601c:	dcf2      	bgt.n	8006004 <_printf_i+0x214>
 800601e:	e7eb      	b.n	8005ff8 <_printf_i+0x208>
 8006020:	2500      	movs	r5, #0
 8006022:	f104 0619 	add.w	r6, r4, #25
 8006026:	e7f5      	b.n	8006014 <_printf_i+0x224>
 8006028:	080061fb 	.word	0x080061fb
 800602c:	0800620c 	.word	0x0800620c

08006030 <memmove>:
 8006030:	4288      	cmp	r0, r1
 8006032:	b510      	push	{r4, lr}
 8006034:	eb01 0402 	add.w	r4, r1, r2
 8006038:	d902      	bls.n	8006040 <memmove+0x10>
 800603a:	4284      	cmp	r4, r0
 800603c:	4623      	mov	r3, r4
 800603e:	d807      	bhi.n	8006050 <memmove+0x20>
 8006040:	1e43      	subs	r3, r0, #1
 8006042:	42a1      	cmp	r1, r4
 8006044:	d008      	beq.n	8006058 <memmove+0x28>
 8006046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800604a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800604e:	e7f8      	b.n	8006042 <memmove+0x12>
 8006050:	4601      	mov	r1, r0
 8006052:	4402      	add	r2, r0
 8006054:	428a      	cmp	r2, r1
 8006056:	d100      	bne.n	800605a <memmove+0x2a>
 8006058:	bd10      	pop	{r4, pc}
 800605a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800605e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006062:	e7f7      	b.n	8006054 <memmove+0x24>

08006064 <memchr>:
 8006064:	4603      	mov	r3, r0
 8006066:	b510      	push	{r4, lr}
 8006068:	b2c9      	uxtb	r1, r1
 800606a:	4402      	add	r2, r0
 800606c:	4293      	cmp	r3, r2
 800606e:	4618      	mov	r0, r3
 8006070:	d101      	bne.n	8006076 <memchr+0x12>
 8006072:	2000      	movs	r0, #0
 8006074:	e003      	b.n	800607e <memchr+0x1a>
 8006076:	7804      	ldrb	r4, [r0, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	428c      	cmp	r4, r1
 800607c:	d1f6      	bne.n	800606c <memchr+0x8>
 800607e:	bd10      	pop	{r4, pc}

08006080 <memcpy>:
 8006080:	440a      	add	r2, r1
 8006082:	4291      	cmp	r1, r2
 8006084:	f100 33ff 	add.w	r3, r0, #4294967295
 8006088:	d100      	bne.n	800608c <memcpy+0xc>
 800608a:	4770      	bx	lr
 800608c:	b510      	push	{r4, lr}
 800608e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006092:	4291      	cmp	r1, r2
 8006094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006098:	d1f9      	bne.n	800608e <memcpy+0xe>
 800609a:	bd10      	pop	{r4, pc}

0800609c <_realloc_r>:
 800609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a0:	4680      	mov	r8, r0
 80060a2:	4615      	mov	r5, r2
 80060a4:	460c      	mov	r4, r1
 80060a6:	b921      	cbnz	r1, 80060b2 <_realloc_r+0x16>
 80060a8:	4611      	mov	r1, r2
 80060aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ae:	f7ff bb9d 	b.w	80057ec <_malloc_r>
 80060b2:	b92a      	cbnz	r2, 80060c0 <_realloc_r+0x24>
 80060b4:	f7ff fc8a 	bl	80059cc <_free_r>
 80060b8:	2400      	movs	r4, #0
 80060ba:	4620      	mov	r0, r4
 80060bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c0:	f000 f81a 	bl	80060f8 <_malloc_usable_size_r>
 80060c4:	4285      	cmp	r5, r0
 80060c6:	4606      	mov	r6, r0
 80060c8:	d802      	bhi.n	80060d0 <_realloc_r+0x34>
 80060ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060ce:	d8f4      	bhi.n	80060ba <_realloc_r+0x1e>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4640      	mov	r0, r8
 80060d4:	f7ff fb8a 	bl	80057ec <_malloc_r>
 80060d8:	4607      	mov	r7, r0
 80060da:	2800      	cmp	r0, #0
 80060dc:	d0ec      	beq.n	80060b8 <_realloc_r+0x1c>
 80060de:	42b5      	cmp	r5, r6
 80060e0:	462a      	mov	r2, r5
 80060e2:	4621      	mov	r1, r4
 80060e4:	bf28      	it	cs
 80060e6:	4632      	movcs	r2, r6
 80060e8:	f7ff ffca 	bl	8006080 <memcpy>
 80060ec:	4621      	mov	r1, r4
 80060ee:	4640      	mov	r0, r8
 80060f0:	f7ff fc6c 	bl	80059cc <_free_r>
 80060f4:	463c      	mov	r4, r7
 80060f6:	e7e0      	b.n	80060ba <_realloc_r+0x1e>

080060f8 <_malloc_usable_size_r>:
 80060f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fc:	1f18      	subs	r0, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bfbc      	itt	lt
 8006102:	580b      	ldrlt	r3, [r1, r0]
 8006104:	18c0      	addlt	r0, r0, r3
 8006106:	4770      	bx	lr

08006108 <_init>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr

08006114 <_fini>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr
