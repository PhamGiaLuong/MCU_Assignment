
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004644  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08004750  08004750  00005750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004794  08004794  00006040  2**0
                  CONTENTS
  4 .ARM          00000000  08004794  08004794  00006040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004794  08004794  00006040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004798  08004798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  0800479c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000040  080047dc  00006040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080047dc  00006120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfd8  00000000  00000000  00006069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f89  00000000  00000000  00012041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00013fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5a  00000000  00000000  00014d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018263  00000000  00000000  0001576a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101d3  00000000  00000000  0002d9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6b2  00000000  00000000  0003dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8252  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000372c  00000000  00000000  000c8298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000cb9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08004738 	.word	0x08004738

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08004738 	.word	0x08004738

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	@ 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	2142      	movs	r1, #66	@ 0x42
 8000198:	4803      	ldr	r0, [pc, #12]	@ (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 fa89 	bl	80016b0 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000080 	.word	0x20000080

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	@ 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	2142      	movs	r1, #66	@ 0x42
 80001f8:	4803      	ldr	r0, [pc, #12]	@ (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 fa59 	bl	80016b0 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000080 	.word	0x20000080

0800020c <lcd_init>:

void lcd_init (void) {
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000210:	2033      	movs	r0, #51	@ 0x33
 8000212:	f7ff ff9b 	bl	800014c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000216:	2032      	movs	r0, #50	@ 0x32
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	@ 0x32
 800021e:	f000 fd61 	bl	8000ce4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000222:	2028      	movs	r0, #40	@ 0x28
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000228:	2032      	movs	r0, #50	@ 0x32
 800022a:	f000 fd5b 	bl	8000ce4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800022e:	2001      	movs	r0, #1
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	@ 0x32
 8000236:	f000 fd55 	bl	8000ce4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800023a:	2006      	movs	r0, #6
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000240:	2032      	movs	r0, #50	@ 0x32
 8000242:	f000 fd4f 	bl	8000ce4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	@ 0x32
 800024e:	f000 fd49 	bl	8000ce4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000252:	2002      	movs	r0, #2
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(50);
 8000258:	2032      	movs	r0, #50	@ 0x32
 800025a:	f000 fd43 	bl	8000ce4 <HAL_Delay>
	lcd_send_cmd (0x80);
 800025e:	2080      	movs	r0, #128	@ 0x80
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000270:	e006      	b.n	8000280 <lcd_send_string+0x18>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff96 	bl	80001ac <lcd_send_data>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d1f4      	bne.n	8000272 <lcd_send_string+0xa>
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000296:	2001      	movs	r0, #1
 8000298:	f7ff ff58 	bl	800014c <lcd_send_cmd>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if (row == 0)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <lcd_goto_XY+0x1a>
	{
		pos_Addr = 0x80 + col;
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	3b80      	subs	r3, #128	@ 0x80
 80002b6:	73fb      	strb	r3, [r7, #15]
 80002b8:	e006      	b.n	80002c8 <lcd_goto_XY+0x28>
	}
	else if (row == 1)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d108      	bne.n	80002d2 <lcd_goto_XY+0x32>
	{
		pos_Addr = 0xC0 + col;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	3b40      	subs	r3, #64	@ 0x40
 80002c6:	73fb      	strb	r3, [r7, #15]
	}
	else
	{
		return;
	}
	lcd_send_cmd(pos_Addr);
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff3e 	bl	800014c <lcd_send_cmd>
 80002d0:	e000      	b.n	80002d4 <lcd_goto_XY+0x34>
		return;
 80002d2:	bf00      	nop
}
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <initButton>:
uint16_t longPressDurationTime = 100; //time duration for long press: 100x10ms
static uint16_t counterForLongPressButton[maxButton];
static uint8_t flagForLongPressButton[maxButton];

// Initial the number of button and time duration for long press
void initButton(uint8_t numOfButton, uint16_t durationForLongPress, uint8_t Tick){
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
 80002e6:	460b      	mov	r3, r1
 80002e8:	80bb      	strh	r3, [r7, #4]
 80002ea:	4613      	mov	r3, r2
 80002ec:	71bb      	strb	r3, [r7, #6]
	if(numOfButton <= maxButton) numberOfButton = numOfButton;
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b0a      	cmp	r3, #10
 80002f2:	d803      	bhi.n	80002fc <initButton+0x20>
 80002f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000324 <initButton+0x48>)
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	7013      	strb	r3, [r2, #0]
 80002fa:	e002      	b.n	8000302 <initButton+0x26>
	else numberOfButton = maxButton;
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <initButton+0x48>)
 80002fe:	220a      	movs	r2, #10
 8000300:	701a      	strb	r2, [r3, #0]
	buttonTick = Tick;
 8000302:	4a09      	ldr	r2, [pc, #36]	@ (8000328 <initButton+0x4c>)
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	7013      	strb	r3, [r2, #0]
	longPressDurationTime = durationForLongPress/buttonTick;
 8000308:	88bb      	ldrh	r3, [r7, #4]
 800030a:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <initButton+0x4c>)
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000312:	b29a      	uxth	r2, r3
 8000314:	4b05      	ldr	r3, [pc, #20]	@ (800032c <initButton+0x50>)
 8000316:	801a      	strh	r2, [r3, #0]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	20000000 	.word	0x20000000
 8000328:	2000005c 	.word	0x2000005c
 800032c:	20000032 	.word	0x20000032

08000330 <readPin>:

// Read button's state
GPIO_PinState readPin(uint8_t button){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState result = GPIO_PIN_SET;
 800033a:	2301      	movs	r3, #1
 800033c:	73fb      	strb	r3, [r7, #15]
	switch(button){
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d002      	beq.n	800034a <readPin+0x1a>
 8000344:	2b01      	cmp	r3, #1
 8000346:	d007      	beq.n	8000358 <readPin+0x28>
		break;
	case 1:
		result = HAL_GPIO_ReadPin(GPIOB, Button1_Pin);
		break;
	default:
		break;
 8000348:	e00e      	b.n	8000368 <readPin+0x38>
		result = HAL_GPIO_ReadPin(GPIOB, Button0_Pin);
 800034a:	2110      	movs	r1, #16
 800034c:	4809      	ldr	r0, [pc, #36]	@ (8000374 <readPin+0x44>)
 800034e:	f001 f805 	bl	800135c <HAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	73fb      	strb	r3, [r7, #15]
		break;
 8000356:	e007      	b.n	8000368 <readPin+0x38>
		result = HAL_GPIO_ReadPin(GPIOB, Button1_Pin);
 8000358:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800035c:	4805      	ldr	r0, [pc, #20]	@ (8000374 <readPin+0x44>)
 800035e:	f000 fffd 	bl	800135c <HAL_GPIO_ReadPin>
 8000362:	4603      	mov	r3, r0
 8000364:	73fb      	strb	r3, [r7, #15]
		break;
 8000366:	bf00      	nop
	}
	return result;
 8000368:	7bfb      	ldrb	r3, [r7, #15]
}
 800036a:	4618      	mov	r0, r3
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010c00 	.word	0x40010c00

08000378 <buttonReading>:

// Handle buttons (three times reading)
void buttonReading(void){
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < numberOfButton; i++){
 800037e:	2300      	movs	r3, #0
 8000380:	71fb      	strb	r3, [r7, #7]
 8000382:	e052      	b.n	800042a <buttonReading+0xb2>
		debounceBuffer3[i] = debounceBuffer2[i];
 8000384:	79fa      	ldrb	r2, [r7, #7]
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	492d      	ldr	r1, [pc, #180]	@ (8000440 <buttonReading+0xc8>)
 800038a:	5c89      	ldrb	r1, [r1, r2]
 800038c:	4a2d      	ldr	r2, [pc, #180]	@ (8000444 <buttonReading+0xcc>)
 800038e:	54d1      	strb	r1, [r2, r3]
		debounceBuffer2[i] = debounceBuffer1[i];
 8000390:	79fa      	ldrb	r2, [r7, #7]
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	492c      	ldr	r1, [pc, #176]	@ (8000448 <buttonReading+0xd0>)
 8000396:	5c89      	ldrb	r1, [r1, r2]
 8000398:	4a29      	ldr	r2, [pc, #164]	@ (8000440 <buttonReading+0xc8>)
 800039a:	54d1      	strb	r1, [r2, r3]
		debounceBuffer1[i] = readPin(i);
 800039c:	79fc      	ldrb	r4, [r7, #7]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ffc5 	bl	8000330 <readPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b27      	ldr	r3, [pc, #156]	@ (8000448 <buttonReading+0xd0>)
 80003ac:	551a      	strb	r2, [r3, r4]
		if((debounceBuffer1[i] == debounceBuffer2[i]) && (debounceBuffer2[i] == debounceBuffer3[i])){
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4a25      	ldr	r2, [pc, #148]	@ (8000448 <buttonReading+0xd0>)
 80003b2:	5cd2      	ldrb	r2, [r2, r3]
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	4922      	ldr	r1, [pc, #136]	@ (8000440 <buttonReading+0xc8>)
 80003b8:	5ccb      	ldrb	r3, [r1, r3]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d10d      	bne.n	80003da <buttonReading+0x62>
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000440 <buttonReading+0xc8>)
 80003c2:	5cd2      	ldrb	r2, [r2, r3]
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	491f      	ldr	r1, [pc, #124]	@ (8000444 <buttonReading+0xcc>)
 80003c8:	5ccb      	ldrb	r3, [r1, r3]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d105      	bne.n	80003da <buttonReading+0x62>
			buttonBuffer[i] = debounceBuffer1[i];
 80003ce:	79fa      	ldrb	r2, [r7, #7]
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	491d      	ldr	r1, [pc, #116]	@ (8000448 <buttonReading+0xd0>)
 80003d4:	5c89      	ldrb	r1, [r1, r2]
 80003d6:	4a1d      	ldr	r2, [pc, #116]	@ (800044c <buttonReading+0xd4>)
 80003d8:	54d1      	strb	r1, [r2, r3]
		}
		if(buttonBuffer[i] == buttonIsPressed){
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a1b      	ldr	r2, [pc, #108]	@ (800044c <buttonReading+0xd4>)
 80003de:	5cd3      	ldrb	r3, [r2, r3]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d116      	bne.n	8000412 <buttonReading+0x9a>
			if(counterForLongPressButton[i] < longPressDurationTime){
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000450 <buttonReading+0xd8>)
 80003e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003ec:	4b19      	ldr	r3, [pc, #100]	@ (8000454 <buttonReading+0xdc>)
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d209      	bcs.n	8000408 <buttonReading+0x90>
				counterForLongPressButton[i]++;
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4a16      	ldr	r2, [pc, #88]	@ (8000450 <buttonReading+0xd8>)
 80003f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003fc:	3201      	adds	r2, #1
 80003fe:	b291      	uxth	r1, r2
 8000400:	4a13      	ldr	r2, [pc, #76]	@ (8000450 <buttonReading+0xd8>)
 8000402:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000406:	e00d      	b.n	8000424 <buttonReading+0xac>
			}else{
				flagForLongPressButton[i] = 1;
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	4a13      	ldr	r2, [pc, #76]	@ (8000458 <buttonReading+0xe0>)
 800040c:	2101      	movs	r1, #1
 800040e:	54d1      	strb	r1, [r2, r3]
 8000410:	e008      	b.n	8000424 <buttonReading+0xac>
			}
		}else{
			counterForLongPressButton[i] = 0;
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <buttonReading+0xd8>)
 8000416:	2100      	movs	r1, #0
 8000418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForLongPressButton[i] = 0;
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <buttonReading+0xe0>)
 8000420:	2100      	movs	r1, #0
 8000422:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < numberOfButton; i++){
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	3301      	adds	r3, #1
 8000428:	71fb      	strb	r3, [r7, #7]
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <buttonReading+0xe4>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	79fa      	ldrb	r2, [r7, #7]
 8000430:	429a      	cmp	r2, r3
 8000432:	d3a7      	bcc.n	8000384 <buttonReading+0xc>
		}
	}
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bd90      	pop	{r4, r7, pc}
 800043e:	bf00      	nop
 8000440:	2000001c 	.word	0x2000001c
 8000444:	20000028 	.word	0x20000028
 8000448:	20000010 	.word	0x20000010
 800044c:	20000004 	.word	0x20000004
 8000450:	20000060 	.word	0x20000060
 8000454:	20000032 	.word	0x20000032
 8000458:	20000074 	.word	0x20000074
 800045c:	20000000 	.word	0x20000000

08000460 <isPressedOnButton>:

// Check if the button is pressed
unsigned char isPressedOnButton(uint8_t index){
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
	if(index >= numberOfButton) return 0;
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <isPressedOnButton+0x34>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	79fa      	ldrb	r2, [r7, #7]
 8000470:	429a      	cmp	r2, r3
 8000472:	d301      	bcc.n	8000478 <isPressedOnButton+0x18>
 8000474:	2300      	movs	r3, #0
 8000476:	e007      	b.n	8000488 <isPressedOnButton+0x28>
	return (buttonBuffer[index] == buttonIsPressed) ? 1 : 0;
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4a07      	ldr	r2, [pc, #28]	@ (8000498 <isPressedOnButton+0x38>)
 800047c:	5cd3      	ldrb	r3, [r2, r3]
 800047e:	2b00      	cmp	r3, #0
 8000480:	bf0c      	ite	eq
 8000482:	2301      	moveq	r3, #1
 8000484:	2300      	movne	r3, #0
 8000486:	b2db      	uxtb	r3, r3
}
 8000488:	4618      	mov	r0, r3
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	20000000 	.word	0x20000000
 8000498:	20000004 	.word	0x20000004

0800049c <isLongPressedOnButton>:

// Check if the button is pressed longer
unsigned char isLongPressedOnButton(uint8_t index){
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	if(index >= numberOfButton) return 0xff;
 80004a6:	4b0a      	ldr	r3, [pc, #40]	@ (80004d0 <isLongPressedOnButton+0x34>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	79fa      	ldrb	r2, [r7, #7]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d301      	bcc.n	80004b4 <isLongPressedOnButton+0x18>
 80004b0:	23ff      	movs	r3, #255	@ 0xff
 80004b2:	e007      	b.n	80004c4 <isLongPressedOnButton+0x28>
	return (flagForLongPressButton[index] == 1) ? 1 : 0;
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4a07      	ldr	r2, [pc, #28]	@ (80004d4 <isLongPressedOnButton+0x38>)
 80004b8:	5cd3      	ldrb	r3, [r2, r3]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	bf0c      	ite	eq
 80004be:	2301      	moveq	r3, #1
 80004c0:	2300      	movne	r3, #0
 80004c2:	b2db      	uxtb	r3, r3
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000074 	.word	0x20000074

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fba0 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f85a 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f914 	bl	8000710 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e8:	f000 f898 	bl	800061c <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ec:	f000 f8c4 	bl	8000678 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 80004f0:	4826      	ldr	r0, [pc, #152]	@ (800058c <main+0xb4>)
 80004f2:	f003 fd53 	bl	8003f9c <HAL_TIM_Base_Start_IT>
  lcd_init();
 80004f6:	f7ff fe89 	bl	800020c <lcd_init>
  initButton(2, 1000, 10);
 80004fa:	220a      	movs	r2, #10
 80004fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000500:	2002      	movs	r0, #2
 8000502:	f7ff feeb 	bl	80002dc <initButton>
  while (1)
  {
	  if(isLongPressedOnButton(0)) turnLed(X, Green);
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ffc8 	bl	800049c <isLongPressedOnButton>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d004      	beq.n	800051c <main+0x44>
 8000512:	2101      	movs	r1, #1
 8000514:	2000      	movs	r0, #0
 8000516:	f000 facb 	bl	8000ab0 <turnLed>
 800051a:	e7f4      	b.n	8000506 <main+0x2e>
	  	  else if(isLongPressedOnButton(1)) turnLed(Y, Green);
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff ffbd 	bl	800049c <isLongPressedOnButton>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d004      	beq.n	8000532 <main+0x5a>
 8000528:	2101      	movs	r1, #1
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fac0 	bl	8000ab0 <turnLed>
 8000530:	e7e9      	b.n	8000506 <main+0x2e>
	  	  else if(isPressedOnButton(0)){
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff ff94 	bl	8000460 <isPressedOnButton>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00b      	beq.n	8000556 <main+0x7e>
	  		  turnLed(X, Red);
 800053e:	2100      	movs	r1, #0
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fab5 	bl	8000ab0 <turnLed>
	  		  lcd_goto_XY(0, 0);
 8000546:	2100      	movs	r1, #0
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff fea9 	bl	80002a0 <lcd_goto_XY>
	  		  lcd_send_string("Press on B1");
 800054e:	4810      	ldr	r0, [pc, #64]	@ (8000590 <main+0xb8>)
 8000550:	f7ff fe8a 	bl	8000268 <lcd_send_string>
 8000554:	e7d7      	b.n	8000506 <main+0x2e>
	  	  }
	  else if(isPressedOnButton(1)){
 8000556:	2001      	movs	r0, #1
 8000558:	f7ff ff82 	bl	8000460 <isPressedOnButton>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00b      	beq.n	800057a <main+0xa2>
		  turnLed(Y, Red);
 8000562:	2100      	movs	r1, #0
 8000564:	2001      	movs	r0, #1
 8000566:	f000 faa3 	bl	8000ab0 <turnLed>
  		  lcd_goto_XY(1, 0);
 800056a:	2100      	movs	r1, #0
 800056c:	2001      	movs	r0, #1
 800056e:	f7ff fe97 	bl	80002a0 <lcd_goto_XY>
  		  lcd_send_string("Press on B2");
 8000572:	4808      	ldr	r0, [pc, #32]	@ (8000594 <main+0xbc>)
 8000574:	f7ff fe78 	bl	8000268 <lcd_send_string>
 8000578:	e7c5      	b.n	8000506 <main+0x2e>
	  }else{
		  clearAllLeds();
 800057a:	f000 fb11 	bl	8000ba0 <clearAllLeds>
		  lcd_clear_display();
 800057e:	f7ff fe88 	bl	8000292 <lcd_clear_display>
		  HAL_Delay(50);
 8000582:	2032      	movs	r0, #50	@ 0x32
 8000584:	f000 fbae 	bl	8000ce4 <HAL_Delay>
	  if(isLongPressedOnButton(0)) turnLed(X, Green);
 8000588:	e7bd      	b.n	8000506 <main+0x2e>
 800058a:	bf00      	nop
 800058c:	200000d4 	.word	0x200000d4
 8000590:	08004750 	.word	0x08004750
 8000594:	0800475c 	.word	0x0800475c

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b090      	sub	sp, #64	@ 0x40
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	2228      	movs	r2, #40	@ 0x28
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 f89a 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005ca:	2300      	movs	r3, #0
 80005cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005ce:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 f893 	bl	8003704 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005e4:	f000 f950 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fb00 	bl	8003c08 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800060e:	f000 f93b 	bl	8000888 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3740      	adds	r7, #64	@ 0x40
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	@ (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 82;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_I2C1_Init+0x50>)
 8000634:	2252      	movs	r2, #82	@ 0x52
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_I2C1_Init+0x50>)
 800065a:	f000 fed1 	bl	8001400 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f910 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000080 	.word	0x20000080
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000694:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <MX_TIM2_Init+0x94>)
 8000696:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800069a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_TIM2_Init+0x94>)
 800069e:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80006a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <MX_TIM2_Init+0x94>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80006aa:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_TIM2_Init+0x94>)
 80006ac:	220a      	movs	r2, #10
 80006ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b0:	4b16      	ldr	r3, [pc, #88]	@ (800070c <MX_TIM2_Init+0x94>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_TIM2_Init+0x94>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006bc:	4813      	ldr	r0, [pc, #76]	@ (800070c <MX_TIM2_Init+0x94>)
 80006be:	f003 fc1d 	bl	8003efc <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006c8:	f000 f8de 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4619      	mov	r1, r3
 80006d8:	480c      	ldr	r0, [pc, #48]	@ (800070c <MX_TIM2_Init+0x94>)
 80006da:	f003 fda1 	bl	8004220 <HAL_TIM_ConfigClockSource>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006e4:	f000 f8d0 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_TIM2_Init+0x94>)
 80006f6:	f003 ff83 	bl	8004600 <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000700:	f000 f8c2 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000d4 	.word	0x200000d4

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b4e      	ldr	r3, [pc, #312]	@ (8000860 <MX_GPIO_Init+0x150>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a4d      	ldr	r2, [pc, #308]	@ (8000860 <MX_GPIO_Init+0x150>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b4b      	ldr	r3, [pc, #300]	@ (8000860 <MX_GPIO_Init+0x150>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073c:	4b48      	ldr	r3, [pc, #288]	@ (8000860 <MX_GPIO_Init+0x150>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a47      	ldr	r2, [pc, #284]	@ (8000860 <MX_GPIO_Init+0x150>)
 8000742:	f043 0320 	orr.w	r3, r3, #32
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b45      	ldr	r3, [pc, #276]	@ (8000860 <MX_GPIO_Init+0x150>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0320 	and.w	r3, r3, #32
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b42      	ldr	r3, [pc, #264]	@ (8000860 <MX_GPIO_Init+0x150>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a41      	ldr	r2, [pc, #260]	@ (8000860 <MX_GPIO_Init+0x150>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b3f      	ldr	r3, [pc, #252]	@ (8000860 <MX_GPIO_Init+0x150>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b3c      	ldr	r3, [pc, #240]	@ (8000860 <MX_GPIO_Init+0x150>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a3b      	ldr	r2, [pc, #236]	@ (8000860 <MX_GPIO_Init+0x150>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <MX_GPIO_Init+0x150>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LaneY_B_Pin|LaneY_A_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800078a:	4836      	ldr	r0, [pc, #216]	@ (8000864 <MX_GPIO_Init+0x154>)
 800078c:	f000 fdfd 	bl	800138a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LaneX_B_GPIO_Port, LaneX_B_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2180      	movs	r1, #128	@ 0x80
 8000794:	4834      	ldr	r0, [pc, #208]	@ (8000868 <MX_GPIO_Init+0x158>)
 8000796:	f000 fdf8 	bl	800138a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LaneX_A_GPIO_Port, LaneX_A_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	4833      	ldr	r0, [pc, #204]	@ (800086c <MX_GPIO_Init+0x15c>)
 80007a0:	f000 fdf3 	bl	800138a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007aa:	4b31      	ldr	r3, [pc, #196]	@ (8000870 <MX_GPIO_Init+0x160>)
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	482b      	ldr	r0, [pc, #172]	@ (8000868 <MX_GPIO_Init+0x158>)
 80007ba:	f000 fc4b 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007be:	230c      	movs	r3, #12
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	4824      	ldr	r0, [pc, #144]	@ (8000864 <MX_GPIO_Init+0x154>)
 80007d2:	f000 fc3f 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LaneY_B_Pin LaneY_A_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LaneY_B_Pin|LaneY_A_Pin;
 80007d6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	481d      	ldr	r0, [pc, #116]	@ (8000864 <MX_GPIO_Init+0x154>)
 80007f0:	f000 fc30 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button0_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button0_Pin;
 80007f4:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4619      	mov	r1, r3
 8000808:	4818      	ldr	r0, [pc, #96]	@ (800086c <MX_GPIO_Init+0x15c>)
 800080a:	f000 fc23 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LaneX_B_Pin */
  GPIO_InitStruct.Pin = LaneX_B_Pin;
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2302      	movs	r3, #2
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LaneX_B_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	4810      	ldr	r0, [pc, #64]	@ (8000868 <MX_GPIO_Init+0x158>)
 8000826:	f000 fc15 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : LaneX_A_Pin */
  GPIO_InitStruct.Pin = LaneX_A_Pin;
 800082a:	2340      	movs	r3, #64	@ 0x40
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LaneX_A_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480a      	ldr	r0, [pc, #40]	@ (800086c <MX_GPIO_Init+0x15c>)
 8000842:	f000 fc07 	bl	8001054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2028      	movs	r0, #40	@ 0x28
 800084c:	f000 fb45 	bl	8000eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000850:	2028      	movs	r0, #40	@ 0x28
 8000852:	f000 fb5e 	bl	8000f12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800
 8000868:	40011000 	.word	0x40011000
 800086c:	40010c00 	.word	0x40010c00
 8000870:	10110000 	.word	0x10110000

08000874 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
//	timerRun();
	buttonReading();
 800087c:	f7ff fd7c 	bl	8000378 <buttonReading>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <HAL_MspInit+0x5c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <HAL_MspInit+0x5c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_MspInit+0x5c>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_MspInit+0x5c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <HAL_MspInit+0x60>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <HAL_MspInit+0x60>)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010000 	.word	0x40010000

080008f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a25      	ldr	r2, [pc, #148]	@ (80009a8 <HAL_I2C_MspInit+0xb0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d142      	bne.n	800099e <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <HAL_I2C_MspInit+0xb4>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a23      	ldr	r2, [pc, #140]	@ (80009ac <HAL_I2C_MspInit+0xb4>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <HAL_I2C_MspInit+0xb4>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000930:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000936:	2312      	movs	r3, #18
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	481a      	ldr	r0, [pc, #104]	@ (80009b0 <HAL_I2C_MspInit+0xb8>)
 8000946:	f000 fb85 	bl	8001054 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <HAL_I2C_MspInit+0xbc>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000952:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
 8000958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <HAL_I2C_MspInit+0xbc>)
 8000962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000964:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <HAL_I2C_MspInit+0xb4>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a10      	ldr	r2, [pc, #64]	@ (80009ac <HAL_I2C_MspInit+0xb4>)
 800096c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_I2C_MspInit+0xb4>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	201f      	movs	r0, #31
 8000984:	f000 faa9 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000988:	201f      	movs	r0, #31
 800098a:	f000 fac2 	bl	8000f12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2020      	movs	r0, #32
 8000994:	f000 faa1 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000998:	2020      	movs	r0, #32
 800099a:	f000 faba 	bl	8000f12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	@ 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40005400 	.word	0x40005400
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	40010000 	.word	0x40010000

080009b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c8:	d113      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <HAL_TIM_Base_MspInit+0x44>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <HAL_TIM_Base_MspInit+0x44>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_TIM_Base_MspInit+0x44>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	201c      	movs	r0, #28
 80009e8:	f000 fa77 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009ec:	201c      	movs	r0, #28
 80009ee:	f000 fa90 	bl	8000f12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <MemManage_Handler+0x4>

08000a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f92c 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <TIM2_IRQHandler+0x10>)
 8000a5e:	f003 faef 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000d4 	.word	0x200000d4

08000a6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <I2C1_EV_IRQHandler+0x10>)
 8000a72:	f000 ff1b 	bl	80018ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000080 	.word	0x20000080

08000a80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a84:	4802      	ldr	r0, [pc, #8]	@ (8000a90 <I2C1_ER_IRQHandler+0x10>)
 8000a86:	f001 f864 	bl	8001b52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000080 	.word	0x20000080

08000a94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a9c:	f000 fc8e 	bl	80013bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <turnLed>:
#include "trafficLight.h"

// Turn led on lane
// color: Red, Green, Yellow
// lane: X, Y
void turnLed(uint8_t lane, uint8_t color){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
	switch(lane){
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <turnLed+0x1c>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d02d      	beq.n	8000b26 <turnLed+0x76>
		default:
			break;
		}
		break;
	default:
		break;
 8000aca:	e05f      	b.n	8000b8c <turnLed+0xdc>
		switch(color){
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d01c      	beq.n	8000b0c <turnLed+0x5c>
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	dc25      	bgt.n	8000b22 <turnLed+0x72>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <turnLed+0x30>
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d00b      	beq.n	8000af6 <turnLed+0x46>
			break;
 8000ade:	e020      	b.n	8000b22 <turnLed+0x72>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2140      	movs	r1, #64	@ 0x40
 8000ae4:	482b      	ldr	r0, [pc, #172]	@ (8000b94 <turnLed+0xe4>)
 8000ae6:	f000 fc50 	bl	800138a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 1);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	482a      	ldr	r0, [pc, #168]	@ (8000b98 <turnLed+0xe8>)
 8000af0:	f000 fc4b 	bl	800138a <HAL_GPIO_WritePin>
			break;
 8000af4:	e016      	b.n	8000b24 <turnLed+0x74>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2140      	movs	r1, #64	@ 0x40
 8000afa:	4826      	ldr	r0, [pc, #152]	@ (8000b94 <turnLed+0xe4>)
 8000afc:	f000 fc45 	bl	800138a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	@ 0x80
 8000b04:	4824      	ldr	r0, [pc, #144]	@ (8000b98 <turnLed+0xe8>)
 8000b06:	f000 fc40 	bl	800138a <HAL_GPIO_WritePin>
			break;
 8000b0a:	e00b      	b.n	8000b24 <turnLed+0x74>
			HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2140      	movs	r1, #64	@ 0x40
 8000b10:	4820      	ldr	r0, [pc, #128]	@ (8000b94 <turnLed+0xe4>)
 8000b12:	f000 fc3a 	bl	800138a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2180      	movs	r1, #128	@ 0x80
 8000b1a:	481f      	ldr	r0, [pc, #124]	@ (8000b98 <turnLed+0xe8>)
 8000b1c:	f000 fc35 	bl	800138a <HAL_GPIO_WritePin>
			break;
 8000b20:	e000      	b.n	8000b24 <turnLed+0x74>
			break;
 8000b22:	bf00      	nop
		break;
 8000b24:	e032      	b.n	8000b8c <turnLed+0xdc>
		switch(color){
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d020      	beq.n	8000b6e <turnLed+0xbe>
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	dc2b      	bgt.n	8000b88 <turnLed+0xd8>
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <turnLed+0x8a>
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d00d      	beq.n	8000b54 <turnLed+0xa4>
			break;
 8000b38:	e026      	b.n	8000b88 <turnLed+0xd8>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b40:	4816      	ldr	r0, [pc, #88]	@ (8000b9c <turnLed+0xec>)
 8000b42:	f000 fc22 	bl	800138a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b4c:	4813      	ldr	r0, [pc, #76]	@ (8000b9c <turnLed+0xec>)
 8000b4e:	f000 fc1c 	bl	800138a <HAL_GPIO_WritePin>
			break;
 8000b52:	e01a      	b.n	8000b8a <turnLed+0xda>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b5a:	4810      	ldr	r0, [pc, #64]	@ (8000b9c <turnLed+0xec>)
 8000b5c:	f000 fc15 	bl	800138a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 1);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b66:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <turnLed+0xec>)
 8000b68:	f000 fc0f 	bl	800138a <HAL_GPIO_WritePin>
			break;
 8000b6c:	e00d      	b.n	8000b8a <turnLed+0xda>
			HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin, 1);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b74:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <turnLed+0xec>)
 8000b76:	f000 fc08 	bl	800138a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LaneY_B_Pin, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b80:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <turnLed+0xec>)
 8000b82:	f000 fc02 	bl	800138a <HAL_GPIO_WritePin>
			break;
 8000b86:	e000      	b.n	8000b8a <turnLed+0xda>
			break;
 8000b88:	bf00      	nop
		break;
 8000b8a:	bf00      	nop
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40010800 	.word	0x40010800

08000ba0 <clearAllLeds>:
//	HAL_GPIO_TogglePin(GPIOB, LaneX_A_Pin);
//	HAL_GPIO_TogglePin(GPIOC, LaneX_B_Pin);
//}

// Turn off all traffic leds
void clearAllLeds(void){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LaneY_A_Pin | LaneY_B_Pin, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000baa:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <clearAllLeds+0x28>)
 8000bac:	f000 fbed 	bl	800138a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LaneX_A_Pin, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2140      	movs	r1, #64	@ 0x40
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <clearAllLeds+0x2c>)
 8000bb6:	f000 fbe8 	bl	800138a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LaneX_B_Pin, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <clearAllLeds+0x30>)
 8000bc0:	f000 fbe3 	bl	800138a <HAL_GPIO_WritePin>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40011000 	.word	0x40011000

08000bd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bd4:	f7ff ff66 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bda:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a09      	ldr	r2, [pc, #36]	@ (8000c14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bf0:	4c09      	ldr	r4, [pc, #36]	@ (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f003 fd77 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c02:	f7ff fc69 	bl	80004d8 <main>
  bx lr
 8000c06:	4770      	bx	lr
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000c10:	0800479c 	.word	0x0800479c
  ldr r2, =_sbss
 8000c14:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000c18:	20000120 	.word	0x20000120

08000c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC1_2_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <HAL_Init+0x28>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <HAL_Init+0x28>)
 8000c2a:	f043 0310 	orr.w	r3, r3, #16
 8000c2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f947 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fe2a 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40022000 	.word	0x40022000

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f95f 	bl	8000f2e <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f927 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000034 	.word	0x20000034
 8000ca4:	2000003c 	.word	0x2000003c
 8000ca8:	20000038 	.word	0x20000038

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a03      	ldr	r2, [pc, #12]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	2000003c 	.word	0x2000003c
 8000ccc:	2000011c 	.word	0x2000011c

08000cd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	@ (8000ce0 <HAL_GetTick+0x10>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	2000011c 	.word	0x2000011c

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff fff0 	bl	8000cd0 <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffe0 	bl	8000cd0 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000003c 	.word	0x2000003c

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4906      	ldr	r1, [pc, #24]	@ (8000dc4 <__NVIC_EnableIRQ+0x34>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff90 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff2d 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff42 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff90 	bl	8000e1c <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5f 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff35 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffa2 	bl	8000e80 <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d005      	beq.n	8000f6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2204      	movs	r2, #4
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e051      	b.n	8001010 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 020e 	bic.w	r2, r2, #14
 8000f7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0201 	bic.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a22      	ldr	r2, [pc, #136]	@ (800101c <HAL_DMA_Abort_IT+0xd4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d029      	beq.n	8000fea <HAL_DMA_Abort_IT+0xa2>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <HAL_DMA_Abort_IT+0xd8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d022      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x9e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8001024 <HAL_DMA_Abort_IT+0xdc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01a      	beq.n	8000fe0 <HAL_DMA_Abort_IT+0x98>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a1e      	ldr	r2, [pc, #120]	@ (8001028 <HAL_DMA_Abort_IT+0xe0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d012      	beq.n	8000fda <HAL_DMA_Abort_IT+0x92>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800102c <HAL_DMA_Abort_IT+0xe4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00a      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0x8c>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001030 <HAL_DMA_Abort_IT+0xe8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d102      	bne.n	8000fce <HAL_DMA_Abort_IT+0x86>
 8000fc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fcc:	e00e      	b.n	8000fec <HAL_DMA_Abort_IT+0xa4>
 8000fce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fd2:	e00b      	b.n	8000fec <HAL_DMA_Abort_IT+0xa4>
 8000fd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fd8:	e008      	b.n	8000fec <HAL_DMA_Abort_IT+0xa4>
 8000fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fde:	e005      	b.n	8000fec <HAL_DMA_Abort_IT+0xa4>
 8000fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe4:	e002      	b.n	8000fec <HAL_DMA_Abort_IT+0xa4>
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	e000      	b.n	8000fec <HAL_DMA_Abort_IT+0xa4>
 8000fea:	2301      	movs	r3, #1
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <HAL_DMA_Abort_IT+0xec>)
 8000fee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	4798      	blx	r3
    } 
  }
  return status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020008 	.word	0x40020008
 8001020:	4002001c 	.word	0x4002001c
 8001024:	40020030 	.word	0x40020030
 8001028:	40020044 	.word	0x40020044
 800102c:	40020058 	.word	0x40020058
 8001030:	4002006c 	.word	0x4002006c
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001046:	b2db      	uxtb	r3, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b08b      	sub	sp, #44	@ 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e169      	b.n	800133c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001068:	2201      	movs	r2, #1
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8158 	bne.w	8001336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4a9a      	ldr	r2, [pc, #616]	@ (80012f4 <HAL_GPIO_Init+0x2a0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d05e      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 8001090:	4a98      	ldr	r2, [pc, #608]	@ (80012f4 <HAL_GPIO_Init+0x2a0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d875      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 8001096:	4a98      	ldr	r2, [pc, #608]	@ (80012f8 <HAL_GPIO_Init+0x2a4>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d058      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 800109c:	4a96      	ldr	r2, [pc, #600]	@ (80012f8 <HAL_GPIO_Init+0x2a4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d86f      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010a2:	4a96      	ldr	r2, [pc, #600]	@ (80012fc <HAL_GPIO_Init+0x2a8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d052      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 80010a8:	4a94      	ldr	r2, [pc, #592]	@ (80012fc <HAL_GPIO_Init+0x2a8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d869      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010ae:	4a94      	ldr	r2, [pc, #592]	@ (8001300 <HAL_GPIO_Init+0x2ac>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d04c      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 80010b4:	4a92      	ldr	r2, [pc, #584]	@ (8001300 <HAL_GPIO_Init+0x2ac>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d863      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010ba:	4a92      	ldr	r2, [pc, #584]	@ (8001304 <HAL_GPIO_Init+0x2b0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d046      	beq.n	800114e <HAL_GPIO_Init+0xfa>
 80010c0:	4a90      	ldr	r2, [pc, #576]	@ (8001304 <HAL_GPIO_Init+0x2b0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d85d      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010c6:	2b12      	cmp	r3, #18
 80010c8:	d82a      	bhi.n	8001120 <HAL_GPIO_Init+0xcc>
 80010ca:	2b12      	cmp	r3, #18
 80010cc:	d859      	bhi.n	8001182 <HAL_GPIO_Init+0x12e>
 80010ce:	a201      	add	r2, pc, #4	@ (adr r2, 80010d4 <HAL_GPIO_Init+0x80>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	0800114f 	.word	0x0800114f
 80010d8:	08001129 	.word	0x08001129
 80010dc:	0800113b 	.word	0x0800113b
 80010e0:	0800117d 	.word	0x0800117d
 80010e4:	08001183 	.word	0x08001183
 80010e8:	08001183 	.word	0x08001183
 80010ec:	08001183 	.word	0x08001183
 80010f0:	08001183 	.word	0x08001183
 80010f4:	08001183 	.word	0x08001183
 80010f8:	08001183 	.word	0x08001183
 80010fc:	08001183 	.word	0x08001183
 8001100:	08001183 	.word	0x08001183
 8001104:	08001183 	.word	0x08001183
 8001108:	08001183 	.word	0x08001183
 800110c:	08001183 	.word	0x08001183
 8001110:	08001183 	.word	0x08001183
 8001114:	08001183 	.word	0x08001183
 8001118:	08001131 	.word	0x08001131
 800111c:	08001145 	.word	0x08001145
 8001120:	4a79      	ldr	r2, [pc, #484]	@ (8001308 <HAL_GPIO_Init+0x2b4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001126:	e02c      	b.n	8001182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	623b      	str	r3, [r7, #32]
          break;
 800112e:	e029      	b.n	8001184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	3304      	adds	r3, #4
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	e024      	b.n	8001184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	3308      	adds	r3, #8
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e01f      	b.n	8001184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	330c      	adds	r3, #12
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e01a      	b.n	8001184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001156:	2304      	movs	r3, #4
 8001158:	623b      	str	r3, [r7, #32]
          break;
 800115a:	e013      	b.n	8001184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001164:	2308      	movs	r3, #8
 8001166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	611a      	str	r2, [r3, #16]
          break;
 800116e:	e009      	b.n	8001184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001170:	2308      	movs	r3, #8
 8001172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	615a      	str	r2, [r3, #20]
          break;
 800117a:	e003      	b.n	8001184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x130>
          break;
 8001182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2bff      	cmp	r3, #255	@ 0xff
 8001188:	d801      	bhi.n	800118e <HAL_GPIO_Init+0x13a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_Init+0x13e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3304      	adds	r3, #4
 8001192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2bff      	cmp	r3, #255	@ 0xff
 8001198:	d802      	bhi.n	80011a0 <HAL_GPIO_Init+0x14c>
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x152>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	3b08      	subs	r3, #8
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	210f      	movs	r1, #15
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	401a      	ands	r2, r3
 80011b8:	6a39      	ldr	r1, [r7, #32]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	431a      	orrs	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 80b1 	beq.w	8001336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011d4:	4b4d      	ldr	r3, [pc, #308]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a4c      	ldr	r2, [pc, #304]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b4a      	ldr	r3, [pc, #296]	@ (800130c <HAL_GPIO_Init+0x2b8>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011ec:	4a48      	ldr	r2, [pc, #288]	@ (8001310 <HAL_GPIO_Init+0x2bc>)
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a40      	ldr	r2, [pc, #256]	@ (8001314 <HAL_GPIO_Init+0x2c0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d013      	beq.n	8001240 <HAL_GPIO_Init+0x1ec>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3f      	ldr	r2, [pc, #252]	@ (8001318 <HAL_GPIO_Init+0x2c4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d00d      	beq.n	800123c <HAL_GPIO_Init+0x1e8>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a3e      	ldr	r2, [pc, #248]	@ (800131c <HAL_GPIO_Init+0x2c8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d007      	beq.n	8001238 <HAL_GPIO_Init+0x1e4>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a3d      	ldr	r2, [pc, #244]	@ (8001320 <HAL_GPIO_Init+0x2cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d101      	bne.n	8001234 <HAL_GPIO_Init+0x1e0>
 8001230:	2303      	movs	r3, #3
 8001232:	e006      	b.n	8001242 <HAL_GPIO_Init+0x1ee>
 8001234:	2304      	movs	r3, #4
 8001236:	e004      	b.n	8001242 <HAL_GPIO_Init+0x1ee>
 8001238:	2302      	movs	r3, #2
 800123a:	e002      	b.n	8001242 <HAL_GPIO_Init+0x1ee>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_GPIO_Init+0x1ee>
 8001240:	2300      	movs	r3, #0
 8001242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	4093      	lsls	r3, r2
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001252:	492f      	ldr	r1, [pc, #188]	@ (8001310 <HAL_GPIO_Init+0x2bc>)
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126c:	4b2d      	ldr	r3, [pc, #180]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	492c      	ldr	r1, [pc, #176]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127a:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	4928      	ldr	r1, [pc, #160]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 8001284:	4013      	ands	r3, r2
 8001286:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001294:	4b23      	ldr	r3, [pc, #140]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	4922      	ldr	r1, [pc, #136]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	491e      	ldr	r1, [pc, #120]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4918      	ldr	r1, [pc, #96]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4914      	ldr	r1, [pc, #80]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d021      	beq.n	8001328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	490e      	ldr	r1, [pc, #56]	@ (8001324 <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e021      	b.n	8001336 <HAL_GPIO_Init+0x2e2>
 80012f2:	bf00      	nop
 80012f4:	10320000 	.word	0x10320000
 80012f8:	10310000 	.word	0x10310000
 80012fc:	10220000 	.word	0x10220000
 8001300:	10210000 	.word	0x10210000
 8001304:	10120000 	.word	0x10120000
 8001308:	10110000 	.word	0x10110000
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000
 8001314:	40010800 	.word	0x40010800
 8001318:	40010c00 	.word	0x40010c00
 800131c:	40011000 	.word	0x40011000
 8001320:	40011400 	.word	0x40011400
 8001324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_GPIO_Init+0x304>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	43db      	mvns	r3, r3
 8001330:	4909      	ldr	r1, [pc, #36]	@ (8001358 <HAL_GPIO_Init+0x304>)
 8001332:	4013      	ands	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	3301      	adds	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	f47f ae8e 	bne.w	8001068 <HAL_GPIO_Init+0x14>
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	372c      	adds	r7, #44	@ 0x2c
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	40010400 	.word	0x40010400

0800135c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e001      	b.n	800137e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	807b      	strh	r3, [r7, #2]
 8001396:	4613      	mov	r3, r2
 8001398:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800139a:	787b      	ldrb	r3, [r7, #1]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a0:	887a      	ldrh	r2, [r7, #2]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013a6:	e003      	b.n	80013b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	041a      	lsls	r2, r3, #16
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	611a      	str	r2, [r3, #16]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f806 	bl	80013ec <HAL_GPIO_EXTI_Callback>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e12b      	b.n	800166a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fa66 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2224      	movs	r2, #36	@ 0x24
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001464:	f002 fd18 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8001468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a81      	ldr	r2, [pc, #516]	@ (8001674 <HAL_I2C_Init+0x274>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d807      	bhi.n	8001484 <HAL_I2C_Init+0x84>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a80      	ldr	r2, [pc, #512]	@ (8001678 <HAL_I2C_Init+0x278>)
 8001478:	4293      	cmp	r3, r2
 800147a:	bf94      	ite	ls
 800147c:	2301      	movls	r3, #1
 800147e:	2300      	movhi	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e006      	b.n	8001492 <HAL_I2C_Init+0x92>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a7d      	ldr	r2, [pc, #500]	@ (800167c <HAL_I2C_Init+0x27c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	bf94      	ite	ls
 800148c:	2301      	movls	r3, #1
 800148e:	2300      	movhi	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e0e7      	b.n	800166a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4a78      	ldr	r2, [pc, #480]	@ (8001680 <HAL_I2C_Init+0x280>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9b      	lsrs	r3, r3, #18
 80014a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001674 <HAL_I2C_Init+0x274>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d802      	bhi.n	80014d4 <HAL_I2C_Init+0xd4>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3301      	adds	r3, #1
 80014d2:	e009      	b.n	80014e8 <HAL_I2C_Init+0xe8>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4a69      	ldr	r2, [pc, #420]	@ (8001684 <HAL_I2C_Init+0x284>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	3301      	adds	r3, #1
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	495c      	ldr	r1, [pc, #368]	@ (8001674 <HAL_I2C_Init+0x274>)
 8001504:	428b      	cmp	r3, r1
 8001506:	d819      	bhi.n	800153c <HAL_I2C_Init+0x13c>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e59      	subs	r1, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fbb1 f3f3 	udiv	r3, r1, r3
 8001516:	1c59      	adds	r1, r3, #1
 8001518:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800151c:	400b      	ands	r3, r1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00a      	beq.n	8001538 <HAL_I2C_Init+0x138>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e59      	subs	r1, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	e051      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 8001538:	2304      	movs	r3, #4
 800153a:	e04f      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d111      	bne.n	8001568 <HAL_I2C_Init+0x168>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e58      	subs	r0, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	440b      	add	r3, r1
 8001552:	fbb0 f3f3 	udiv	r3, r0, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf0c      	ite	eq
 8001560:	2301      	moveq	r3, #1
 8001562:	2300      	movne	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	e012      	b.n	800158e <HAL_I2C_Init+0x18e>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	0099      	lsls	r1, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	fbb0 f3f3 	udiv	r3, r0, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Init+0x196>
 8001592:	2301      	movs	r3, #1
 8001594:	e022      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10e      	bne.n	80015bc <HAL_I2C_Init+0x1bc>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1e58      	subs	r0, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6859      	ldr	r1, [r3, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ba:	e00f      	b.n	80015dc <HAL_I2C_Init+0x1dc>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	0099      	lsls	r1, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	6809      	ldr	r1, [r1, #0]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800160a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6911      	ldr	r1, [r2, #16]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68d2      	ldr	r2, [r2, #12]
 8001616:	4311      	orrs	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	430b      	orrs	r3, r1
 800161e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2220      	movs	r2, #32
 8001656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	000186a0 	.word	0x000186a0
 8001678:	001e847f 	.word	0x001e847f
 800167c:	003d08ff 	.word	0x003d08ff
 8001680:	431bde83 	.word	0x431bde83
 8001684:	10624dd3 	.word	0x10624dd3

08001688 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	2b80      	cmp	r3, #128	@ 0x80
 800169c:	d103      	bne.n	80016a6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	817b      	strh	r3, [r7, #10]
 80016c0:	4613      	mov	r3, r2
 80016c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff fb04 	bl	8000cd0 <HAL_GetTick>
 80016c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	f040 80e0 	bne.w	8001898 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2319      	movs	r3, #25
 80016de:	2201      	movs	r2, #1
 80016e0:	4970      	ldr	r1, [pc, #448]	@ (80018a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f001 fdea 	bl	80032bc <I2C_WaitOnFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016ee:	2302      	movs	r3, #2
 80016f0:	e0d3      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_I2C_Master_Transmit+0x50>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e0cc      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b01      	cmp	r3, #1
 8001714:	d007      	beq.n	8001726 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001734:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2221      	movs	r2, #33	@ 0x21
 800173a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2210      	movs	r2, #16
 8001742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	893a      	ldrh	r2, [r7, #8]
 8001756:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a50      	ldr	r2, [pc, #320]	@ (80018a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001766:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001768:	8979      	ldrh	r1, [r7, #10]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	6a3a      	ldr	r2, [r7, #32]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f001 fc7a 	bl	8003068 <I2C_MasterRequestWrite>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e08d      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001794:	e066      	b.n	8001864 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	6a39      	ldr	r1, [r7, #32]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f001 fea8 	bl	80034f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00d      	beq.n	80017c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d107      	bne.n	80017be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06b      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017dc:	b29b      	uxth	r3, r3
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d11b      	bne.n	8001838 <HAL_I2C_Master_Transmit+0x188>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	2b00      	cmp	r3, #0
 8001806:	d017      	beq.n	8001838 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001822:	b29b      	uxth	r3, r3
 8001824:	3b01      	subs	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	6a39      	ldr	r1, [r7, #32]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f001 fe9f 	bl	8003580 <I2C_WaitOnBTFFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00d      	beq.n	8001864 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	2b04      	cmp	r3, #4
 800184e:	d107      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e01a      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	d194      	bne.n	8001796 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2220      	movs	r2, #32
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001898:	2302      	movs	r3, #2
  }
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	00100002 	.word	0x00100002
 80018a8:	ffff0000 	.word	0xffff0000

080018ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b10      	cmp	r3, #16
 80018da:	d003      	beq.n	80018e4 <HAL_I2C_EV_IRQHandler+0x38>
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b40      	cmp	r3, #64	@ 0x40
 80018e0:	f040 80b1 	bne.w	8001a46 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_I2C_EV_IRQHandler+0x6e>
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001904:	d003      	beq.n	800190e <HAL_I2C_EV_IRQHandler+0x62>
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800190c:	d101      	bne.n	8001912 <HAL_I2C_EV_IRQHandler+0x66>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_I2C_EV_IRQHandler+0x68>
 8001912:	2300      	movs	r3, #0
 8001914:	2b01      	cmp	r3, #1
 8001916:	f000 8114 	beq.w	8001b42 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00b      	beq.n	800193c <HAL_I2C_EV_IRQHandler+0x90>
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f001 fece 	bl	80036d0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fd74 	bl	8002422 <I2C_Master_SB>
 800193a:	e083      	b.n	8001a44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0xac>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fdeb 	bl	800252c <I2C_Master_ADD10>
 8001956:	e075      	b.n	8001a44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_I2C_EV_IRQHandler+0xc8>
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fe06 	bl	800257e <I2C_Master_ADDR>
 8001972:	e067      	b.n	8001a44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d036      	beq.n	80019ec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800198c:	f000 80db 	beq.w	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00d      	beq.n	80019b6 <HAL_I2C_EV_IRQHandler+0x10a>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_I2C_EV_IRQHandler+0x10a>
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f9d4 	bl	8001d5c <I2C_MasterTransmit_TXE>
 80019b4:	e046      	b.n	8001a44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80c2 	beq.w	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80bc 	beq.w	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	2b21      	cmp	r3, #33	@ 0x21
 80019d2:	d103      	bne.n	80019dc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fa5d 	bl	8001e94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019da:	e0b4      	b.n	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b40      	cmp	r3, #64	@ 0x40
 80019e0:	f040 80b1 	bne.w	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 facb 	bl	8001f80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ea:	e0ac      	b.n	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019fa:	f000 80a4 	beq.w	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00d      	beq.n	8001a24 <HAL_I2C_EV_IRQHandler+0x178>
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <HAL_I2C_EV_IRQHandler+0x178>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 fb47 	bl	80020b0 <I2C_MasterReceive_RXNE>
 8001a22:	e00f      	b.n	8001a44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 808b 	beq.w	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8085 	beq.w	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fbff 	bl	8002240 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a42:	e080      	b.n	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
 8001a44:	e07f      	b.n	8001b46 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e007      	b.n	8001a68 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d011      	beq.n	8001a96 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00c      	beq.n	8001a96 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a8c:	69b9      	ldr	r1, [r7, #24]
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 ffcc 	bl	8002a2c <I2C_Slave_ADDR>
 8001a94:	e05a      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_I2C_EV_IRQHandler+0x206>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f001 f806 	bl	8002abc <I2C_Slave_STOPF>
 8001ab0:	e04c      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	2b21      	cmp	r3, #33	@ 0x21
 8001ab6:	d002      	beq.n	8001abe <HAL_I2C_EV_IRQHandler+0x212>
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	2b29      	cmp	r3, #41	@ 0x29
 8001abc:	d120      	bne.n	8001b00 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_I2C_EV_IRQHandler+0x238>
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <HAL_I2C_EV_IRQHandler+0x238>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fee9 	bl	80028b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ae2:	e032      	b.n	8001b4a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02d      	beq.n	8001b4a <HAL_I2C_EV_IRQHandler+0x29e>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d028      	beq.n	8001b4a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 ff18 	bl	800292e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001afe:	e024      	b.n	8001b4a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00d      	beq.n	8001b26 <HAL_I2C_EV_IRQHandler+0x27a>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_I2C_EV_IRQHandler+0x27a>
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 ff25 	bl	800296e <I2C_SlaveReceive_RXNE>
 8001b24:	e012      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00d      	beq.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2a0>
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 ff55 	bl	80029ea <I2C_SlaveReceive_BTF>
 8001b40:	e004      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001b42:	bf00      	nop
 8001b44:	e002      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b46:	bf00      	nop
 8001b48:	e000      	b.n	8001b4c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08a      	sub	sp, #40	@ 0x28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d015      	beq.n	8001bac <HAL_I2C_ER_IRQHandler+0x5a>
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d010      	beq.n	8001bac <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b9a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_I2C_ER_IRQHandler+0x80>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d008      	beq.n	8001bd2 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001bd0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d03e      	beq.n	8001c5a <HAL_I2C_ER_IRQHandler+0x108>
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d039      	beq.n	8001c5a <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001be6:	7efb      	ldrb	r3, [r7, #27]
 8001be8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001c00:	7ebb      	ldrb	r3, [r7, #26]
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d112      	bne.n	8001c2c <HAL_I2C_ER_IRQHandler+0xda>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10f      	bne.n	8001c2c <HAL_I2C_ER_IRQHandler+0xda>
 8001c0c:	7cfb      	ldrb	r3, [r7, #19]
 8001c0e:	2b21      	cmp	r3, #33	@ 0x21
 8001c10:	d008      	beq.n	8001c24 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001c12:	7cfb      	ldrb	r3, [r7, #19]
 8001c14:	2b29      	cmp	r3, #41	@ 0x29
 8001c16:	d005      	beq.n	8001c24 <HAL_I2C_ER_IRQHandler+0xd2>
 8001c18:	7cfb      	ldrb	r3, [r7, #19]
 8001c1a:	2b28      	cmp	r3, #40	@ 0x28
 8001c1c:	d106      	bne.n	8001c2c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b21      	cmp	r3, #33	@ 0x21
 8001c22:	d103      	bne.n	8001c2c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f001 f879 	bl	8002d1c <I2C_Slave_AF>
 8001c2a:	e016      	b.n	8001c5a <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c34:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c3e:	7efb      	ldrb	r3, [r7, #27]
 8001c40:	2b10      	cmp	r3, #16
 8001c42:	d002      	beq.n	8001c4a <HAL_I2C_ER_IRQHandler+0xf8>
 8001c44:	7efb      	ldrb	r3, [r7, #27]
 8001c46:	2b40      	cmp	r3, #64	@ 0x40
 8001c48:	d107      	bne.n	8001c5a <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c58:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <HAL_I2C_ER_IRQHandler+0x12e>
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001c7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f001 f8b6 	bl	8002e04 <I2C_ITError>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	@ 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d150      	bne.n	8001e24 <I2C_MasterTransmit_TXE+0xc8>
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b21      	cmp	r3, #33	@ 0x21
 8001d86:	d14d      	bne.n	8001e24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d01d      	beq.n	8001dca <I2C_MasterTransmit_TXE+0x6e>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d01a      	beq.n	8001dca <I2C_MasterTransmit_TXE+0x6e>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d9a:	d016      	beq.n	8001dca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001daa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2211      	movs	r2, #17
 8001db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff6c 	bl	8001ca0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dc8:	e060      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001dd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b40      	cmp	r3, #64	@ 0x40
 8001e02:	d107      	bne.n	8001e14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff81 	bl	8001d14 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e12:	e03b      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff3f 	bl	8001ca0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e22:	e033      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b21      	cmp	r3, #33	@ 0x21
 8001e28:	d005      	beq.n	8001e36 <I2C_MasterTransmit_TXE+0xda>
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	2b40      	cmp	r3, #64	@ 0x40
 8001e2e:	d12d      	bne.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b22      	cmp	r3, #34	@ 0x22
 8001e34:	d12a      	bne.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d108      	bne.n	8001e52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e50:	e01c      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b40      	cmp	r3, #64	@ 0x40
 8001e5c:	d103      	bne.n	8001e66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f88e 	bl	8001f80 <I2C_MemoryTransmit_TXE_BTF>
}
 8001e64:	e012      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001e8a:	e7ff      	b.n	8001e8c <I2C_MasterTransmit_TXE+0x130>
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b21      	cmp	r3, #33	@ 0x21
 8001eac:	d164      	bne.n	8001f78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d012      	beq.n	8001ede <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001edc:	e04c      	b.n	8001f78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d01d      	beq.n	8001f20 <I2C_MasterTransmit_BTF+0x8c>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d01a      	beq.n	8001f20 <I2C_MasterTransmit_BTF+0x8c>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ef0:	d016      	beq.n	8001f20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2211      	movs	r2, #17
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fec1 	bl	8001ca0 <HAL_I2C_MasterTxCpltCallback>
}
 8001f1e:	e02b      	b.n	8001f78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b40      	cmp	r3, #64	@ 0x40
 8001f58:	d107      	bne.n	8001f6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fed6 	bl	8001d14 <HAL_I2C_MemTxCpltCallback>
}
 8001f68:	e006      	b.n	8001f78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fe94 	bl	8001ca0 <HAL_I2C_MasterTxCpltCallback>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d11d      	bne.n	8001fd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10b      	bne.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb0:	1c9a      	adds	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001fb6:	e077      	b.n	80020a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	121b      	asrs	r3, r3, #8
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fd2:	e069      	b.n	80020a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d10b      	bne.n	8001ff4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ff2:	e059      	b.n	80020a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d152      	bne.n	80020a2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b22      	cmp	r3, #34	@ 0x22
 8002000:	d10d      	bne.n	800201e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002010:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800201c:	e044      	b.n	80020a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b21      	cmp	r3, #33	@ 0x21
 800202c:	d112      	bne.n	8002054 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002052:	e029      	b.n	80020a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d124      	bne.n	80020a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b21      	cmp	r3, #33	@ 0x21
 8002062:	d121      	bne.n	80020a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002072:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002082:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fe3a 	bl	8001d14 <HAL_I2C_MemTxCpltCallback>
}
 80020a0:	e002      	b.n	80020a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff faf0 	bl	8001688 <I2C_Flush_DR>
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b22      	cmp	r3, #34	@ 0x22
 80020c2:	f040 80b9 	bne.w	8002238 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d921      	bls.n	800211e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b03      	cmp	r3, #3
 8002108:	f040 8096 	bne.w	8002238 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800211a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800211c:	e08c      	b.n	8002238 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002122:	2b02      	cmp	r3, #2
 8002124:	d07f      	beq.n	8002226 <I2C_MasterReceive_RXNE+0x176>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d002      	beq.n	8002132 <I2C_MasterReceive_RXNE+0x82>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d179      	bne.n	8002226 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f001 fa6c 	bl	8003610 <I2C_WaitOnSTOPRequestThroughIT>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d14c      	bne.n	80021d8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800214c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800215c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b40      	cmp	r3, #64	@ 0x40
 8002196:	d10a      	bne.n	80021ae <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fdbd 	bl	8001d26 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021ac:	e044      	b.n	8002238 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d002      	beq.n	80021c2 <I2C_MasterReceive_RXNE+0x112>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d103      	bne.n	80021ca <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021c8:	e002      	b.n	80021d0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2212      	movs	r2, #18
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fd6e 	bl	8001cb2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021d6:	e02f      	b.n	8002238 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fd8a 	bl	8001d38 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002224:	e008      	b.n	8002238 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002234:	605a      	str	r2, [r3, #4]
}
 8002236:	e7ff      	b.n	8002238 <I2C_MasterReceive_RXNE+0x188>
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b04      	cmp	r3, #4
 8002256:	d11b      	bne.n	8002290 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002266:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800228e:	e0c4      	b.n	800241a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b03      	cmp	r3, #3
 8002298:	d129      	bne.n	80022ee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d00a      	beq.n	80022c6 <I2C_MasterReceive_BTF+0x86>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d007      	beq.n	80022c6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80022ec:	e095      	b.n	800241a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d17d      	bne.n	80023f4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <I2C_MasterReceive_BTF+0xc4>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b10      	cmp	r3, #16
 8002302:	d108      	bne.n	8002316 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e016      	b.n	8002344 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d002      	beq.n	8002322 <I2C_MasterReceive_BTF+0xe2>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d108      	bne.n	8002334 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e007      	b.n	8002344 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002342:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800239e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b40      	cmp	r3, #64	@ 0x40
 80023b2:	d10a      	bne.n	80023ca <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fcaf 	bl	8001d26 <HAL_I2C_MemRxCpltCallback>
}
 80023c8:	e027      	b.n	800241a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d002      	beq.n	80023de <I2C_MasterReceive_BTF+0x19e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d103      	bne.n	80023e6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e4:	e002      	b.n	80023ec <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2212      	movs	r2, #18
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fc60 	bl	8001cb2 <HAL_I2C_MasterRxCpltCallback>
}
 80023f2:	e012      	b.n	800241a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b40      	cmp	r3, #64	@ 0x40
 8002434:	d117      	bne.n	8002466 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800244e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002450:	e067      	b.n	8002522 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]
}
 8002464:	e05d      	b.n	8002522 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800246e:	d133      	bne.n	80024d8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b21      	cmp	r3, #33	@ 0x21
 800247a:	d109      	bne.n	8002490 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800248c:	611a      	str	r2, [r3, #16]
 800248e:	e008      	b.n	80024a2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <I2C_Master_SB+0x92>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d108      	bne.n	80024c6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d032      	beq.n	8002522 <I2C_Master_SB+0x100>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d02d      	beq.n	8002522 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d4:	605a      	str	r2, [r3, #4]
}
 80024d6:	e024      	b.n	8002522 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10e      	bne.n	80024fe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	11db      	asrs	r3, r3, #7
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f003 0306 	and.w	r3, r3, #6
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f063 030f 	orn	r3, r3, #15
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]
}
 80024fc:	e011      	b.n	8002522 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002502:	2b01      	cmp	r3, #1
 8002504:	d10d      	bne.n	8002522 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	b29b      	uxth	r3, r3
 800250c:	11db      	asrs	r3, r3, #7
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 0306 	and.w	r3, r3, #6
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f063 030e 	orn	r3, r3, #14
 800251a:	b2da      	uxtb	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	611a      	str	r2, [r3, #16]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002538:	b2da      	uxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <I2C_Master_ADD10+0x26>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d108      	bne.n	8002564 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00c      	beq.n	8002574 <I2C_Master_ADD10+0x48>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002572:	605a      	str	r2, [r3, #4]
  }
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800257e:	b480      	push	{r7}
 8002580:	b091      	sub	sp, #68	@ 0x44
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800258c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002594:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b22      	cmp	r3, #34	@ 0x22
 80025a6:	f040 8174 	bne.w	8002892 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <I2C_Master_ADDR+0x54>
 80025b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025b6:	2b40      	cmp	r3, #64	@ 0x40
 80025b8:	d10b      	bne.n	80025d2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ba:	2300      	movs	r3, #0
 80025bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	e16b      	b.n	80028aa <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11d      	bne.n	8002616 <I2C_Master_ADDR+0x98>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80025e2:	d118      	bne.n	8002616 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e4:	2300      	movs	r3, #0
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002608:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	651a      	str	r2, [r3, #80]	@ 0x50
 8002614:	e149      	b.n	80028aa <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d113      	bne.n	8002648 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002634:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e120      	b.n	800288a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	f040 808a 	bne.w	8002768 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002656:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800265a:	d137      	bne.n	80026cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800266a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800267a:	d113      	bne.n	80026a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800268a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	e0f2      	b.n	800288a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	623b      	str	r3, [r7, #32]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e0de      	b.n	800288a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80026cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d02e      	beq.n	8002730 <I2C_Master_ADDR+0x1b2>
 80026d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d02b      	beq.n	8002730 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80026d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d102      	bne.n	80026e4 <I2C_Master_ADDR+0x166>
 80026de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d125      	bne.n	8002730 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d00e      	beq.n	8002708 <I2C_Master_ADDR+0x18a>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d00b      	beq.n	8002708 <I2C_Master_ADDR+0x18a>
 80026f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d008      	beq.n	8002708 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e007      	b.n	8002718 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002716:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	e0ac      	b.n	800288a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e090      	b.n	800288a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d158      	bne.n	8002824 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002774:	2b04      	cmp	r3, #4
 8002776:	d021      	beq.n	80027bc <I2C_Master_ADDR+0x23e>
 8002778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277a:	2b02      	cmp	r3, #2
 800277c:	d01e      	beq.n	80027bc <I2C_Master_ADDR+0x23e>
 800277e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002780:	2b10      	cmp	r3, #16
 8002782:	d01b      	beq.n	80027bc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002792:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e012      	b.n	80027e2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027f0:	d14b      	bne.n	800288a <I2C_Master_ADDR+0x30c>
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027f8:	d00b      	beq.n	8002812 <I2C_Master_ADDR+0x294>
 80027fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d008      	beq.n	8002812 <I2C_Master_ADDR+0x294>
 8002800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002802:	2b08      	cmp	r3, #8
 8002804:	d005      	beq.n	8002812 <I2C_Master_ADDR+0x294>
 8002806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002808:	2b10      	cmp	r3, #16
 800280a:	d002      	beq.n	8002812 <I2C_Master_ADDR+0x294>
 800280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280e:	2b20      	cmp	r3, #32
 8002810:	d13b      	bne.n	800288a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	e032      	b.n	800288a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002832:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002842:	d117      	bne.n	8002874 <I2C_Master_ADDR+0x2f6>
 8002844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002846:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800284a:	d00b      	beq.n	8002864 <I2C_Master_ADDR+0x2e6>
 800284c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284e:	2b01      	cmp	r3, #1
 8002850:	d008      	beq.n	8002864 <I2C_Master_ADDR+0x2e6>
 8002852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002854:	2b08      	cmp	r3, #8
 8002856:	d005      	beq.n	8002864 <I2C_Master_ADDR+0x2e6>
 8002858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285a:	2b10      	cmp	r3, #16
 800285c:	d002      	beq.n	8002864 <I2C_Master_ADDR+0x2e6>
 800285e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002860:	2b20      	cmp	r3, #32
 8002862:	d107      	bne.n	8002874 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002872:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002890:	e00b      	b.n	80028aa <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
}
 80028a8:	e7ff      	b.n	80028aa <I2C_Master_ADDR+0x32c>
 80028aa:	bf00      	nop
 80028ac:	3744      	adds	r7, #68	@ 0x44
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d02b      	beq.n	8002926 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d114      	bne.n	8002926 <I2C_SlaveTransmit_TXE+0x72>
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b29      	cmp	r3, #41	@ 0x29
 8002900:	d111      	bne.n	8002926 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002910:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2221      	movs	r2, #33	@ 0x21
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2228      	movs	r2, #40	@ 0x28
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff f9cf 	bl	8001cc4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d011      	beq.n	8002964 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02c      	beq.n	80029e2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d114      	bne.n	80029e2 <I2C_SlaveReceive_RXNE+0x74>
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80029bc:	d111      	bne.n	80029e2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2222      	movs	r2, #34	@ 0x22
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2228      	movs	r2, #40	@ 0x28
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff f97a 	bl	8001cd6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a46:	2b28      	cmp	r3, #40	@ 0x28
 8002a48:	d125      	bne.n	8002a96 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a58:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	81bb      	strh	r3, [r7, #12]
 8002a78:	e002      	b.n	8002a80 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002a88:	89ba      	ldrh	r2, [r7, #12]
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff f92a 	bl	8001ce8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a94:	e00e      	b.n	8002ab4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ada:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b18:	d172      	bne.n	8002c00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b22      	cmp	r3, #34	@ 0x22
 8002b1e:	d002      	beq.n	8002b26 <I2C_Slave_STOPF+0x6a>
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b24:	d135      	bne.n	8002b92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fa6a 	bl	8001038 <HAL_DMA_GetState>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d049      	beq.n	8002bfe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	4a69      	ldr	r2, [pc, #420]	@ (8002d14 <I2C_Slave_STOPF+0x258>)
 8002b70:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f9e6 	bl	8000f48 <HAL_DMA_Abort_IT>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d03d      	beq.n	8002bfe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b90:	e035      	b.n	8002bfe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f043 0204 	orr.w	r2, r3, #4
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fa34 	bl	8001038 <HAL_DMA_GetState>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d014      	beq.n	8002c00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bda:	4a4e      	ldr	r2, [pc, #312]	@ (8002d14 <I2C_Slave_STOPF+0x258>)
 8002bdc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f9b0 	bl	8000f48 <HAL_DMA_Abort_IT>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4798      	blx	r3
 8002bfc:	e000      	b.n	8002c00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bfe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d03e      	beq.n	8002c88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d112      	bne.n	8002c3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691a      	ldr	r2, [r3, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c48:	2b40      	cmp	r3, #64	@ 0x40
 8002c4a:	d112      	bne.n	8002c72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f043 0204 	orr.w	r2, r3, #4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f8b7 	bl	8002e04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002c96:	e039      	b.n	8002d0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c9c:	d109      	bne.n	8002cb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2228      	movs	r2, #40	@ 0x28
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff f812 	bl	8001cd6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b28      	cmp	r3, #40	@ 0x28
 8002cbc:	d111      	bne.n	8002ce2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a15      	ldr	r2, [pc, #84]	@ (8002d18 <I2C_Slave_STOPF+0x25c>)
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff f811 	bl	8001d02 <HAL_I2C_ListenCpltCallback>
}
 8002ce0:	e014      	b.n	8002d0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	2b22      	cmp	r3, #34	@ 0x22
 8002ce8:	d002      	beq.n	8002cf0 <I2C_Slave_STOPF+0x234>
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b22      	cmp	r3, #34	@ 0x22
 8002cee:	d10d      	bne.n	8002d0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe ffe5 	bl	8001cd6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	0800316d 	.word	0x0800316d
 8002d18:	ffff0000 	.word	0xffff0000

08002d1c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d002      	beq.n	8002d3e <I2C_Slave_AF+0x22>
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d129      	bne.n	8002d92 <I2C_Slave_AF+0x76>
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b28      	cmp	r3, #40	@ 0x28
 8002d42:	d126      	bne.n	8002d92 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a2e      	ldr	r2, [pc, #184]	@ (8002e00 <I2C_Slave_AF+0xe4>)
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d58:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d62:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe ffb9 	bl	8001d02 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002d90:	e031      	b.n	8002df6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b21      	cmp	r3, #33	@ 0x21
 8002d96:	d129      	bne.n	8002dec <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a19      	ldr	r2, [pc, #100]	@ (8002e00 <I2C_Slave_AF+0xe4>)
 8002d9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2221      	movs	r2, #33	@ 0x21
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dc2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dcc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ddc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe fc52 	bl	8001688 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fe ff6d 	bl	8001cc4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002dea:	e004      	b.n	8002df6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002df4:	615a      	str	r2, [r3, #20]
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	ffff0000 	.word	0xffff0000

08002e04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e1c:	7bbb      	ldrb	r3, [r7, #14]
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d002      	beq.n	8002e28 <I2C_ITError+0x24>
 8002e22:	7bbb      	ldrb	r3, [r7, #14]
 8002e24:	2b40      	cmp	r3, #64	@ 0x40
 8002e26:	d10a      	bne.n	8002e3e <I2C_ITError+0x3a>
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b22      	cmp	r3, #34	@ 0x22
 8002e2c:	d107      	bne.n	8002e3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e44:	2b28      	cmp	r3, #40	@ 0x28
 8002e46:	d107      	bne.n	8002e58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2228      	movs	r2, #40	@ 0x28
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e56:	e015      	b.n	8002e84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e66:	d00a      	beq.n	8002e7e <I2C_ITError+0x7a>
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b60      	cmp	r3, #96	@ 0x60
 8002e6c:	d007      	beq.n	8002e7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e92:	d162      	bne.n	8002f5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d020      	beq.n	8002ef4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb6:	4a6a      	ldr	r2, [pc, #424]	@ (8003060 <I2C_ITError+0x25c>)
 8002eb8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe f842 	bl	8000f48 <HAL_DMA_Abort_IT>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8089 	beq.w	8002fde <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4798      	blx	r3
 8002ef2:	e074      	b.n	8002fde <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef8:	4a59      	ldr	r2, [pc, #356]	@ (8003060 <I2C_ITError+0x25c>)
 8002efa:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe f821 	bl	8000f48 <HAL_DMA_Abort_IT>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d068      	beq.n	8002fde <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f16:	2b40      	cmp	r3, #64	@ 0x40
 8002f18:	d10b      	bne.n	8002f32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0201 	bic.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f54:	4610      	mov	r0, r2
 8002f56:	4798      	blx	r3
 8002f58:	e041      	b.n	8002fde <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b60      	cmp	r3, #96	@ 0x60
 8002f64:	d125      	bne.n	8002fb2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b40      	cmp	r3, #64	@ 0x40
 8002f80:	d10b      	bne.n	8002f9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fecd 	bl	8001d4a <HAL_I2C_AbortCpltCallback>
 8002fb0:	e015      	b.n	8002fde <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	d10b      	bne.n	8002fd8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7fe fead 	bl	8001d38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10e      	bne.n	800300c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d104      	bne.n	800300c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800301a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003022:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d113      	bne.n	8003058 <I2C_ITError+0x254>
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b28      	cmp	r3, #40	@ 0x28
 8003034:	d110      	bne.n	8003058 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a0a      	ldr	r2, [pc, #40]	@ (8003064 <I2C_ITError+0x260>)
 800303a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe fe55 	bl	8001d02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	0800316d 	.word	0x0800316d
 8003064:	ffff0000 	.word	0xffff0000

08003068 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	460b      	mov	r3, r1
 8003076:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d006      	beq.n	8003092 <I2C_MasterRequestWrite+0x2a>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <I2C_MasterRequestWrite+0x2a>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003090:	d108      	bne.n	80030a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e00b      	b.n	80030bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a8:	2b12      	cmp	r3, #18
 80030aa:	d107      	bne.n	80030bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f8f7 	bl	80032bc <I2C_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e2:	d103      	bne.n	80030ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e035      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030f8:	d108      	bne.n	800310c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	e01b      	b.n	8003144 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800310c:	897b      	ldrh	r3, [r7, #10]
 800310e:	11db      	asrs	r3, r3, #7
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 0306 	and.w	r3, r3, #6
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f063 030f 	orn	r3, r3, #15
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	490e      	ldr	r1, [pc, #56]	@ (8003164 <I2C_MasterRequestWrite+0xfc>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f940 	bl	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e010      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4907      	ldr	r1, [pc, #28]	@ (8003168 <I2C_MasterRequestWrite+0x100>)
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f930 	bl	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	00010008 	.word	0x00010008
 8003168:	00010002 	.word	0x00010002

0800316c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003184:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003186:	4b4b      	ldr	r3, [pc, #300]	@ (80032b4 <I2C_DMAAbort+0x148>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	08db      	lsrs	r3, r3, #3
 800318c:	4a4a      	ldr	r2, [pc, #296]	@ (80032b8 <I2C_DMAAbort+0x14c>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0a1a      	lsrs	r2, r3, #8
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00da      	lsls	r2, r3, #3
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80031b2:	e00a      	b.n	80031ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c8:	d0ea      	beq.n	80031a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d6:	2200      	movs	r2, #0
 80031d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320c:	2200      	movs	r2, #0
 800320e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	2200      	movs	r2, #0
 800321e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b60      	cmp	r3, #96	@ 0x60
 800323a:	d10e      	bne.n	800325a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003252:	6978      	ldr	r0, [r7, #20]
 8003254:	f7fe fd79 	bl	8001d4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003258:	e027      	b.n	80032aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003260:	2b28      	cmp	r3, #40	@ 0x28
 8003262:	d117      	bne.n	8003294 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003282:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2228      	movs	r2, #40	@ 0x28
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003292:	e007      	b.n	80032a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80032a4:	6978      	ldr	r0, [r7, #20]
 80032a6:	f7fe fd47 	bl	8001d38 <HAL_I2C_ErrorCallback>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000034 	.word	0x20000034
 80032b8:	14f8b589 	.word	0x14f8b589

080032bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032cc:	e048      	b.n	8003360 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d044      	beq.n	8003360 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7fd fcfb 	bl	8000cd0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d139      	bne.n	8003360 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d10d      	bne.n	8003312 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	e00c      	b.n	800332c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	43da      	mvns	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	429a      	cmp	r2, r3
 8003330:	d116      	bne.n	8003360 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e023      	b.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10d      	bne.n	8003386 <I2C_WaitOnFlagUntilTimeout+0xca>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	e00c      	b.n	80033a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	43da      	mvns	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d093      	beq.n	80032ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033be:	e071      	b.n	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ce:	d123      	bne.n	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e067      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d041      	beq.n	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003420:	f7fd fc56 	bl	8000cd0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d136      	bne.n	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d10c      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4013      	ands	r3, r2
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	e00b      	b.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	43da      	mvns	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4013      	ands	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e021      	b.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	0c1b      	lsrs	r3, r3, #16
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10c      	bne.n	80034c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	43da      	mvns	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	e00b      	b.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f47f af6d 	bne.w	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034fc:	e034      	b.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8b8 	bl	8003674 <I2C_IsAcknowledgeFailed>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e034      	b.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d028      	beq.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003516:	f7fd fbdb 	bl	8000cd0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	429a      	cmp	r2, r3
 8003524:	d302      	bcc.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11d      	bne.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	2b80      	cmp	r3, #128	@ 0x80
 8003538:	d016      	beq.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e007      	b.n	8003578 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003572:	2b80      	cmp	r3, #128	@ 0x80
 8003574:	d1c3      	bne.n	80034fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800358c:	e034      	b.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f870 	bl	8003674 <I2C_IsAcknowledgeFailed>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e034      	b.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d028      	beq.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fd fb93 	bl	8000cd0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d11d      	bne.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d016      	beq.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e007      	b.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d1c3      	bne.n	800358e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	4a13      	ldr	r2, [pc, #76]	@ (8003670 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	0a1a      	lsrs	r2, r3, #8
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3b01      	subs	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d107      	bne.n	800364e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f043 0220 	orr.w	r2, r3, #32
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e008      	b.n	8003660 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800365c:	d0e9      	beq.n	8003632 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000034 	.word	0x20000034
 8003670:	14f8b589 	.word	0x14f8b589

08003674 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368a:	d11b      	bne.n	80036c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003694:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80036e0:	d103      	bne.n	80036ea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80036e8:	e007      	b.n	80036fa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80036f2:	d102      	bne.n	80036fa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2208      	movs	r2, #8
 80036f8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e272      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8087 	beq.w	8003832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003724:	4b92      	ldr	r3, [pc, #584]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b04      	cmp	r3, #4
 800372e:	d00c      	beq.n	800374a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003730:	4b8f      	ldr	r3, [pc, #572]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d112      	bne.n	8003762 <HAL_RCC_OscConfig+0x5e>
 800373c:	4b8c      	ldr	r3, [pc, #560]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003748:	d10b      	bne.n	8003762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374a:	4b89      	ldr	r3, [pc, #548]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d06c      	beq.n	8003830 <HAL_RCC_OscConfig+0x12c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d168      	bne.n	8003830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e24c      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800376a:	d106      	bne.n	800377a <HAL_RCC_OscConfig+0x76>
 800376c:	4b80      	ldr	r3, [pc, #512]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7f      	ldr	r2, [pc, #508]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	e02e      	b.n	80037d8 <HAL_RCC_OscConfig+0xd4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x98>
 8003782:	4b7b      	ldr	r3, [pc, #492]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7a      	ldr	r2, [pc, #488]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b78      	ldr	r3, [pc, #480]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a77      	ldr	r2, [pc, #476]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e01d      	b.n	80037d8 <HAL_RCC_OscConfig+0xd4>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0xbc>
 80037a6:	4b72      	ldr	r3, [pc, #456]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a71      	ldr	r2, [pc, #452]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0xd4>
 80037c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b68      	ldr	r3, [pc, #416]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a67      	ldr	r2, [pc, #412]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fd fa76 	bl	8000cd0 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fd fa72 	bl	8000cd0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	@ 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e200      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0xe4>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fd fa62 	bl	8000cd0 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7fd fa5e 	bl	8000cd0 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	@ 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e1ec      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	4b53      	ldr	r3, [pc, #332]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x10c>
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800383e:	4b4c      	ldr	r3, [pc, #304]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800384a:	4b49      	ldr	r3, [pc, #292]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b08      	cmp	r3, #8
 8003854:	d11c      	bne.n	8003890 <HAL_RCC_OscConfig+0x18c>
 8003856:	4b46      	ldr	r3, [pc, #280]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d116      	bne.n	8003890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	4b43      	ldr	r3, [pc, #268]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x176>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e1c0      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b3d      	ldr	r3, [pc, #244]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4939      	ldr	r1, [pc, #228]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	e03a      	b.n	8003906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003898:	4b36      	ldr	r3, [pc, #216]	@ (8003974 <HAL_RCC_OscConfig+0x270>)
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389e:	f7fd fa17 	bl	8000cd0 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fd fa13 	bl	8000cd0 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e1a1      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4927      	ldr	r1, [pc, #156]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]
 80038d8:	e015      	b.n	8003906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <HAL_RCC_OscConfig+0x270>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fd f9f6 	bl	8000cd0 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e8:	f7fd f9f2 	bl	8000cd0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e180      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d03a      	beq.n	8003988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d019      	beq.n	800394e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391a:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <HAL_RCC_OscConfig+0x274>)
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003920:	f7fd f9d6 	bl	8000cd0 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003928:	f7fd f9d2 	bl	8000cd0 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e160      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	4b0d      	ldr	r3, [pc, #52]	@ (8003970 <HAL_RCC_OscConfig+0x26c>)
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003946:	2001      	movs	r0, #1
 8003948:	f000 faba 	bl	8003ec0 <RCC_Delay>
 800394c:	e01c      	b.n	8003988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394e:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <HAL_RCC_OscConfig+0x274>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003954:	f7fd f9bc 	bl	8000cd0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395a:	e00f      	b.n	800397c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395c:	f7fd f9b8 	bl	8000cd0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d908      	bls.n	800397c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e146      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	42420000 	.word	0x42420000
 8003978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397c:	4b92      	ldr	r3, [pc, #584]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e9      	bne.n	800395c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a6 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399a:	4b8b      	ldr	r3, [pc, #556]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10d      	bne.n	80039c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	4b88      	ldr	r3, [pc, #544]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4a87      	ldr	r2, [pc, #540]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	61d3      	str	r3, [r2, #28]
 80039b2:	4b85      	ldr	r3, [pc, #532]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	4b82      	ldr	r3, [pc, #520]	@ (8003bcc <HAL_RCC_OscConfig+0x4c8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ce:	4b7f      	ldr	r3, [pc, #508]	@ (8003bcc <HAL_RCC_OscConfig+0x4c8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7e      	ldr	r2, [pc, #504]	@ (8003bcc <HAL_RCC_OscConfig+0x4c8>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039da:	f7fd f979 	bl	8000cd0 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e2:	f7fd f975 	bl	8000cd0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	@ 0x64
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e103      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	4b75      	ldr	r3, [pc, #468]	@ (8003bcc <HAL_RCC_OscConfig+0x4c8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d106      	bne.n	8003a16 <HAL_RCC_OscConfig+0x312>
 8003a08:	4b6f      	ldr	r3, [pc, #444]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6213      	str	r3, [r2, #32]
 8003a14:	e02d      	b.n	8003a72 <HAL_RCC_OscConfig+0x36e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0x334>
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4a69      	ldr	r2, [pc, #420]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	6213      	str	r3, [r2, #32]
 8003a2a:	4b67      	ldr	r3, [pc, #412]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a66      	ldr	r2, [pc, #408]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	6213      	str	r3, [r2, #32]
 8003a36:	e01c      	b.n	8003a72 <HAL_RCC_OscConfig+0x36e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x356>
 8003a40:	4b61      	ldr	r3, [pc, #388]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a60      	ldr	r2, [pc, #384]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4a5d      	ldr	r2, [pc, #372]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	e00b      	b.n	8003a72 <HAL_RCC_OscConfig+0x36e>
 8003a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	4a5a      	ldr	r2, [pc, #360]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	6213      	str	r3, [r2, #32]
 8003a66:	4b58      	ldr	r3, [pc, #352]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a57      	ldr	r2, [pc, #348]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f023 0304 	bic.w	r3, r3, #4
 8003a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d015      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7a:	f7fd f929 	bl	8000cd0 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fd f925 	bl	8000cd0 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0b1      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	4b4b      	ldr	r3, [pc, #300]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ee      	beq.n	8003a82 <HAL_RCC_OscConfig+0x37e>
 8003aa4:	e014      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa6:	f7fd f913 	bl	8000cd0 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fd f90f 	bl	8000cd0 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e09b      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac4:	4b40      	ldr	r3, [pc, #256]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ee      	bne.n	8003aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8087 	beq.w	8003bfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aec:	4b36      	ldr	r3, [pc, #216]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d061      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d146      	bne.n	8003b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b00:	4b33      	ldr	r3, [pc, #204]	@ (8003bd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b06:	f7fd f8e3 	bl	8000cd0 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fd f8df 	bl	8000cd0 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e06d      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b20:	4b29      	ldr	r3, [pc, #164]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f0      	bne.n	8003b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	d108      	bne.n	8003b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b36:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4921      	ldr	r1, [pc, #132]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b48:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a19      	ldr	r1, [r3, #32]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	491b      	ldr	r1, [pc, #108]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b60:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fd f8b3 	bl	8000cd0 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fd f8af 	bl	8000cd0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e03d      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b80:	4b11      	ldr	r3, [pc, #68]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x46a>
 8003b8c:	e035      	b.n	8003bfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd f89c 	bl	8000cd0 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd f898 	bl	8000cd0 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e026      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x498>
 8003bba:	e01e      	b.n	8003bfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e019      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <HAL_RCC_OscConfig+0x500>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000

08003c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0d0      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d910      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b67      	ldr	r3, [pc, #412]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 0207 	bic.w	r2, r3, #7
 8003c32:	4965      	ldr	r1, [pc, #404]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b63      	ldr	r3, [pc, #396]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0b8      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c64:	4b59      	ldr	r3, [pc, #356]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a58      	ldr	r2, [pc, #352]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c7c:	4b53      	ldr	r3, [pc, #332]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a52      	ldr	r2, [pc, #328]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b50      	ldr	r3, [pc, #320]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	494d      	ldr	r1, [pc, #308]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d040      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b47      	ldr	r3, [pc, #284]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d115      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e07f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	4b41      	ldr	r3, [pc, #260]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e073      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e06b      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce6:	4b39      	ldr	r3, [pc, #228]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4936      	ldr	r1, [pc, #216]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fc ffea 	bl	8000cd0 <HAL_GetTick>
 8003cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d00:	f7fc ffe6 	bl	8000cd0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e053      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	4b2d      	ldr	r3, [pc, #180]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 020c 	and.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d1eb      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d28:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d210      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	4922      	ldr	r1, [pc, #136]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b20      	ldr	r3, [pc, #128]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e032      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b19      	ldr	r3, [pc, #100]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4916      	ldr	r1, [pc, #88]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d82:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	490e      	ldr	r1, [pc, #56]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d96:	f000 f821 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	490a      	ldr	r1, [pc, #40]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a09      	ldr	r2, [pc, #36]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003db2:	4b09      	ldr	r3, [pc, #36]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc ff48 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	08004768 	.word	0x08004768
 8003dd4:	20000034 	.word	0x20000034
 8003dd8:	20000038 	.word	0x20000038

08003ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003df6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d002      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x30>
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d003      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x36>
 8003e0a:	e027      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e0c:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e0e:	613b      	str	r3, [r7, #16]
      break;
 8003e10:	e027      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	0c9b      	lsrs	r3, r3, #18
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e1c:	5cd3      	ldrb	r3, [r2, r3]
 8003e1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d010      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e2a:	4b11      	ldr	r3, [pc, #68]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	0c5b      	lsrs	r3, r3, #17
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	4a11      	ldr	r2, [pc, #68]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e3e:	fb03 f202 	mul.w	r2, r3, r2
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e004      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	613b      	str	r3, [r7, #16]
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e5e:	613b      	str	r3, [r7, #16]
      break;
 8003e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e62:	693b      	ldr	r3, [r7, #16]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000
 8003e74:	007a1200 	.word	0x007a1200
 8003e78:	08004780 	.word	0x08004780
 8003e7c:	08004790 	.word	0x08004790
 8003e80:	003d0900 	.word	0x003d0900

08003e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b02      	ldr	r3, [pc, #8]	@ (8003e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	20000034 	.word	0x20000034

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff2 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	@ (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	@ (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	08004778 	.word	0x08004778

08003ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <RCC_Delay+0x34>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <RCC_Delay+0x38>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	0a5b      	lsrs	r3, r3, #9
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003edc:	bf00      	nop
  }
  while (Delay --);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e5a      	subs	r2, r3, #1
 8003ee2:	60fa      	str	r2, [r7, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f9      	bne.n	8003edc <RCC_Delay+0x1c>
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	20000034 	.word	0x20000034
 8003ef8:	10624dd3 	.word	0x10624dd3

08003efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e041      	b.n	8003f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc fd48 	bl	80009b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f000 fa5c 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d001      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e03a      	b.n	800402a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	@ (8004034 <HAL_TIM_Base_Start_IT+0x98>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	@ (8004038 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a13      	ldr	r2, [pc, #76]	@ (800403c <HAL_TIM_Base_Start_IT+0xa0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d010      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	e007      	b.n	8004028 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800

08004040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d020      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01b      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0202 	mvn.w	r2, #2
 8004074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f998 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004090:	e005      	b.n	800409e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f98b 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f99a 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d020      	beq.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01b      	beq.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0204 	mvn.w	r2, #4
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f972 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f965 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f974 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d020      	beq.n	800413c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01b      	beq.n	800413c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0208 	mvn.w	r2, #8
 800410c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2204      	movs	r2, #4
 8004112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f94c 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004128:	e005      	b.n	8004136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f93f 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f94e 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01b      	beq.n	8004188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0210 	mvn.w	r2, #16
 8004158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2208      	movs	r2, #8
 800415e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f926 	bl	80043c0 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f919 	bl	80043ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f928 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00c      	beq.n	80041ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0201 	mvn.w	r2, #1
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc fb64 	bl	8000874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa7f 	bl	80046ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8f8 	bl	80043e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0220 	mvn.w	r2, #32
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa52 	bl	80046bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIM_ConfigClockSource+0x1c>
 8004238:	2302      	movs	r3, #2
 800423a:	e0b4      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x186>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004274:	d03e      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427a:	f200 8087 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004282:	f000 8086 	beq.w	8004392 <HAL_TIM_ConfigClockSource+0x172>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	d87f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b70      	cmp	r3, #112	@ 0x70
 800428e:	d01a      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004290:	2b70      	cmp	r3, #112	@ 0x70
 8004292:	d87b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b60      	cmp	r3, #96	@ 0x60
 8004296:	d050      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x11a>
 8004298:	2b60      	cmp	r3, #96	@ 0x60
 800429a:	d877      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b50      	cmp	r3, #80	@ 0x50
 800429e:	d03c      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xfa>
 80042a0:	2b50      	cmp	r3, #80	@ 0x50
 80042a2:	d873      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d058      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x13a>
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d86f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b30      	cmp	r3, #48	@ 0x30
 80042ae:	d064      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	2b30      	cmp	r3, #48	@ 0x30
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d867      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d05a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	e062      	b.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	f000 f974 	bl	80045c2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
      break;
 80042f2:	e04f      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004304:	f000 f95d 	bl	80045c2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	461a      	mov	r2, r3
 8004328:	f000 f8d4 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	@ 0x50
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f92b 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8004338:	e02c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004346:	461a      	mov	r2, r3
 8004348:	f000 f8f2 	bl	8004530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	@ 0x60
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f91b 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8004358:	e01c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 f8b4 	bl	80044d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	@ 0x40
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f90b 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 8004378:	e00c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 f902 	bl	800458e <TIM_ITRx_SetConfig>
      break;
 800438a:	e003      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e000      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
	...

080043f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2f      	ldr	r2, [pc, #188]	@ (80044c8 <TIM_Base_SetConfig+0xd0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004416:	d007      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a2c      	ldr	r2, [pc, #176]	@ (80044cc <TIM_Base_SetConfig+0xd4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_Base_SetConfig+0x30>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a2b      	ldr	r2, [pc, #172]	@ (80044d0 <TIM_Base_SetConfig+0xd8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d108      	bne.n	800443a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <TIM_Base_SetConfig+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004448:	d007      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1f      	ldr	r2, [pc, #124]	@ (80044cc <TIM_Base_SetConfig+0xd4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_Base_SetConfig+0x62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1e      	ldr	r2, [pc, #120]	@ (80044d0 <TIM_Base_SetConfig+0xd8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d108      	bne.n	800446c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a0d      	ldr	r2, [pc, #52]	@ (80044c8 <TIM_Base_SetConfig+0xd0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d103      	bne.n	80044a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	611a      	str	r2, [r3, #16]
  }
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800

080044d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0201 	bic.w	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 030a 	bic.w	r3, r3, #10
 8004510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0210 	bic.w	r2, r3, #16
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800455a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800456c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	621a      	str	r2, [r3, #32]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f043 0307 	orr.w	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b087      	sub	sp, #28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
 80045ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	021a      	lsls	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	609a      	str	r2, [r3, #8]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004614:	2302      	movs	r3, #2
 8004616:	e046      	b.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a16      	ldr	r2, [pc, #88]	@ (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004664:	d009      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a12      	ldr	r2, [pc, #72]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a10      	ldr	r2, [pc, #64]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d10c      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800

080046bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <memset>:
 80046e0:	4603      	mov	r3, r0
 80046e2:	4402      	add	r2, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	2600      	movs	r6, #0
 80046f4:	4d0c      	ldr	r5, [pc, #48]	@ (8004728 <__libc_init_array+0x38>)
 80046f6:	4c0d      	ldr	r4, [pc, #52]	@ (800472c <__libc_init_array+0x3c>)
 80046f8:	1b64      	subs	r4, r4, r5
 80046fa:	10a4      	asrs	r4, r4, #2
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	d109      	bne.n	8004714 <__libc_init_array+0x24>
 8004700:	f000 f81a 	bl	8004738 <_init>
 8004704:	2600      	movs	r6, #0
 8004706:	4d0a      	ldr	r5, [pc, #40]	@ (8004730 <__libc_init_array+0x40>)
 8004708:	4c0a      	ldr	r4, [pc, #40]	@ (8004734 <__libc_init_array+0x44>)
 800470a:	1b64      	subs	r4, r4, r5
 800470c:	10a4      	asrs	r4, r4, #2
 800470e:	42a6      	cmp	r6, r4
 8004710:	d105      	bne.n	800471e <__libc_init_array+0x2e>
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	f855 3b04 	ldr.w	r3, [r5], #4
 8004718:	4798      	blx	r3
 800471a:	3601      	adds	r6, #1
 800471c:	e7ee      	b.n	80046fc <__libc_init_array+0xc>
 800471e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004722:	4798      	blx	r3
 8004724:	3601      	adds	r6, #1
 8004726:	e7f2      	b.n	800470e <__libc_init_array+0x1e>
 8004728:	08004794 	.word	0x08004794
 800472c:	08004794 	.word	0x08004794
 8004730:	08004794 	.word	0x08004794
 8004734:	08004798 	.word	0x08004798

08004738 <_init>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr

08004744 <_fini>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr
